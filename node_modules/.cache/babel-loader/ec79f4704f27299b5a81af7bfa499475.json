{"ast":null,"code":"var utils = require('./utils'),\n    _tags = require('./tags'),\n    _filters = require('./filters'),\n    parser = require('./parser'),\n    dateformatter = require('./dateformatter'),\n    loaders = require('./loaders');\n/**\n * Swig version number as a string.\n * @example\n * if (swig.version === \"1.4.2\") { ... }\n *\n * @type {String}\n */\n\n\nexports.version = \"1.4.2\";\n/**\n * Swig Options Object. This object can be passed to many of the API-level Swig methods to control various aspects of the engine. All keys are optional.\n * @typedef {Object} SwigOpts\n * @property {boolean} autoescape  Controls whether or not variable output will automatically be escaped for safe HTML output. Defaults to <code data-language=\"js\">true</code>. Functions executed in variable statements will not be auto-escaped. Your application/functions should take care of their own auto-escaping.\n * @property {array}   varControls Open and close controls for variables. Defaults to <code data-language=\"js\">['{{', '}}']</code>.\n * @property {array}   tagControls Open and close controls for tags. Defaults to <code data-language=\"js\">['{%', '%}']</code>.\n * @property {array}   cmtControls Open and close controls for comments. Defaults to <code data-language=\"js\">['{#', '#}']</code>.\n * @property {object}  locals      Default variable context to be passed to <strong>all</strong> templates.\n * @property {CacheOptions} cache Cache control for templates. Defaults to saving in <code data-language=\"js\">'memory'</code>. Send <code data-language=\"js\">false</code> to disable. Send an object with <code data-language=\"js\">get</code> and <code data-language=\"js\">set</code> functions to customize.\n * @property {TemplateLoader} loader The method that Swig will use to load templates. Defaults to <var>swig.loaders.fs</var>.\n */\n\nvar defaultOptions = {\n  autoescape: true,\n  varControls: ['{{', '}}'],\n  tagControls: ['{%', '%}'],\n  cmtControls: ['{#', '#}'],\n  locals: {},\n\n  /**\n   * Cache control for templates. Defaults to saving all templates into memory.\n   * @typedef {boolean|string|object} CacheOptions\n   * @example\n   * // Default\n   * swig.setDefaults({ cache: 'memory' });\n   * @example\n   * // Disables caching in Swig.\n   * swig.setDefaults({ cache: false });\n   * @example\n   * // Custom cache storage and retrieval\n   * swig.setDefaults({\n   *   cache: {\n   *     get: function (key) { ... },\n   *     set: function (key, val) { ... }\n   *   }\n   * });\n   */\n  cache: 'memory',\n\n  /**\n   * Configure Swig to use either the <var>swig.loaders.fs</var> or <var>swig.loaders.memory</var> template loader. Or, you can write your own!\n   * For more information, please see the <a href=\"../loaders/\">Template Loaders documentation</a>.\n   * @typedef {class} TemplateLoader\n   * @example\n   * // Default, FileSystem loader\n   * swig.setDefaults({ loader: swig.loaders.fs() });\n   * @example\n   * // FileSystem loader allowing a base path\n   * // With this, you don't use relative URLs in your template references\n   * swig.setDefaults({ loader: swig.loaders.fs(__dirname + '/templates') });\n   * @example\n   * // Memory Loader\n   * swig.setDefaults({ loader: swig.loaders.memory({\n   *   layout: '{% block foo %}{% endblock %}',\n   *   page1: '{% extends \"layout\" %}{% block foo %}Tacos!{% endblock %}'\n   * })});\n   */\n  loader: loaders.fs()\n},\n    defaultInstance;\n/**\n * Empty function, used in templates.\n * @return {string} Empty string\n * @private\n */\n\nfunction efn() {\n  return '';\n}\n/**\n * Validate the Swig options object.\n * @param  {?SwigOpts} options Swig options object.\n * @return {undefined}      This method will throw errors if anything is wrong.\n * @private\n */\n\n\nfunction validateOptions(options) {\n  if (!options) {\n    return;\n  }\n\n  utils.each(['varControls', 'tagControls', 'cmtControls'], function (key) {\n    if (!options.hasOwnProperty(key)) {\n      return;\n    }\n\n    if (!utils.isArray(options[key]) || options[key].length !== 2) {\n      throw new Error('Option \"' + key + '\" must be an array containing 2 different control strings.');\n    }\n\n    if (options[key][0] === options[key][1]) {\n      throw new Error('Option \"' + key + '\" open and close controls must not be the same.');\n    }\n\n    utils.each(options[key], function (a, i) {\n      if (a.length < 2) {\n        throw new Error('Option \"' + key + '\" ' + (i ? 'open ' : 'close ') + 'control must be at least 2 characters. Saw \"' + a + '\" instead.');\n      }\n    });\n  });\n\n  if (options.hasOwnProperty('cache')) {\n    if (options.cache && options.cache !== 'memory') {\n      if (!options.cache.get || !options.cache.set) {\n        throw new Error('Invalid cache option ' + JSON.stringify(options.cache) + ' found. Expected \"memory\" or { get: function (key) { ... }, set: function (key, value) { ... } }.');\n      }\n    }\n  }\n\n  if (options.hasOwnProperty('loader')) {\n    if (options.loader) {\n      if (!options.loader.load || !options.loader.resolve) {\n        throw new Error('Invalid loader option ' + JSON.stringify(options.loader) + ' found. Expected { load: function (pathname, cb) { ... }, resolve: function (to, from) { ... } }.');\n      }\n    }\n  }\n}\n/**\n * Set defaults for the base and all new Swig environments.\n *\n * @example\n * swig.setDefaults({ cache: false });\n * // => Disables Cache\n *\n * @example\n * swig.setDefaults({ locals: { now: function () { return new Date(); } }});\n * // => sets a globally accessible method for all template\n * //    contexts, allowing you to print the current date\n * // => {{ now()|date('F jS, Y') }}\n *\n * @param  {SwigOpts} [options={}] Swig options object.\n * @return {undefined}\n */\n\n\nexports.setDefaults = function (options) {\n  validateOptions(options);\n  defaultInstance.options = utils.extend(defaultInstance.options, options);\n};\n/**\n * Set the default TimeZone offset for date formatting via the date filter. This is a global setting and will affect all Swig environments, old or new.\n * @param  {number} offset Offset from GMT, in minutes.\n * @return {undefined}\n */\n\n\nexports.setDefaultTZOffset = function (offset) {\n  dateformatter.tzOffset = offset;\n};\n/**\n * Create a new, separate Swig compile/render environment.\n *\n * @example\n * var swig = require('swig');\n * var myswig = new swig.Swig({varControls: ['<%=', '%>']});\n * myswig.render('Tacos are <%= tacos =>!', { locals: { tacos: 'delicious' }});\n * // => Tacos are delicious!\n * swig.render('Tacos are <%= tacos =>!', { locals: { tacos: 'delicious' }});\n * // => 'Tacos are <%= tacos =>!'\n *\n * @param  {SwigOpts} [opts={}] Swig options object.\n * @return {object}      New Swig environment.\n */\n\n\nexports.Swig = function (opts) {\n  validateOptions(opts);\n  this.options = utils.extend({}, defaultOptions, opts || {});\n  this.cache = {};\n  this.extensions = {};\n  var self = this,\n      tags = _tags,\n      filters = _filters;\n  /**\n   * Get combined locals context.\n   * @param  {?SwigOpts} [options] Swig options object.\n   * @return {object}         Locals context.\n   * @private\n   */\n\n  function getLocals(options) {\n    if (!options || !options.locals) {\n      return self.options.locals;\n    }\n\n    return utils.extend({}, self.options.locals, options.locals);\n  }\n  /**\n   * Determine whether caching is enabled via the options provided and/or defaults\n   * @param  {SwigOpts} [options={}] Swig Options Object\n   * @return {boolean}\n   * @private\n   */\n\n\n  function shouldCache(options) {\n    options = options || {};\n    return options.hasOwnProperty('cache') && !options.cache || !self.options.cache;\n  }\n  /**\n   * Get compiled template from the cache.\n   * @param  {string} key           Name of template.\n   * @return {object|undefined}     Template function and tokens.\n   * @private\n   */\n\n\n  function cacheGet(key, options) {\n    if (shouldCache(options)) {\n      return;\n    }\n\n    if (self.options.cache === 'memory') {\n      return self.cache[key];\n    }\n\n    return self.options.cache.get(key);\n  }\n  /**\n   * Store a template in the cache.\n   * @param  {string} key Name of template.\n   * @param  {object} val Template function and tokens.\n   * @return {undefined}\n   * @private\n   */\n\n\n  function cacheSet(key, options, val) {\n    if (shouldCache(options)) {\n      return;\n    }\n\n    if (self.options.cache === 'memory') {\n      self.cache[key] = val;\n      return;\n    }\n\n    self.options.cache.set(key, val);\n  }\n  /**\n   * Clears the in-memory template cache.\n   *\n   * @example\n   * swig.invalidateCache();\n   *\n   * @return {undefined}\n   */\n\n\n  this.invalidateCache = function () {\n    if (self.options.cache === 'memory') {\n      self.cache = {};\n    }\n  };\n  /**\n   * Add a custom filter for swig variables.\n   *\n   * @example\n   * function replaceMs(input) { return input.replace(/m/g, 'f'); }\n   * swig.setFilter('replaceMs', replaceMs);\n   * // => {{ \"onomatopoeia\"|replaceMs }}\n   * // => onofatopeia\n   *\n   * @param {string}    name    Name of filter, used in templates. <strong>Will</strong> overwrite previously defined filters, if using the same name.\n   * @param {function}  method  Function that acts against the input. See <a href=\"/docs/filters/#custom\">Custom Filters</a> for more information.\n   * @return {undefined}\n   */\n\n\n  this.setFilter = function (name, method) {\n    if (typeof method !== \"function\") {\n      throw new Error('Filter \"' + name + '\" is not a valid function.');\n    }\n\n    filters[name] = method;\n  };\n  /**\n   * Add a custom tag. To expose your own extensions to compiled template code, see <code data-language=\"js\">swig.setExtension</code>.\n   *\n   * For a more in-depth explanation of writing custom tags, see <a href=\"../extending/#tags\">Custom Tags</a>.\n   *\n   * @example\n   * var tacotag = require('./tacotag');\n   * swig.setTag('tacos', tacotag.parse, tacotag.compile, tacotag.ends, tacotag.blockLevel);\n   * // => {% tacos %}Make this be tacos.{% endtacos %}\n   * // => Tacos tacos tacos tacos.\n   *\n   * @param  {string} name      Tag name.\n   * @param  {function} parse   Method for parsing tokens.\n   * @param  {function} compile Method for compiling renderable output.\n   * @param  {boolean} [ends=false]     Whether or not this tag requires an <i>end</i> tag.\n   * @param  {boolean} [blockLevel=false] If false, this tag will not be compiled outside of <code>block</code> tags when extending a parent template.\n   * @return {undefined}\n   */\n\n\n  this.setTag = function (name, parse, compile, ends, blockLevel) {\n    if (typeof parse !== 'function') {\n      throw new Error('Tag \"' + name + '\" parse method is not a valid function.');\n    }\n\n    if (typeof compile !== 'function') {\n      throw new Error('Tag \"' + name + '\" compile method is not a valid function.');\n    }\n\n    tags[name] = {\n      parse: parse,\n      compile: compile,\n      ends: ends || false,\n      block: !!blockLevel\n    };\n  };\n  /**\n   * Add extensions for custom tags. This allows any custom tag to access a globally available methods via a special globally available object, <var>_ext</var>, in templates.\n   *\n   * @example\n   * swig.setExtension('trans', function (v) { return translate(v); });\n   * function compileTrans(compiler, args, content, parent, options) {\n   *   return '_output += _ext.trans(' + args[0] + ');'\n   * };\n   * swig.setTag('trans', parseTrans, compileTrans, true);\n   *\n   * @param  {string} name   Key name of the extension. Accessed via <code data-language=\"js\">_ext[name]</code>.\n   * @param  {*}      object The method, value, or object that should be available via the given name.\n   * @return {undefined}\n   */\n\n\n  this.setExtension = function (name, object) {\n    self.extensions[name] = object;\n  };\n  /**\n   * Parse a given source string into tokens.\n   *\n   * @param  {string} source  Swig template source.\n   * @param  {SwigOpts} [options={}] Swig options object.\n   * @return {object} parsed  Template tokens object.\n   * @private\n   */\n\n\n  this.parse = function (source, options) {\n    validateOptions(options);\n    var locals = getLocals(options),\n        opts = {},\n        k;\n\n    for (k in options) {\n      if (options.hasOwnProperty(k) && k !== 'locals') {\n        opts[k] = options[k];\n      }\n    }\n\n    options = utils.extend({}, self.options, opts);\n    options.locals = locals;\n    return parser.parse(this, source, options, tags, filters);\n  };\n  /**\n   * Parse a given file into tokens.\n   *\n   * @param  {string} pathname  Full path to file to parse.\n   * @param  {SwigOpts} [options={}]   Swig options object.\n   * @return {object} parsed    Template tokens object.\n   * @private\n   */\n\n\n  this.parseFile = function (pathname, options) {\n    var src;\n\n    if (!options) {\n      options = {};\n    }\n\n    pathname = self.options.loader.resolve(pathname, options.resolveFrom);\n    src = self.options.loader.load(pathname);\n\n    if (!options.filename) {\n      options = utils.extend({\n        filename: pathname\n      }, options);\n    }\n\n    return self.parse(src, options);\n  };\n  /**\n   * Re-Map blocks within a list of tokens to the template's block objects.\n   * @param  {array}  tokens   List of tokens for the parent object.\n   * @param  {object} template Current template that needs to be mapped to the  parent's block and token list.\n   * @return {array}\n   * @private\n   */\n\n\n  function remapBlocks(blocks, tokens) {\n    return utils.map(tokens, function (token) {\n      var args = token.args ? token.args.join('') : '';\n\n      if (token.name === 'block' && blocks[args]) {\n        token = blocks[args];\n      }\n\n      if (token.content && token.content.length) {\n        token.content = remapBlocks(blocks, token.content);\n      }\n\n      return token;\n    });\n  }\n  /**\n   * Import block-level tags to the token list that are not actual block tags.\n   * @param  {array} blocks List of block-level tags.\n   * @param  {array} tokens List of tokens to render.\n   * @return {undefined}\n   * @private\n   */\n\n\n  function importNonBlocks(blocks, tokens) {\n    var temp = [];\n    utils.each(blocks, function (block) {\n      temp.push(block);\n    });\n    utils.each(temp.reverse(), function (block) {\n      if (block.name !== 'block') {\n        tokens.unshift(block);\n      }\n    });\n  }\n  /**\n   * Recursively compile and get parents of given parsed token object.\n   *\n   * @param  {object} tokens    Parsed tokens from template.\n   * @param  {SwigOpts} [options={}]   Swig options object.\n   * @return {object}           Parsed tokens from parent templates.\n   * @private\n   */\n\n\n  function getParents(tokens, options) {\n    var parentName = tokens.parent,\n        parentFiles = [],\n        parents = [],\n        parentFile,\n        parent,\n        l;\n\n    while (parentName) {\n      if (!options || !options.filename) {\n        throw new Error('Cannot extend \"' + parentName + '\" because current template has no filename.');\n      }\n\n      parentFile = parentFile || options.filename;\n      parentFile = self.options.loader.resolve(parentName, parentFile);\n      parent = cacheGet(parentFile, options) || self.parseFile(parentFile, utils.extend({}, options, {\n        filename: parentFile\n      }));\n      parentName = parent.parent;\n\n      if (parentFiles.indexOf(parentFile) !== -1) {\n        throw new Error('Illegal circular extends of \"' + parentFile + '\".');\n      }\n\n      parentFiles.push(parentFile);\n      parents.push(parent);\n    } // Remap each parents'(1) blocks onto its own parent(2), receiving the full token list for rendering the original parent(1) on its own.\n\n\n    l = parents.length;\n\n    for (l = parents.length - 2; l >= 0; l -= 1) {\n      parents[l].tokens = remapBlocks(parents[l].blocks, parents[l + 1].tokens);\n      importNonBlocks(parents[l].blocks, parents[l].tokens);\n    }\n\n    return parents;\n  }\n  /**\n   * Pre-compile a source string into a cache-able template function.\n   *\n   * @example\n   * swig.precompile('{{ tacos }}');\n   * // => {\n   * //      tpl: function (_swig, _locals, _filters, _utils, _fn) { ... },\n   * //      tokens: {\n   * //        name: undefined,\n   * //        parent: null,\n   * //        tokens: [...],\n   * //        blocks: {}\n   * //      }\n   * //    }\n   *\n   * In order to render a pre-compiled template, you must have access to filters and utils from Swig. <var>efn</var> is simply an empty function that does nothing.\n   *\n   * @param  {string} source  Swig template source string.\n   * @param  {SwigOpts} [options={}] Swig options object.\n   * @return {object}         Renderable function and tokens object.\n   */\n\n\n  this.precompile = function (source, options) {\n    var tokens = self.parse(source, options),\n        parents = getParents(tokens, options),\n        tpl,\n        err;\n\n    if (parents.length) {\n      // Remap the templates first-parent's tokens using this template's blocks.\n      tokens.tokens = remapBlocks(tokens.blocks, parents[0].tokens);\n      importNonBlocks(tokens.blocks, tokens.tokens);\n    }\n\n    try {\n      tpl = new Function('_swig', '_ctx', '_filters', '_utils', '_fn', '  var _ext = _swig.extensions,\\n' + '    _output = \"\";\\n' + parser.compile(tokens, parents, options) + '\\n' + '  return _output;\\n');\n    } catch (e) {\n      utils.throwError(e, null, options.filename);\n    }\n\n    return {\n      tpl: tpl,\n      tokens: tokens\n    };\n  };\n  /**\n   * Compile and render a template string for final output.\n   *\n   * When rendering a source string, a file path should be specified in the options object in order for <var>extends</var>, <var>include</var>, and <var>import</var> to work properly. Do this by adding <code data-language=\"js\">{ filename: '/absolute/path/to/mytpl.html' }</code> to the options argument.\n   *\n   * @example\n   * swig.render('{{ tacos }}', { locals: { tacos: 'Tacos!!!!' }});\n   * // => Tacos!!!!\n   *\n   * @param  {string} source    Swig template source string.\n   * @param  {SwigOpts} [options={}] Swig options object.\n   * @return {string}           Rendered output.\n   */\n\n\n  this.render = function (source, options) {\n    return self.compile(source, options)();\n  };\n  /**\n   * Compile and render a template file for final output. This is most useful for libraries like Express.js.\n   *\n   * @example\n   * swig.renderFile('./template.html', {}, function (err, output) {\n   *   if (err) {\n   *     throw err;\n   *   }\n   *   console.log(output);\n   * });\n   *\n   * @example\n   * swig.renderFile('./template.html', {});\n   * // => output\n   *\n   * @param  {string}   pathName    File location.\n   * @param  {object}   [locals={}] Template variable context.\n   * @param  {Function} [cb] Asyncronous callback function. If not provided, <var>compileFile</var> will run syncronously.\n   * @return {string}             Rendered output.\n   */\n\n\n  this.renderFile = function (pathName, locals, cb) {\n    if (cb) {\n      self.compileFile(pathName, {}, function (err, fn) {\n        var result;\n\n        if (err) {\n          cb(err);\n          return;\n        }\n\n        try {\n          result = fn(locals);\n        } catch (err2) {\n          cb(err2);\n          return;\n        }\n\n        cb(null, result);\n      });\n      return;\n    }\n\n    return self.compileFile(pathName)(locals);\n  };\n  /**\n   * Compile string source into a renderable template function.\n   *\n   * @example\n   * var tpl = swig.compile('{{ tacos }}');\n   * // => {\n   * //      [Function: compiled]\n   * //      parent: null,\n   * //      tokens: [{ compile: [Function] }],\n   * //      blocks: {}\n   * //    }\n   * tpl({ tacos: 'Tacos!!!!' });\n   * // => Tacos!!!!\n   *\n   * When compiling a source string, a file path should be specified in the options object in order for <var>extends</var>, <var>include</var>, and <var>import</var> to work properly. Do this by adding <code data-language=\"js\">{ filename: '/absolute/path/to/mytpl.html' }</code> to the options argument.\n   *\n   * @param  {string} source    Swig template source string.\n   * @param  {SwigOpts} [options={}] Swig options object.\n   * @return {function}         Renderable function with keys for parent, blocks, and tokens.\n   */\n\n\n  this.compile = function (source, options) {\n    var key = options ? options.filename : null,\n        cached = key ? cacheGet(key, options) : null,\n        context,\n        contextLength,\n        pre;\n\n    if (cached) {\n      return cached;\n    }\n\n    context = getLocals(options);\n    contextLength = utils.keys(context).length;\n    pre = this.precompile(source, options);\n\n    function compiled(locals) {\n      var lcls;\n\n      if (locals && contextLength) {\n        lcls = utils.extend({}, context, locals);\n      } else if (locals && !contextLength) {\n        lcls = locals;\n      } else if (!locals && contextLength) {\n        lcls = context;\n      } else {\n        lcls = {};\n      }\n\n      return pre.tpl(self, lcls, filters, utils, efn);\n    }\n\n    utils.extend(compiled, pre.tokens);\n\n    if (key) {\n      cacheSet(key, options, compiled);\n    }\n\n    return compiled;\n  };\n  /**\n   * Compile a source file into a renderable template function.\n   *\n   * @example\n   * var tpl = swig.compileFile('./mytpl.html');\n   * // => {\n   * //      [Function: compiled]\n   * //      parent: null,\n   * //      tokens: [{ compile: [Function] }],\n   * //      blocks: {}\n   * //    }\n   * tpl({ tacos: 'Tacos!!!!' });\n   * // => Tacos!!!!\n   *\n   * @example\n   * swig.compileFile('/myfile.txt', { varControls: ['<%=', '=%>'], tagControls: ['<%', '%>']});\n   * // => will compile 'myfile.txt' using the var and tag controls as specified.\n   *\n   * @param  {string} pathname  File location.\n   * @param  {SwigOpts} [options={}] Swig options object.\n   * @param  {Function} [cb] Asyncronous callback function. If not provided, <var>compileFile</var> will run syncronously.\n   * @return {function}         Renderable function with keys for parent, blocks, and tokens.\n   */\n\n\n  this.compileFile = function (pathname, options, cb) {\n    var src, cached;\n\n    if (!options) {\n      options = {};\n    }\n\n    pathname = self.options.loader.resolve(pathname, options.resolveFrom);\n\n    if (!options.filename) {\n      options = utils.extend({\n        filename: pathname\n      }, options);\n    }\n\n    cached = cacheGet(pathname, options);\n\n    if (cached) {\n      if (cb) {\n        cb(null, cached);\n        return;\n      }\n\n      return cached;\n    }\n\n    if (cb) {\n      self.options.loader.load(pathname, function (err, src) {\n        if (err) {\n          cb(err);\n          return;\n        }\n\n        var compiled;\n\n        try {\n          compiled = self.compile(src, options);\n        } catch (err2) {\n          cb(err2);\n          return;\n        }\n\n        cb(err, compiled);\n      });\n      return;\n    }\n\n    src = self.options.loader.load(pathname);\n    return self.compile(src, options);\n  };\n  /**\n   * Run a pre-compiled template function. This is most useful in the browser when you've pre-compiled your templates with the Swig command-line tool.\n   *\n   * @example\n   * $ swig compile ./mytpl.html --wrap-start=\"var mytpl = \" > mytpl.js\n   * @example\n   * <script src=\"mytpl.js\"></script>\n   * <script>\n   *   swig.run(mytpl, {});\n   *   // => \"rendered template...\"\n   * </script>\n   *\n   * @param  {function} tpl       Pre-compiled Swig template function. Use the Swig CLI to compile your templates.\n   * @param  {object} [locals={}] Template variable context.\n   * @param  {string} [filepath]  Filename used for caching the template.\n   * @return {string}             Rendered output.\n   */\n\n\n  this.run = function (tpl, locals, filepath) {\n    var context = getLocals({\n      locals: locals\n    });\n\n    if (filepath) {\n      cacheSet(filepath, {}, tpl);\n    }\n\n    return tpl(self, context, filters, utils, efn);\n  };\n};\n/*!\n * Export methods publicly\n */\n\n\ndefaultInstance = new exports.Swig();\nexports.setFilter = defaultInstance.setFilter;\nexports.setTag = defaultInstance.setTag;\nexports.setExtension = defaultInstance.setExtension;\nexports.parseFile = defaultInstance.parseFile;\nexports.precompile = defaultInstance.precompile;\nexports.compile = defaultInstance.compile;\nexports.compileFile = defaultInstance.compileFile;\nexports.render = defaultInstance.render;\nexports.renderFile = defaultInstance.renderFile;\nexports.run = defaultInstance.run;\nexports.invalidateCache = defaultInstance.invalidateCache;\nexports.loaders = loaders;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/swig/lib/swig.js"],"names":["utils","require","_tags","_filters","parser","dateformatter","loaders","exports","version","defaultOptions","autoescape","varControls","tagControls","cmtControls","locals","cache","loader","fs","defaultInstance","efn","validateOptions","options","each","key","hasOwnProperty","isArray","length","Error","a","i","get","set","JSON","stringify","load","resolve","setDefaults","extend","setDefaultTZOffset","offset","tzOffset","Swig","opts","extensions","self","tags","filters","getLocals","shouldCache","cacheGet","cacheSet","val","invalidateCache","setFilter","name","method","setTag","parse","compile","ends","blockLevel","block","setExtension","object","source","k","parseFile","pathname","src","resolveFrom","filename","remapBlocks","blocks","tokens","map","token","args","join","content","importNonBlocks","temp","push","reverse","unshift","getParents","parentName","parent","parentFiles","parents","parentFile","l","indexOf","precompile","tpl","err","Function","e","throwError","render","renderFile","pathName","cb","compileFile","fn","result","err2","cached","context","contextLength","pre","keys","compiled","lcls","run","filepath"],"mappings":"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","sourcesContent":["var utils = require('./utils'),\n  _tags = require('./tags'),\n  _filters = require('./filters'),\n  parser = require('./parser'),\n  dateformatter = require('./dateformatter'),\n  loaders = require('./loaders');\n\n/**\n * Swig version number as a string.\n * @example\n * if (swig.version === \"1.4.2\") { ... }\n *\n * @type {String}\n */\nexports.version = \"1.4.2\";\n\n/**\n * Swig Options Object. This object can be passed to many of the API-level Swig methods to control various aspects of the engine. All keys are optional.\n * @typedef {Object} SwigOpts\n * @property {boolean} autoescape  Controls whether or not variable output will automatically be escaped for safe HTML output. Defaults to <code data-language=\"js\">true</code>. Functions executed in variable statements will not be auto-escaped. Your application/functions should take care of their own auto-escaping.\n * @property {array}   varControls Open and close controls for variables. Defaults to <code data-language=\"js\">['{{', '}}']</code>.\n * @property {array}   tagControls Open and close controls for tags. Defaults to <code data-language=\"js\">['{%', '%}']</code>.\n * @property {array}   cmtControls Open and close controls for comments. Defaults to <code data-language=\"js\">['{#', '#}']</code>.\n * @property {object}  locals      Default variable context to be passed to <strong>all</strong> templates.\n * @property {CacheOptions} cache Cache control for templates. Defaults to saving in <code data-language=\"js\">'memory'</code>. Send <code data-language=\"js\">false</code> to disable. Send an object with <code data-language=\"js\">get</code> and <code data-language=\"js\">set</code> functions to customize.\n * @property {TemplateLoader} loader The method that Swig will use to load templates. Defaults to <var>swig.loaders.fs</var>.\n */\nvar defaultOptions = {\n    autoescape: true,\n    varControls: ['{{', '}}'],\n    tagControls: ['{%', '%}'],\n    cmtControls: ['{#', '#}'],\n    locals: {},\n    /**\n     * Cache control for templates. Defaults to saving all templates into memory.\n     * @typedef {boolean|string|object} CacheOptions\n     * @example\n     * // Default\n     * swig.setDefaults({ cache: 'memory' });\n     * @example\n     * // Disables caching in Swig.\n     * swig.setDefaults({ cache: false });\n     * @example\n     * // Custom cache storage and retrieval\n     * swig.setDefaults({\n     *   cache: {\n     *     get: function (key) { ... },\n     *     set: function (key, val) { ... }\n     *   }\n     * });\n     */\n    cache: 'memory',\n    /**\n     * Configure Swig to use either the <var>swig.loaders.fs</var> or <var>swig.loaders.memory</var> template loader. Or, you can write your own!\n     * For more information, please see the <a href=\"../loaders/\">Template Loaders documentation</a>.\n     * @typedef {class} TemplateLoader\n     * @example\n     * // Default, FileSystem loader\n     * swig.setDefaults({ loader: swig.loaders.fs() });\n     * @example\n     * // FileSystem loader allowing a base path\n     * // With this, you don't use relative URLs in your template references\n     * swig.setDefaults({ loader: swig.loaders.fs(__dirname + '/templates') });\n     * @example\n     * // Memory Loader\n     * swig.setDefaults({ loader: swig.loaders.memory({\n     *   layout: '{% block foo %}{% endblock %}',\n     *   page1: '{% extends \"layout\" %}{% block foo %}Tacos!{% endblock %}'\n     * })});\n     */\n    loader: loaders.fs()\n  },\n  defaultInstance;\n\n/**\n * Empty function, used in templates.\n * @return {string} Empty string\n * @private\n */\nfunction efn() { return ''; }\n\n/**\n * Validate the Swig options object.\n * @param  {?SwigOpts} options Swig options object.\n * @return {undefined}      This method will throw errors if anything is wrong.\n * @private\n */\nfunction validateOptions(options) {\n  if (!options) {\n    return;\n  }\n\n  utils.each(['varControls', 'tagControls', 'cmtControls'], function (key) {\n    if (!options.hasOwnProperty(key)) {\n      return;\n    }\n    if (!utils.isArray(options[key]) || options[key].length !== 2) {\n      throw new Error('Option \"' + key + '\" must be an array containing 2 different control strings.');\n    }\n    if (options[key][0] === options[key][1]) {\n      throw new Error('Option \"' + key + '\" open and close controls must not be the same.');\n    }\n    utils.each(options[key], function (a, i) {\n      if (a.length < 2) {\n        throw new Error('Option \"' + key + '\" ' + ((i) ? 'open ' : 'close ') + 'control must be at least 2 characters. Saw \"' + a + '\" instead.');\n      }\n    });\n  });\n\n  if (options.hasOwnProperty('cache')) {\n    if (options.cache && options.cache !== 'memory') {\n      if (!options.cache.get || !options.cache.set) {\n        throw new Error('Invalid cache option ' + JSON.stringify(options.cache) + ' found. Expected \"memory\" or { get: function (key) { ... }, set: function (key, value) { ... } }.');\n      }\n    }\n  }\n  if (options.hasOwnProperty('loader')) {\n    if (options.loader) {\n      if (!options.loader.load || !options.loader.resolve) {\n        throw new Error('Invalid loader option ' + JSON.stringify(options.loader) + ' found. Expected { load: function (pathname, cb) { ... }, resolve: function (to, from) { ... } }.');\n      }\n    }\n  }\n\n}\n\n/**\n * Set defaults for the base and all new Swig environments.\n *\n * @example\n * swig.setDefaults({ cache: false });\n * // => Disables Cache\n *\n * @example\n * swig.setDefaults({ locals: { now: function () { return new Date(); } }});\n * // => sets a globally accessible method for all template\n * //    contexts, allowing you to print the current date\n * // => {{ now()|date('F jS, Y') }}\n *\n * @param  {SwigOpts} [options={}] Swig options object.\n * @return {undefined}\n */\nexports.setDefaults = function (options) {\n  validateOptions(options);\n  defaultInstance.options = utils.extend(defaultInstance.options, options);\n};\n\n/**\n * Set the default TimeZone offset for date formatting via the date filter. This is a global setting and will affect all Swig environments, old or new.\n * @param  {number} offset Offset from GMT, in minutes.\n * @return {undefined}\n */\nexports.setDefaultTZOffset = function (offset) {\n  dateformatter.tzOffset = offset;\n};\n\n/**\n * Create a new, separate Swig compile/render environment.\n *\n * @example\n * var swig = require('swig');\n * var myswig = new swig.Swig({varControls: ['<%=', '%>']});\n * myswig.render('Tacos are <%= tacos =>!', { locals: { tacos: 'delicious' }});\n * // => Tacos are delicious!\n * swig.render('Tacos are <%= tacos =>!', { locals: { tacos: 'delicious' }});\n * // => 'Tacos are <%= tacos =>!'\n *\n * @param  {SwigOpts} [opts={}] Swig options object.\n * @return {object}      New Swig environment.\n */\nexports.Swig = function (opts) {\n  validateOptions(opts);\n  this.options = utils.extend({}, defaultOptions, opts || {});\n  this.cache = {};\n  this.extensions = {};\n  var self = this,\n    tags = _tags,\n    filters = _filters;\n\n  /**\n   * Get combined locals context.\n   * @param  {?SwigOpts} [options] Swig options object.\n   * @return {object}         Locals context.\n   * @private\n   */\n  function getLocals(options) {\n    if (!options || !options.locals) {\n      return self.options.locals;\n    }\n\n    return utils.extend({}, self.options.locals, options.locals);\n  }\n\n  /**\n   * Determine whether caching is enabled via the options provided and/or defaults\n   * @param  {SwigOpts} [options={}] Swig Options Object\n   * @return {boolean}\n   * @private\n   */\n  function shouldCache(options) {\n    options = options || {};\n    return (options.hasOwnProperty('cache') && !options.cache) || !self.options.cache;\n  }\n\n  /**\n   * Get compiled template from the cache.\n   * @param  {string} key           Name of template.\n   * @return {object|undefined}     Template function and tokens.\n   * @private\n   */\n  function cacheGet(key, options) {\n    if (shouldCache(options)) {\n      return;\n    }\n\n    if (self.options.cache === 'memory') {\n      return self.cache[key];\n    }\n\n    return self.options.cache.get(key);\n  }\n\n  /**\n   * Store a template in the cache.\n   * @param  {string} key Name of template.\n   * @param  {object} val Template function and tokens.\n   * @return {undefined}\n   * @private\n   */\n  function cacheSet(key, options, val) {\n    if (shouldCache(options)) {\n      return;\n    }\n\n    if (self.options.cache === 'memory') {\n      self.cache[key] = val;\n      return;\n    }\n\n    self.options.cache.set(key, val);\n  }\n\n  /**\n   * Clears the in-memory template cache.\n   *\n   * @example\n   * swig.invalidateCache();\n   *\n   * @return {undefined}\n   */\n  this.invalidateCache = function () {\n    if (self.options.cache === 'memory') {\n      self.cache = {};\n    }\n  };\n\n  /**\n   * Add a custom filter for swig variables.\n   *\n   * @example\n   * function replaceMs(input) { return input.replace(/m/g, 'f'); }\n   * swig.setFilter('replaceMs', replaceMs);\n   * // => {{ \"onomatopoeia\"|replaceMs }}\n   * // => onofatopeia\n   *\n   * @param {string}    name    Name of filter, used in templates. <strong>Will</strong> overwrite previously defined filters, if using the same name.\n   * @param {function}  method  Function that acts against the input. See <a href=\"/docs/filters/#custom\">Custom Filters</a> for more information.\n   * @return {undefined}\n   */\n  this.setFilter = function (name, method) {\n    if (typeof method !== \"function\") {\n      throw new Error('Filter \"' + name + '\" is not a valid function.');\n    }\n    filters[name] = method;\n  };\n\n  /**\n   * Add a custom tag. To expose your own extensions to compiled template code, see <code data-language=\"js\">swig.setExtension</code>.\n   *\n   * For a more in-depth explanation of writing custom tags, see <a href=\"../extending/#tags\">Custom Tags</a>.\n   *\n   * @example\n   * var tacotag = require('./tacotag');\n   * swig.setTag('tacos', tacotag.parse, tacotag.compile, tacotag.ends, tacotag.blockLevel);\n   * // => {% tacos %}Make this be tacos.{% endtacos %}\n   * // => Tacos tacos tacos tacos.\n   *\n   * @param  {string} name      Tag name.\n   * @param  {function} parse   Method for parsing tokens.\n   * @param  {function} compile Method for compiling renderable output.\n   * @param  {boolean} [ends=false]     Whether or not this tag requires an <i>end</i> tag.\n   * @param  {boolean} [blockLevel=false] If false, this tag will not be compiled outside of <code>block</code> tags when extending a parent template.\n   * @return {undefined}\n   */\n  this.setTag = function (name, parse, compile, ends, blockLevel) {\n    if (typeof parse !== 'function') {\n      throw new Error('Tag \"' + name + '\" parse method is not a valid function.');\n    }\n\n    if (typeof compile !== 'function') {\n      throw new Error('Tag \"' + name + '\" compile method is not a valid function.');\n    }\n\n    tags[name] = {\n      parse: parse,\n      compile: compile,\n      ends: ends || false,\n      block: !!blockLevel\n    };\n  };\n\n  /**\n   * Add extensions for custom tags. This allows any custom tag to access a globally available methods via a special globally available object, <var>_ext</var>, in templates.\n   *\n   * @example\n   * swig.setExtension('trans', function (v) { return translate(v); });\n   * function compileTrans(compiler, args, content, parent, options) {\n   *   return '_output += _ext.trans(' + args[0] + ');'\n   * };\n   * swig.setTag('trans', parseTrans, compileTrans, true);\n   *\n   * @param  {string} name   Key name of the extension. Accessed via <code data-language=\"js\">_ext[name]</code>.\n   * @param  {*}      object The method, value, or object that should be available via the given name.\n   * @return {undefined}\n   */\n  this.setExtension = function (name, object) {\n    self.extensions[name] = object;\n  };\n\n  /**\n   * Parse a given source string into tokens.\n   *\n   * @param  {string} source  Swig template source.\n   * @param  {SwigOpts} [options={}] Swig options object.\n   * @return {object} parsed  Template tokens object.\n   * @private\n   */\n  this.parse = function (source, options) {\n    validateOptions(options);\n\n    var locals = getLocals(options),\n      opts = {},\n      k;\n\n    for (k in options) {\n      if (options.hasOwnProperty(k) && k !== 'locals') {\n        opts[k] = options[k];\n      }\n    }\n\n    options = utils.extend({}, self.options, opts);\n    options.locals = locals;\n\n    return parser.parse(this, source, options, tags, filters);\n  };\n\n  /**\n   * Parse a given file into tokens.\n   *\n   * @param  {string} pathname  Full path to file to parse.\n   * @param  {SwigOpts} [options={}]   Swig options object.\n   * @return {object} parsed    Template tokens object.\n   * @private\n   */\n  this.parseFile = function (pathname, options) {\n    var src;\n\n    if (!options) {\n      options = {};\n    }\n\n    pathname = self.options.loader.resolve(pathname, options.resolveFrom);\n\n    src = self.options.loader.load(pathname);\n\n    if (!options.filename) {\n      options = utils.extend({ filename: pathname }, options);\n    }\n\n    return self.parse(src, options);\n  };\n\n  /**\n   * Re-Map blocks within a list of tokens to the template's block objects.\n   * @param  {array}  tokens   List of tokens for the parent object.\n   * @param  {object} template Current template that needs to be mapped to the  parent's block and token list.\n   * @return {array}\n   * @private\n   */\n  function remapBlocks(blocks, tokens) {\n    return utils.map(tokens, function (token) {\n      var args = token.args ? token.args.join('') : '';\n      if (token.name === 'block' && blocks[args]) {\n        token = blocks[args];\n      }\n      if (token.content && token.content.length) {\n        token.content = remapBlocks(blocks, token.content);\n      }\n      return token;\n    });\n  }\n\n  /**\n   * Import block-level tags to the token list that are not actual block tags.\n   * @param  {array} blocks List of block-level tags.\n   * @param  {array} tokens List of tokens to render.\n   * @return {undefined}\n   * @private\n   */\n  function importNonBlocks(blocks, tokens) {\n    var temp = [];\n    utils.each(blocks, function (block) { temp.push(block); });\n    utils.each(temp.reverse(), function (block) {\n      if (block.name !== 'block') {\n        tokens.unshift(block);\n      }\n    });\n  }\n\n  /**\n   * Recursively compile and get parents of given parsed token object.\n   *\n   * @param  {object} tokens    Parsed tokens from template.\n   * @param  {SwigOpts} [options={}]   Swig options object.\n   * @return {object}           Parsed tokens from parent templates.\n   * @private\n   */\n  function getParents(tokens, options) {\n    var parentName = tokens.parent,\n      parentFiles = [],\n      parents = [],\n      parentFile,\n      parent,\n      l;\n\n    while (parentName) {\n      if (!options || !options.filename) {\n        throw new Error('Cannot extend \"' + parentName + '\" because current template has no filename.');\n      }\n\n      parentFile = parentFile || options.filename;\n      parentFile = self.options.loader.resolve(parentName, parentFile);\n      parent = cacheGet(parentFile, options) || self.parseFile(parentFile, utils.extend({}, options, { filename: parentFile }));\n      parentName = parent.parent;\n\n      if (parentFiles.indexOf(parentFile) !== -1) {\n        throw new Error('Illegal circular extends of \"' + parentFile + '\".');\n      }\n      parentFiles.push(parentFile);\n\n      parents.push(parent);\n    }\n\n    // Remap each parents'(1) blocks onto its own parent(2), receiving the full token list for rendering the original parent(1) on its own.\n    l = parents.length;\n    for (l = parents.length - 2; l >= 0; l -= 1) {\n      parents[l].tokens = remapBlocks(parents[l].blocks, parents[l + 1].tokens);\n      importNonBlocks(parents[l].blocks, parents[l].tokens);\n    }\n\n    return parents;\n  }\n\n  /**\n   * Pre-compile a source string into a cache-able template function.\n   *\n   * @example\n   * swig.precompile('{{ tacos }}');\n   * // => {\n   * //      tpl: function (_swig, _locals, _filters, _utils, _fn) { ... },\n   * //      tokens: {\n   * //        name: undefined,\n   * //        parent: null,\n   * //        tokens: [...],\n   * //        blocks: {}\n   * //      }\n   * //    }\n   *\n   * In order to render a pre-compiled template, you must have access to filters and utils from Swig. <var>efn</var> is simply an empty function that does nothing.\n   *\n   * @param  {string} source  Swig template source string.\n   * @param  {SwigOpts} [options={}] Swig options object.\n   * @return {object}         Renderable function and tokens object.\n   */\n  this.precompile = function (source, options) {\n    var tokens = self.parse(source, options),\n      parents = getParents(tokens, options),\n      tpl,\n      err;\n\n    if (parents.length) {\n      // Remap the templates first-parent's tokens using this template's blocks.\n      tokens.tokens = remapBlocks(tokens.blocks, parents[0].tokens);\n      importNonBlocks(tokens.blocks, tokens.tokens);\n    }\n\n    try {\n      tpl = new Function('_swig', '_ctx', '_filters', '_utils', '_fn',\n        '  var _ext = _swig.extensions,\\n' +\n        '    _output = \"\";\\n' +\n        parser.compile(tokens, parents, options) + '\\n' +\n        '  return _output;\\n'\n        );\n    } catch (e) {\n      utils.throwError(e, null, options.filename);\n    }\n\n    return { tpl: tpl, tokens: tokens };\n  };\n\n  /**\n   * Compile and render a template string for final output.\n   *\n   * When rendering a source string, a file path should be specified in the options object in order for <var>extends</var>, <var>include</var>, and <var>import</var> to work properly. Do this by adding <code data-language=\"js\">{ filename: '/absolute/path/to/mytpl.html' }</code> to the options argument.\n   *\n   * @example\n   * swig.render('{{ tacos }}', { locals: { tacos: 'Tacos!!!!' }});\n   * // => Tacos!!!!\n   *\n   * @param  {string} source    Swig template source string.\n   * @param  {SwigOpts} [options={}] Swig options object.\n   * @return {string}           Rendered output.\n   */\n  this.render = function (source, options) {\n    return self.compile(source, options)();\n  };\n\n  /**\n   * Compile and render a template file for final output. This is most useful for libraries like Express.js.\n   *\n   * @example\n   * swig.renderFile('./template.html', {}, function (err, output) {\n   *   if (err) {\n   *     throw err;\n   *   }\n   *   console.log(output);\n   * });\n   *\n   * @example\n   * swig.renderFile('./template.html', {});\n   * // => output\n   *\n   * @param  {string}   pathName    File location.\n   * @param  {object}   [locals={}] Template variable context.\n   * @param  {Function} [cb] Asyncronous callback function. If not provided, <var>compileFile</var> will run syncronously.\n   * @return {string}             Rendered output.\n   */\n  this.renderFile = function (pathName, locals, cb) {\n    if (cb) {\n      self.compileFile(pathName, {}, function (err, fn) {\n        var result;\n\n        if (err) {\n          cb(err);\n          return;\n        }\n\n        try {\n          result = fn(locals);\n        } catch (err2) {\n          cb(err2);\n          return;\n        }\n\n        cb(null, result);\n      });\n      return;\n    }\n\n    return self.compileFile(pathName)(locals);\n  };\n\n  /**\n   * Compile string source into a renderable template function.\n   *\n   * @example\n   * var tpl = swig.compile('{{ tacos }}');\n   * // => {\n   * //      [Function: compiled]\n   * //      parent: null,\n   * //      tokens: [{ compile: [Function] }],\n   * //      blocks: {}\n   * //    }\n   * tpl({ tacos: 'Tacos!!!!' });\n   * // => Tacos!!!!\n   *\n   * When compiling a source string, a file path should be specified in the options object in order for <var>extends</var>, <var>include</var>, and <var>import</var> to work properly. Do this by adding <code data-language=\"js\">{ filename: '/absolute/path/to/mytpl.html' }</code> to the options argument.\n   *\n   * @param  {string} source    Swig template source string.\n   * @param  {SwigOpts} [options={}] Swig options object.\n   * @return {function}         Renderable function with keys for parent, blocks, and tokens.\n   */\n  this.compile = function (source, options) {\n    var key = options ? options.filename : null,\n      cached = key ? cacheGet(key, options) : null,\n      context,\n      contextLength,\n      pre;\n\n    if (cached) {\n      return cached;\n    }\n\n    context = getLocals(options);\n    contextLength = utils.keys(context).length;\n    pre = this.precompile(source, options);\n\n    function compiled(locals) {\n      var lcls;\n      if (locals && contextLength) {\n        lcls = utils.extend({}, context, locals);\n      } else if (locals && !contextLength) {\n        lcls = locals;\n      } else if (!locals && contextLength) {\n        lcls = context;\n      } else {\n        lcls = {};\n      }\n      return pre.tpl(self, lcls, filters, utils, efn);\n    }\n\n    utils.extend(compiled, pre.tokens);\n\n    if (key) {\n      cacheSet(key, options, compiled);\n    }\n\n    return compiled;\n  };\n\n  /**\n   * Compile a source file into a renderable template function.\n   *\n   * @example\n   * var tpl = swig.compileFile('./mytpl.html');\n   * // => {\n   * //      [Function: compiled]\n   * //      parent: null,\n   * //      tokens: [{ compile: [Function] }],\n   * //      blocks: {}\n   * //    }\n   * tpl({ tacos: 'Tacos!!!!' });\n   * // => Tacos!!!!\n   *\n   * @example\n   * swig.compileFile('/myfile.txt', { varControls: ['<%=', '=%>'], tagControls: ['<%', '%>']});\n   * // => will compile 'myfile.txt' using the var and tag controls as specified.\n   *\n   * @param  {string} pathname  File location.\n   * @param  {SwigOpts} [options={}] Swig options object.\n   * @param  {Function} [cb] Asyncronous callback function. If not provided, <var>compileFile</var> will run syncronously.\n   * @return {function}         Renderable function with keys for parent, blocks, and tokens.\n   */\n  this.compileFile = function (pathname, options, cb) {\n    var src, cached;\n\n    if (!options) {\n      options = {};\n    }\n\n    pathname = self.options.loader.resolve(pathname, options.resolveFrom);\n    if (!options.filename) {\n      options = utils.extend({ filename: pathname }, options);\n    }\n    cached = cacheGet(pathname, options);\n\n    if (cached) {\n      if (cb) {\n        cb(null, cached);\n        return;\n      }\n      return cached;\n    }\n\n    if (cb) {\n      self.options.loader.load(pathname, function (err, src) {\n        if (err) {\n          cb(err);\n          return;\n        }\n        var compiled;\n\n        try {\n          compiled = self.compile(src, options);\n        } catch (err2) {\n          cb(err2);\n          return;\n        }\n\n        cb(err, compiled);\n      });\n      return;\n    }\n\n    src = self.options.loader.load(pathname);\n    return self.compile(src, options);\n  };\n\n  /**\n   * Run a pre-compiled template function. This is most useful in the browser when you've pre-compiled your templates with the Swig command-line tool.\n   *\n   * @example\n   * $ swig compile ./mytpl.html --wrap-start=\"var mytpl = \" > mytpl.js\n   * @example\n   * <script src=\"mytpl.js\"></script>\n   * <script>\n   *   swig.run(mytpl, {});\n   *   // => \"rendered template...\"\n   * </script>\n   *\n   * @param  {function} tpl       Pre-compiled Swig template function. Use the Swig CLI to compile your templates.\n   * @param  {object} [locals={}] Template variable context.\n   * @param  {string} [filepath]  Filename used for caching the template.\n   * @return {string}             Rendered output.\n   */\n  this.run = function (tpl, locals, filepath) {\n    var context = getLocals({ locals: locals });\n    if (filepath) {\n      cacheSet(filepath, {}, tpl);\n    }\n    return tpl(self, context, filters, utils, efn);\n  };\n};\n\n/*!\n * Export methods publicly\n */\ndefaultInstance = new exports.Swig();\nexports.setFilter = defaultInstance.setFilter;\nexports.setTag = defaultInstance.setTag;\nexports.setExtension = defaultInstance.setExtension;\nexports.parseFile = defaultInstance.parseFile;\nexports.precompile = defaultInstance.precompile;\nexports.compile = defaultInstance.compile;\nexports.compileFile = defaultInstance.compileFile;\nexports.render = defaultInstance.render;\nexports.renderFile = defaultInstance.renderFile;\nexports.run = defaultInstance.run;\nexports.invalidateCache = defaultInstance.invalidateCache;\nexports.loaders = loaders;\n"]},"metadata":{},"sourceType":"script"}
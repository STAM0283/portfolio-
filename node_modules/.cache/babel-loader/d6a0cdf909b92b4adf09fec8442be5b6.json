{"ast":null,"code":"\"use strict\";\n\nvar net = require(\"net\"),\n    crypto = require(\"crypto\"),\n    tlslib = require(\"tls\"); // monkey patch net and tls to support nodejs 0.4\n\n\nif (!net.connect && net.createConnection) {\n  net.connect = net.createConnection;\n}\n\nif (!tlslib.connect && tlslib.createConnection) {\n  tlslib.connect = tlslib.createConnection;\n}\n/**\n * @namespace Mockup module\n * @name mockup\n */\n\n\nmodule.exports = runClientMockup;\n/**\n * <p>Runs a batch of commands against a server</p>\n *\n * <pre>\n * var cmds = [\"EHLO FOOBAR\", \"STARTTLS\", \"QUIT\"];\n * runClientMockup(25, \"mail.hot.ee\", cmds, function(resp){\n *     console.log(\"Final:\", resp.toString(\"utf-8\").trim());\n * });\n * </pre>\n *\n * @memberOf mockup\n * @param {Number} port Port number\n * @param {String} host Hostname to connect to\n * @param {Array} commands Command list to be sent to server\n * @param {Function} callback Callback function to run on completion,\n *        has the last response from the server as a param\n * @param {Boolean} [debug] if set to true log all input/output\n */\n\nfunction runClientMockup(port, host, commands, callback, debug) {\n  host = host || \"localhost\";\n  port = port || 25;\n  commands = Array.isArray(commands) ? commands : [];\n  var command,\n      ignore_data = false,\n      responses = [],\n      sslcontext,\n      pair;\n  var socket = net.connect(port, host);\n  socket.on(\"connect\", function () {\n    socket.on(\"data\", function (chunk) {\n      if (ignore_data) {\n        return;\n      }\n\n      if (debug) {\n        console.log(\"S: \" + chunk.toString(\"utf-8\").trim());\n      }\n\n      if (!commands.length) {\n        socket.end();\n\n        if (typeof callback == \"function\") {\n          responses.push(chunk);\n          callback(chunk, responses);\n        }\n\n        return;\n      } else {\n        responses.push(chunk);\n      }\n\n      if ([\"STARTTLS\", \"STLS\"].indexOf((command || \"\").trim().toUpperCase()) >= 0) {\n        ignore_data = true;\n\n        if (debug) {\n          console.log(\"Initiated TLS connection\");\n        }\n\n        sslcontext = crypto.createCredentials();\n        pair = tlslib.createSecurePair(sslcontext, false);\n        pair.encrypted.pipe(socket);\n        socket.pipe(pair.encrypted);\n        pair.fd = socket.fd;\n        pair.on(\"secure\", function () {\n          if (debug) {\n            console.log(\"TLS connection secured\");\n          }\n\n          command = commands.shift();\n\n          if (debug) {\n            console.log(\"C: \" + command);\n          }\n\n          pair.cleartext.write(command + \"\\r\\n\");\n          pair.cleartext.on(\"data\", function (chunk) {\n            if (debug) {\n              console.log(\"S: \" + chunk.toString(\"utf-8\").trim());\n            }\n\n            if (!commands.length) {\n              pair.cleartext.end();\n\n              if (typeof callback == \"function\") {\n                responses.push(chunk);\n                callback(chunk, responses);\n              }\n\n              return;\n            } else {\n              responses.push(chunk);\n            }\n\n            command = commands.shift();\n            pair.cleartext.write(command + \"\\r\\n\");\n\n            if (debug) {\n              console.log(\"C: \" + command);\n            }\n          });\n        });\n      } else {\n        command = commands.shift();\n        socket.write(command + \"\\r\\n\");\n\n        if (debug) {\n          console.log(\"C: \" + command);\n        }\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/rai/lib/mockup.js"],"names":["net","require","crypto","tlslib","connect","createConnection","module","exports","runClientMockup","port","host","commands","callback","debug","Array","isArray","command","ignore_data","responses","sslcontext","pair","socket","on","chunk","console","log","toString","trim","length","end","push","indexOf","toUpperCase","createCredentials","createSecurePair","encrypted","pipe","fd","shift","cleartext","write"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;AAAA,IACIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CADpB;AAAA,IAEIE,MAAM,GAAGF,OAAO,CAAC,KAAD,CAFpB,C,CAIA;;;AACA,IAAG,CAACD,GAAG,CAACI,OAAL,IAAgBJ,GAAG,CAACK,gBAAvB,EAAwC;AACpCL,EAAAA,GAAG,CAACI,OAAJ,GAAcJ,GAAG,CAACK,gBAAlB;AACH;;AAED,IAAG,CAACF,MAAM,CAACC,OAAR,IAAmBD,MAAM,CAACE,gBAA7B,EAA8C;AAC1CF,EAAAA,MAAM,CAACC,OAAP,GAAiBD,MAAM,CAACE,gBAAxB;AACH;AAED;;;;;;AAIAC,MAAM,CAACC,OAAP,GAAiBC,eAAjB;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,SAASA,eAAT,CAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,QAArC,EAA+CC,QAA/C,EAAyDC,KAAzD,EAA+D;AAC3DH,EAAAA,IAAI,GAAGA,IAAI,IAAI,WAAf;AACAD,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACAE,EAAAA,QAAQ,GAAGG,KAAK,CAACC,OAAN,CAAcJ,QAAd,IAA0BA,QAA1B,GAAqC,EAAhD;AAEA,MAAIK,OAAJ;AAAA,MAAaC,WAAW,GAAG,KAA3B;AAAA,MAAkCC,SAAS,GAAG,EAA9C;AAAA,MAAkDC,UAAlD;AAAA,MAA8DC,IAA9D;AAEA,MAAIC,MAAM,GAAGrB,GAAG,CAACI,OAAJ,CAAYK,IAAZ,EAAkBC,IAAlB,CAAb;AACAW,EAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqB,YAAU;AAC3BD,IAAAA,MAAM,CAACC,EAAP,CAAU,MAAV,EAAkB,UAASC,KAAT,EAAe;AAC7B,UAAGN,WAAH,EAAe;AACX;AACH;;AAED,UAAGJ,KAAH,EAAS;AACLW,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAMF,KAAK,CAACG,QAAN,CAAe,OAAf,EAAwBC,IAAxB,EAAlB;AACH;;AAED,UAAG,CAAChB,QAAQ,CAACiB,MAAb,EAAoB;AAChBP,QAAAA,MAAM,CAACQ,GAAP;;AACA,YAAG,OAAOjB,QAAP,IAAmB,UAAtB,EAAiC;AAC7BM,UAAAA,SAAS,CAACY,IAAV,CAAeP,KAAf;AACAX,UAAAA,QAAQ,CAACW,KAAD,EAAQL,SAAR,CAAR;AACH;;AACD;AACH,OAPD,MAOK;AACDA,QAAAA,SAAS,CAACY,IAAV,CAAeP,KAAf;AACH;;AAED,UAAG,CAAC,UAAD,EAAa,MAAb,EAAqBQ,OAArB,CAA6B,CAACf,OAAO,IAAI,EAAZ,EAAgBW,IAAhB,GAAuBK,WAAvB,EAA7B,KAAoE,CAAvE,EAAyE;AACrEf,QAAAA,WAAW,GAAG,IAAd;;AACA,YAAGJ,KAAH,EAAS;AACLW,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH;;AACDN,QAAAA,UAAU,GAAGjB,MAAM,CAAC+B,iBAAP,EAAb;AACAb,QAAAA,IAAI,GAAGjB,MAAM,CAAC+B,gBAAP,CAAwBf,UAAxB,EAAoC,KAApC,CAAP;AAEAC,QAAAA,IAAI,CAACe,SAAL,CAAeC,IAAf,CAAoBf,MAApB;AACAA,QAAAA,MAAM,CAACe,IAAP,CAAYhB,IAAI,CAACe,SAAjB;AACAf,QAAAA,IAAI,CAACiB,EAAL,GAAUhB,MAAM,CAACgB,EAAjB;AAEAjB,QAAAA,IAAI,CAACE,EAAL,CAAQ,QAAR,EAAkB,YAAU;AACxB,cAAGT,KAAH,EAAS;AACLW,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH;;AACDT,UAAAA,OAAO,GAAGL,QAAQ,CAAC2B,KAAT,EAAV;;AACA,cAAGzB,KAAH,EAAS;AACLW,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAMT,OAAlB;AACH;;AACDI,UAAAA,IAAI,CAACmB,SAAL,CAAeC,KAAf,CAAqBxB,OAAO,GAAC,MAA7B;AAEAI,UAAAA,IAAI,CAACmB,SAAL,CAAejB,EAAf,CAAkB,MAAlB,EAA0B,UAASC,KAAT,EAAe;AACrC,gBAAGV,KAAH,EAAS;AACLW,cAAAA,OAAO,CAACC,GAAR,CAAY,QAAMF,KAAK,CAACG,QAAN,CAAe,OAAf,EAAwBC,IAAxB,EAAlB;AACH;;AAED,gBAAG,CAAChB,QAAQ,CAACiB,MAAb,EAAoB;AAChBR,cAAAA,IAAI,CAACmB,SAAL,CAAeV,GAAf;;AACA,kBAAG,OAAOjB,QAAP,IAAmB,UAAtB,EAAiC;AAC7BM,gBAAAA,SAAS,CAACY,IAAV,CAAeP,KAAf;AACAX,gBAAAA,QAAQ,CAACW,KAAD,EAAQL,SAAR,CAAR;AACH;;AACD;AACH,aAPD,MAOK;AACDA,cAAAA,SAAS,CAACY,IAAV,CAAeP,KAAf;AACH;;AACDP,YAAAA,OAAO,GAAGL,QAAQ,CAAC2B,KAAT,EAAV;AACAlB,YAAAA,IAAI,CAACmB,SAAL,CAAeC,KAAf,CAAqBxB,OAAO,GAAC,MAA7B;;AACA,gBAAGH,KAAH,EAAS;AACLW,cAAAA,OAAO,CAACC,GAAR,CAAY,QAAMT,OAAlB;AACH;AACJ,WApBD;AAqBH,SA/BD;AAgCH,OA5CD,MA4CK;AACDA,QAAAA,OAAO,GAAGL,QAAQ,CAAC2B,KAAT,EAAV;AACAjB,QAAAA,MAAM,CAACmB,KAAP,CAAaxB,OAAO,GAAC,MAArB;;AACA,YAAGH,KAAH,EAAS;AACLW,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAMT,OAAlB;AACH;AACJ;AACJ,KAvED;AAwEH,GAzED;AA2EH","sourcesContent":["\"use strict\";\n\nvar net = require(\"net\"),\n    crypto = require(\"crypto\"),\n    tlslib = require(\"tls\");\n\n// monkey patch net and tls to support nodejs 0.4\nif(!net.connect && net.createConnection){\n    net.connect = net.createConnection;\n}\n\nif(!tlslib.connect && tlslib.createConnection){\n    tlslib.connect = tlslib.createConnection;\n}\n\n/**\n * @namespace Mockup module\n * @name mockup\n */\nmodule.exports = runClientMockup;\n\n/**\n * <p>Runs a batch of commands against a server</p>\n *\n * <pre>\n * var cmds = [\"EHLO FOOBAR\", \"STARTTLS\", \"QUIT\"];\n * runClientMockup(25, \"mail.hot.ee\", cmds, function(resp){\n *     console.log(\"Final:\", resp.toString(\"utf-8\").trim());\n * });\n * </pre>\n *\n * @memberOf mockup\n * @param {Number} port Port number\n * @param {String} host Hostname to connect to\n * @param {Array} commands Command list to be sent to server\n * @param {Function} callback Callback function to run on completion,\n *        has the last response from the server as a param\n * @param {Boolean} [debug] if set to true log all input/output\n */\nfunction runClientMockup(port, host, commands, callback, debug){\n    host = host || \"localhost\";\n    port = port || 25;\n    commands = Array.isArray(commands) ? commands : [];\n\n    var command, ignore_data = false, responses = [], sslcontext, pair;\n\n    var socket = net.connect(port, host);\n    socket.on(\"connect\", function(){\n        socket.on(\"data\", function(chunk){\n            if(ignore_data){\n                return;\n            }\n\n            if(debug){\n                console.log(\"S: \"+chunk.toString(\"utf-8\").trim());\n            }\n\n            if(!commands.length){\n                socket.end();\n                if(typeof callback == \"function\"){\n                    responses.push(chunk);\n                    callback(chunk, responses);\n                }\n                return;\n            }else{\n                responses.push(chunk);\n            }\n\n            if([\"STARTTLS\", \"STLS\"].indexOf((command || \"\").trim().toUpperCase())>=0){\n                ignore_data = true;\n                if(debug){\n                    console.log(\"Initiated TLS connection\");\n                }\n                sslcontext = crypto.createCredentials();\n                pair = tlslib.createSecurePair(sslcontext, false);\n\n                pair.encrypted.pipe(socket);\n                socket.pipe(pair.encrypted);\n                pair.fd = socket.fd;\n\n                pair.on(\"secure\", function(){\n                    if(debug){\n                        console.log(\"TLS connection secured\");\n                    }\n                    command = commands.shift();\n                    if(debug){\n                        console.log(\"C: \"+command);\n                    }\n                    pair.cleartext.write(command+\"\\r\\n\");\n\n                    pair.cleartext.on(\"data\", function(chunk){\n                        if(debug){\n                            console.log(\"S: \"+chunk.toString(\"utf-8\").trim());\n                        }\n\n                        if(!commands.length){\n                            pair.cleartext.end();\n                            if(typeof callback == \"function\"){\n                                responses.push(chunk);\n                                callback(chunk, responses);\n                            }\n                            return;\n                        }else{\n                            responses.push(chunk);\n                        }\n                        command = commands.shift();\n                        pair.cleartext.write(command+\"\\r\\n\");\n                        if(debug){\n                            console.log(\"C: \"+command);\n                        }\n                    });\n                });\n            }else{\n                command = commands.shift();\n                socket.write(command+\"\\r\\n\");\n                if(debug){\n                    console.log(\"C: \"+command);\n                }\n            }\n        });\n    });\n\n}\n"]},"metadata":{},"sourceType":"script"}
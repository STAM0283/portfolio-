{"ast":null,"code":"var AWS = require('../core');\n/**\n * Represents credentials retrieved from STS SAML support.\n *\n * By default this provider gets credentials using the\n * {AWS.STS.assumeRoleWithSAML} service operation. This operation\n * requires a `RoleArn` containing the ARN of the IAM trust policy for the\n * application for which credentials will be given, as well as a `PrincipalArn`\n * representing the ARN for the SAML identity provider. In addition, the\n * `SAMLAssertion` must be set to the token provided by the identity\n * provider. See {constructor} for an example on creating a credentials\n * object with proper `RoleArn`, `PrincipalArn`, and `SAMLAssertion` values.\n *\n * ## Refreshing Credentials from Identity Service\n *\n * In addition to AWS credentials expiring after a given amount of time, the\n * login token from the identity provider will also expire. Once this token\n * expires, it will not be usable to refresh AWS credentials, and another\n * token will be needed. The SDK does not manage refreshing of the token value,\n * but this can be done through a \"refresh token\" supported by most identity\n * providers. Consult the documentation for the identity provider for refreshing\n * tokens. Once the refreshed token is acquired, you should make sure to update\n * this new token in the credentials object's {params} property. The following\n * code will update the SAMLAssertion, assuming you have retrieved an updated\n * token from the identity provider:\n *\n * ```javascript\n * AWS.config.credentials.params.SAMLAssertion = updatedToken;\n * ```\n *\n * Future calls to `credentials.refresh()` will now use the new token.\n *\n * @!attribute params\n *   @return [map] the map of params passed to\n *     {AWS.STS.assumeRoleWithSAML}. To update the token, set the\n *     `params.SAMLAssertion` property.\n */\n\n\nAWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new credentials object.\n   * @param (see AWS.STS.assumeRoleWithSAML)\n   * @example Creating a new credentials object\n   *   AWS.config.credentials = new AWS.SAMLCredentials({\n   *     RoleArn: 'arn:aws:iam::1234567890:role/SAMLRole',\n   *     PrincipalArn: 'arn:aws:iam::1234567890:role/SAMLPrincipal',\n   *     SAMLAssertion: 'base64-token', // base64-encoded token from IdP\n   *   });\n   * @see AWS.STS.assumeRoleWithSAML\n   */\n  constructor: function SAMLCredentials(params) {\n    AWS.Credentials.call(this);\n    this.expired = true;\n    this.service = new AWS.STS();\n    this.params = params;\n  },\n\n  /**\n   * Refreshes credentials using {AWS.STS.assumeRoleWithSAML}\n   *\n   * @callback callback function(err)\n   *   Called when the STS service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    var self = this;\n    if (!callback) callback = function (err) {\n      if (err) throw err;\n    };\n    self.service.assumeRoleWithSAML(self.params, function (err, data) {\n      if (!err) {\n        self.service.credentialsFrom(data, self);\n      }\n\n      callback(err);\n    });\n  }\n});","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/credentials/saml_credentials.js"],"names":["AWS","require","SAMLCredentials","util","inherit","Credentials","constructor","params","call","expired","service","STS","refresh","callback","self","err","assumeRoleWithSAML","data","credentialsFrom"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCAD,GAAG,CAACE,eAAJ,GAAsBF,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBJ,GAAG,CAACK,WAArB,EAAkC;AACtD;;;;;;;;;;;AAWAC,EAAAA,WAAW,EAAE,SAASJ,eAAT,CAAyBK,MAAzB,EAAiC;AAC5CP,IAAAA,GAAG,CAACK,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,OAAL,GAAe,IAAIV,GAAG,CAACW,GAAR,EAAf;AACA,SAAKJ,MAAL,GAAcA,MAAd;AACD,GAjBqD;;AAmBtD;;;;;;;;;;;AAWAK,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,QAAIC,IAAI,GAAG,IAAX;AACA,QAAI,CAACD,QAAL,EAAeA,QAAQ,GAAG,UAASE,GAAT,EAAc;AAAE,UAAIA,GAAJ,EAAS,MAAMA,GAAN;AAAY,KAAhD;AAEfD,IAAAA,IAAI,CAACJ,OAAL,CAAaM,kBAAb,CAAgCF,IAAI,CAACP,MAArC,EAA6C,UAAUQ,GAAV,EAAeE,IAAf,EAAqB;AAChE,UAAI,CAACF,GAAL,EAAU;AACRD,QAAAA,IAAI,CAACJ,OAAL,CAAaQ,eAAb,CAA6BD,IAA7B,EAAmCH,IAAnC;AACD;;AACDD,MAAAA,QAAQ,CAACE,GAAD,CAAR;AACD,KALD;AAMD;AAxCqD,CAAlC,CAAtB","sourcesContent":["var AWS = require('../core');\n\n/**\n * Represents credentials retrieved from STS SAML support.\n *\n * By default this provider gets credentials using the\n * {AWS.STS.assumeRoleWithSAML} service operation. This operation\n * requires a `RoleArn` containing the ARN of the IAM trust policy for the\n * application for which credentials will be given, as well as a `PrincipalArn`\n * representing the ARN for the SAML identity provider. In addition, the\n * `SAMLAssertion` must be set to the token provided by the identity\n * provider. See {constructor} for an example on creating a credentials\n * object with proper `RoleArn`, `PrincipalArn`, and `SAMLAssertion` values.\n *\n * ## Refreshing Credentials from Identity Service\n *\n * In addition to AWS credentials expiring after a given amount of time, the\n * login token from the identity provider will also expire. Once this token\n * expires, it will not be usable to refresh AWS credentials, and another\n * token will be needed. The SDK does not manage refreshing of the token value,\n * but this can be done through a \"refresh token\" supported by most identity\n * providers. Consult the documentation for the identity provider for refreshing\n * tokens. Once the refreshed token is acquired, you should make sure to update\n * this new token in the credentials object's {params} property. The following\n * code will update the SAMLAssertion, assuming you have retrieved an updated\n * token from the identity provider:\n *\n * ```javascript\n * AWS.config.credentials.params.SAMLAssertion = updatedToken;\n * ```\n *\n * Future calls to `credentials.refresh()` will now use the new token.\n *\n * @!attribute params\n *   @return [map] the map of params passed to\n *     {AWS.STS.assumeRoleWithSAML}. To update the token, set the\n *     `params.SAMLAssertion` property.\n */\nAWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new credentials object.\n   * @param (see AWS.STS.assumeRoleWithSAML)\n   * @example Creating a new credentials object\n   *   AWS.config.credentials = new AWS.SAMLCredentials({\n   *     RoleArn: 'arn:aws:iam::1234567890:role/SAMLRole',\n   *     PrincipalArn: 'arn:aws:iam::1234567890:role/SAMLPrincipal',\n   *     SAMLAssertion: 'base64-token', // base64-encoded token from IdP\n   *   });\n   * @see AWS.STS.assumeRoleWithSAML\n   */\n  constructor: function SAMLCredentials(params) {\n    AWS.Credentials.call(this);\n    this.expired = true;\n    this.service = new AWS.STS();\n    this.params = params;\n  },\n\n  /**\n   * Refreshes credentials using {AWS.STS.assumeRoleWithSAML}\n   *\n   * @callback callback function(err)\n   *   Called when the STS service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    var self = this;\n    if (!callback) callback = function(err) { if (err) throw err; };\n\n    self.service.assumeRoleWithSAML(self.params, function (err, data) {\n      if (!err) {\n        self.service.credentialsFrom(data, self);\n      }\n      callback(err);\n    });\n  }\n});\n"]},"metadata":{},"sourceType":"script"}
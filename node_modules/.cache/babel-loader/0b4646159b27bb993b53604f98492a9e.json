{"ast":null,"code":"var AWS = require('../core');\n\nvar util = require('../util');\n\nvar Rest = require('./rest');\n\nfunction populateBody(req) {\n  var input = req.service.api.operations[req.operation].input;\n  var builder = new AWS.XML.Builder();\n  var params = req.params;\n  var payload = input.payload;\n\n  if (payload) {\n    var payloadMember = input.members[payload];\n    params = params[payload];\n    if (params === undefined) return;\n\n    if (payloadMember.type === 'structure') {\n      var rootElement = payloadMember.name;\n      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement);\n    } else {\n      // non-xml payload\n      req.httpRequest.body = params;\n    }\n  } else {\n    req.httpRequest.body = builder.toXML(params, input, input.shape || util.string.upperFirst(req.operation) + 'Request');\n  }\n}\n\nfunction buildRequest(req) {\n  Rest.buildRequest(req);\n  populateBody(req);\n}\n\nfunction extractError(resp) {\n  Rest.extractError(resp);\n  var data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());\n  if (data.Errors) data = data.Errors;\n  if (data.Error) data = data.Error;\n\n  if (data.Code) {\n    resp.error = util.error(new Error(), {\n      code: data.Code,\n      message: data.Message\n    });\n  } else {\n    resp.error = util.error(new Error(), {\n      code: resp.httpResponse.statusCode,\n      message: null\n    });\n  }\n}\n\nfunction extractData(resp) {\n  Rest.extractData(resp);\n  var parser;\n  var req = resp.request;\n  var body = resp.httpResponse.body;\n  var operation = req.service.api.operations[req.operation];\n  var output = operation.output;\n  var payload = output.payload;\n\n  if (payload) {\n    var payloadMember = output.members[payload];\n\n    if (payloadMember.isStreaming) {\n      resp.data[payload] = body;\n    } else if (payloadMember.type === 'structure') {\n      parser = new AWS.XML.Parser();\n      util.update(resp.data, parser.parse(body.toString(), payloadMember));\n    } else {\n      resp.data[payload] = body.toString();\n    }\n  } else if (body.length > 0) {\n    parser = new AWS.XML.Parser();\n    var data = parser.parse(body.toString(), output);\n    util.update(resp.data, data);\n  }\n}\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/protocol/rest_xml.js"],"names":["AWS","require","util","Rest","populateBody","req","input","service","api","operations","operation","builder","XML","Builder","params","payload","payloadMember","members","undefined","type","rootElement","name","httpRequest","body","toXML","shape","string","upperFirst","buildRequest","extractError","resp","data","Parser","parse","httpResponse","toString","Errors","Error","Code","error","code","message","Message","statusCode","extractData","parser","request","output","isStreaming","update","length","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('../core');\nvar util = require('../util');\nvar Rest = require('./rest');\n\nfunction populateBody(req) {\n  var input = req.service.api.operations[req.operation].input;\n  var builder = new AWS.XML.Builder();\n  var params = req.params;\n\n  var payload = input.payload;\n  if (payload) {\n    var payloadMember = input.members[payload];\n    params = params[payload];\n    if (params === undefined) return;\n\n    if (payloadMember.type === 'structure') {\n      var rootElement = payloadMember.name;\n      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement);\n    } else { // non-xml payload\n      req.httpRequest.body = params;\n    }\n  } else {\n    req.httpRequest.body = builder.toXML(params, input, input.shape ||\n      util.string.upperFirst(req.operation) + 'Request');\n  }\n}\n\nfunction buildRequest(req) {\n  Rest.buildRequest(req);\n  populateBody(req);\n}\n\nfunction extractError(resp) {\n  Rest.extractError(resp);\n\n  var data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());\n  if (data.Errors) data = data.Errors;\n  if (data.Error) data = data.Error;\n  if (data.Code) {\n    resp.error = util.error(new Error(), {\n      code: data.Code,\n      message: data.Message\n    });\n  } else {\n    resp.error = util.error(new Error(), {\n      code: resp.httpResponse.statusCode,\n      message: null\n    });\n  }\n}\n\nfunction extractData(resp) {\n  Rest.extractData(resp);\n\n  var parser;\n  var req = resp.request;\n  var body = resp.httpResponse.body;\n  var operation = req.service.api.operations[req.operation];\n  var output = operation.output;\n\n  var payload = output.payload;\n  if (payload) {\n    var payloadMember = output.members[payload];\n    if (payloadMember.isStreaming) {\n      resp.data[payload] = body;\n    } else if (payloadMember.type === 'structure') {\n      parser = new AWS.XML.Parser();\n      util.update(resp.data, parser.parse(body.toString(), payloadMember));\n    } else {\n      resp.data[payload] = body.toString();\n    }\n  } else if (body.length > 0) {\n    parser = new AWS.XML.Parser();\n    var data = parser.parse(body.toString(), output);\n    util.update(resp.data, data);\n  }\n}\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar fs = require(\"fs\"),\n    path = require(\"path\"); // Expose to the world\n\n\nmodule.exports = PickupTransport;\n/**\n * <p>Generates a Transport object which stores mails in a pickup directory</p>\n *\n * <p>Possible options can be the following:</p>\n *\n * <ul>\n *     <li><b>directory</b> - The directory where applications save e-mail for later processing by the SMTP server.</li>\n * </ul>\n *\n * @constructor\n * @param {Object} [options] Pickup directory options\n */\n\nfunction PickupTransport(options) {\n  if (typeof options == \"string\") {\n    options = {\n      directory: options\n    };\n  }\n\n  this.options = options || {}; // Check if target directory has been set.\n\n  if (typeof this.options.directory === \"undefined\") {\n    throw new Error('directory is not set.');\n  } // Check if the target directory exists.\n\n\n  fs.exists(this.options.directory, function (exists) {\n    if (!exists) {\n      throw new Error('directory does not exists.');\n    }\n  });\n}\n/**\n * <p>Generates a raw e-mail source and stores it in the pickup directory</p>\n *\n * @param {Object} emailMessage MailComposer object\n * @param {Function} callback Callback function to run when the e-mail is composed\n */\n\n\nPickupTransport.prototype.sendMail = function (emailMessage, callback) {\n  var directory = this.options.directory,\n      callbackSent = false,\n      target = path.join(directory, emailMessage._messageId + \".eml\"),\n      targetStream = fs.createWriteStream(target);\n\n  callback = callback || function () {};\n\n  emailMessage.options.keepBcc = true;\n  emailMessage.on(\"error\", function (err) {\n    if (callbackSent) {\n      return;\n    }\n\n    callbackSent = true;\n    callback(err);\n  });\n  targetStream.on(\"error\", function (err) {\n    if (callbackSent) {\n      return;\n    }\n\n    callbackSent = true;\n    callback(err);\n  });\n  emailMessage.on(\"end\", function () {\n    if (callbackSent) {\n      return;\n    }\n\n    callbackSent = true;\n    callback(null, {\n      envelope: emailMessage.getEnvelope(),\n      messageId: emailMessage._messageId,\n      path: target\n    });\n  });\n  emailMessage.pipe(targetStream);\n  emailMessage.streamMessage();\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/express-mailer/node_modules/nodemailer/lib/engines/pickup.js"],"names":["fs","require","path","module","exports","PickupTransport","options","directory","Error","exists","prototype","sendMail","emailMessage","callback","callbackSent","target","join","_messageId","targetStream","createWriteStream","keepBcc","on","err","envelope","getEnvelope","messageId","pipe","streamMessage"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;AAAA,IACIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CADlB,C,CAGA;;;AACAE,MAAM,CAACC,OAAP,GAAiBC,eAAjB;AAEA;;;;;;;;;;;;;AAYA,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AAE9B,MAAG,OAAOA,OAAP,IAAkB,QAArB,EAA8B;AAC1BA,IAAAA,OAAO,GAAG;AACNC,MAAAA,SAAS,EAAED;AADL,KAAV;AAGH;;AAED,OAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B,CAR8B,CAU9B;;AACA,MAAI,OAAO,KAAKA,OAAL,CAAaC,SAApB,KAAkC,WAAtC,EAAmD;AAC/C,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACH,GAb6B,CAe9B;;;AACAR,EAAAA,EAAE,CAACS,MAAH,CAAU,KAAKH,OAAL,CAAaC,SAAvB,EAAkC,UAASE,MAAT,EAAiB;AAC/C,QAAI,CAACA,MAAL,EAAa;AACT,YAAM,IAAID,KAAJ,CAAU,4BAAV,CAAN;AACH;AACJ,GAJD;AAKH;AAED;;;;;;;;AAMAH,eAAe,CAACK,SAAhB,CAA0BC,QAA1B,GAAqC,UAASC,YAAT,EAAuBC,QAAvB,EAAiC;AAElE,MAAIN,SAAS,GAAG,KAAKD,OAAL,CAAaC,SAA7B;AAAA,MACIO,YAAY,GAAG,KADnB;AAAA,MAEIC,MAAM,GAAGb,IAAI,CAACc,IAAL,CACDT,SADC,EAEDK,YAAY,CAACK,UAAb,GAA0B,MAFzB,CAFb;AAAA,MAKIC,YAAY,GAAGlB,EAAE,CAACmB,iBAAH,CAAqBJ,MAArB,CALnB;;AAOAF,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,YAAU,CAAE,CAAnC;;AAEAD,EAAAA,YAAY,CAACN,OAAb,CAAqBc,OAArB,GAA+B,IAA/B;AAEAR,EAAAA,YAAY,CAACS,EAAb,CAAgB,OAAhB,EAAyB,UAASC,GAAT,EAAa;AAClC,QAAGR,YAAH,EAAgB;AACZ;AACH;;AACDA,IAAAA,YAAY,GAAG,IAAf;AACAD,IAAAA,QAAQ,CAACS,GAAD,CAAR;AACH,GAND;AAQAJ,EAAAA,YAAY,CAACG,EAAb,CAAgB,OAAhB,EAAyB,UAASC,GAAT,EAAa;AAClC,QAAGR,YAAH,EAAgB;AACZ;AACH;;AACDA,IAAAA,YAAY,GAAG,IAAf;AACAD,IAAAA,QAAQ,CAACS,GAAD,CAAR;AACH,GAND;AAQAV,EAAAA,YAAY,CAACS,EAAb,CAAgB,KAAhB,EAAuB,YAAU;AAC7B,QAAGP,YAAH,EAAgB;AACZ;AACH;;AACDA,IAAAA,YAAY,GAAG,IAAf;AAEAD,IAAAA,QAAQ,CAAC,IAAD,EAAO;AACXU,MAAAA,QAAQ,EAAEX,YAAY,CAACY,WAAb,EADC;AAEXC,MAAAA,SAAS,EAAEb,YAAY,CAACK,UAFb;AAGXf,MAAAA,IAAI,EAAEa;AAHK,KAAP,CAAR;AAKH,GAXD;AAaAH,EAAAA,YAAY,CAACc,IAAb,CAAkBR,YAAlB;AACAN,EAAAA,YAAY,CAACe,aAAb;AACH,CA5CD","sourcesContent":["\"use strict\";\n\nvar fs = require(\"fs\"),\n    path = require(\"path\");\n\n// Expose to the world\nmodule.exports = PickupTransport;\n\n/**\n * <p>Generates a Transport object which stores mails in a pickup directory</p>\n *\n * <p>Possible options can be the following:</p>\n *\n * <ul>\n *     <li><b>directory</b> - The directory where applications save e-mail for later processing by the SMTP server.</li>\n * </ul>\n *\n * @constructor\n * @param {Object} [options] Pickup directory options\n */\nfunction PickupTransport(options) {\n\n    if(typeof options == \"string\"){\n        options = {\n            directory: options\n        };\n    }\n\n    this.options = options || {};\n\n    // Check if target directory has been set.\n    if (typeof this.options.directory === \"undefined\") {\n        throw new Error('directory is not set.');\n    }\n\n    // Check if the target directory exists.\n    fs.exists(this.options.directory, function(exists) {\n        if (!exists) {\n            throw new Error('directory does not exists.');\n        }\n    });\n}\n\n/**\n * <p>Generates a raw e-mail source and stores it in the pickup directory</p>\n *\n * @param {Object} emailMessage MailComposer object\n * @param {Function} callback Callback function to run when the e-mail is composed\n */\nPickupTransport.prototype.sendMail = function(emailMessage, callback) {\n\n    var directory = this.options.directory,\n        callbackSent = false,\n        target = path.join(\n                directory,\n                emailMessage._messageId + \".eml\"),\n        targetStream = fs.createWriteStream(target);\n\n    callback = callback || function(){};\n\n    emailMessage.options.keepBcc = true;\n\n    emailMessage.on(\"error\", function(err){\n        if(callbackSent){\n            return;\n        }\n        callbackSent = true;\n        callback(err);\n    });\n\n    targetStream.on(\"error\", function(err){\n        if(callbackSent){\n            return;\n        }\n        callbackSent = true;\n        callback(err);\n    });\n\n    emailMessage.on(\"end\", function(){\n        if(callbackSent){\n            return;\n        }\n        callbackSent = true;\n\n        callback(null, {\n            envelope: emailMessage.getEnvelope(),\n            messageId: emailMessage._messageId,\n            path: target\n        });\n    });\n\n    emailMessage.pipe(targetStream);\n    emailMessage.streamMessage();\n};\n"]},"metadata":{},"sourceType":"script"}
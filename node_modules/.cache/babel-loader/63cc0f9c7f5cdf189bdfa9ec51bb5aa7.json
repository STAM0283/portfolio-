{"ast":null,"code":"var util = require('../util');\n\nfunction JsonParser() {}\n\nJsonParser.prototype.parse = function (value, shape) {\n  return translate(JSON.parse(value), shape);\n};\n\nfunction translate(value, shape) {\n  if (!shape || value === undefined || value === null) return undefined;\n\n  switch (shape.type) {\n    case 'structure':\n      return translateStructure(value, shape);\n\n    case 'map':\n      return translateMap(value, shape);\n\n    case 'list':\n      return translateList(value, shape);\n\n    default:\n      return translateScalar(value, shape);\n  }\n}\n\nfunction translateStructure(structure, shape) {\n  var struct = {};\n  util.each(structure, function (name, value) {\n    var memberShape = shape.members[name];\n\n    if (memberShape) {\n      var result = translate(value, memberShape);\n      if (result !== undefined) struct[name] = result;\n    }\n  });\n  return struct;\n}\n\nfunction translateList(list, shape) {\n  var out = [];\n  util.arrayEach(list, function (value) {\n    var result = translate(value, shape.member);\n    if (result !== undefined) out.push(result);\n  });\n  return out;\n}\n\nfunction translateMap(map, shape) {\n  var out = {};\n  util.each(map, function (key, value) {\n    var result = translate(value, shape.value);\n    if (result !== undefined) out[key] = result;\n  });\n  return out;\n}\n\nfunction translateScalar(value, shape) {\n  return shape.toType(value);\n}\n\nmodule.exports = JsonParser;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/json/parser.js"],"names":["util","require","JsonParser","prototype","parse","value","shape","translate","JSON","undefined","type","translateStructure","translateMap","translateList","translateScalar","structure","struct","each","name","memberShape","members","result","list","out","arrayEach","member","push","map","key","toType","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAlB;;AAEA,SAASC,UAAT,GAAsB,CAAG;;AAEzBA,UAAU,CAACC,SAAX,CAAqBC,KAArB,GAA6B,UAASC,KAAT,EAAgBC,KAAhB,EAAuB;AAClD,SAAOC,SAAS,CAACC,IAAI,CAACJ,KAAL,CAAWC,KAAX,CAAD,EAAoBC,KAApB,CAAhB;AACD,CAFD;;AAIA,SAASC,SAAT,CAAmBF,KAAnB,EAA0BC,KAA1B,EAAiC;AAC/B,MAAI,CAACA,KAAD,IAAUD,KAAK,KAAKI,SAApB,IAAiCJ,KAAK,KAAK,IAA/C,EAAqD,OAAOI,SAAP;;AAErD,UAAQH,KAAK,CAACI,IAAd;AACE,SAAK,WAAL;AAAkB,aAAOC,kBAAkB,CAACN,KAAD,EAAQC,KAAR,CAAzB;;AAClB,SAAK,KAAL;AAAY,aAAOM,YAAY,CAACP,KAAD,EAAQC,KAAR,CAAnB;;AACZ,SAAK,MAAL;AAAa,aAAOO,aAAa,CAACR,KAAD,EAAQC,KAAR,CAApB;;AACb;AAAS,aAAOQ,eAAe,CAACT,KAAD,EAAQC,KAAR,CAAtB;AAJX;AAMD;;AAED,SAASK,kBAAT,CAA4BI,SAA5B,EAAuCT,KAAvC,EAA8C;AAC5C,MAAIU,MAAM,GAAG,EAAb;AACAhB,EAAAA,IAAI,CAACiB,IAAL,CAAUF,SAAV,EAAqB,UAASG,IAAT,EAAeb,KAAf,EAAsB;AACzC,QAAIc,WAAW,GAAGb,KAAK,CAACc,OAAN,CAAcF,IAAd,CAAlB;;AACA,QAAIC,WAAJ,EAAiB;AACf,UAAIE,MAAM,GAAGd,SAAS,CAACF,KAAD,EAAQc,WAAR,CAAtB;AACA,UAAIE,MAAM,KAAKZ,SAAf,EAA0BO,MAAM,CAACE,IAAD,CAAN,GAAeG,MAAf;AAC3B;AACF,GAND;AAOA,SAAOL,MAAP;AACD;;AAED,SAASH,aAAT,CAAuBS,IAAvB,EAA6BhB,KAA7B,EAAoC;AAClC,MAAIiB,GAAG,GAAG,EAAV;AACAvB,EAAAA,IAAI,CAACwB,SAAL,CAAeF,IAAf,EAAqB,UAASjB,KAAT,EAAgB;AACnC,QAAIgB,MAAM,GAAGd,SAAS,CAACF,KAAD,EAAQC,KAAK,CAACmB,MAAd,CAAtB;AACA,QAAIJ,MAAM,KAAKZ,SAAf,EAA0Bc,GAAG,CAACG,IAAJ,CAASL,MAAT;AAC3B,GAHD;AAIA,SAAOE,GAAP;AACD;;AAED,SAASX,YAAT,CAAsBe,GAAtB,EAA2BrB,KAA3B,EAAkC;AAChC,MAAIiB,GAAG,GAAG,EAAV;AACAvB,EAAAA,IAAI,CAACiB,IAAL,CAAUU,GAAV,EAAe,UAASC,GAAT,EAAcvB,KAAd,EAAqB;AAClC,QAAIgB,MAAM,GAAGd,SAAS,CAACF,KAAD,EAAQC,KAAK,CAACD,KAAd,CAAtB;AACA,QAAIgB,MAAM,KAAKZ,SAAf,EAA0Bc,GAAG,CAACK,GAAD,CAAH,GAAWP,MAAX;AAC3B,GAHD;AAIA,SAAOE,GAAP;AACD;;AAED,SAAST,eAAT,CAAyBT,KAAzB,EAAgCC,KAAhC,EAAuC;AACrC,SAAOA,KAAK,CAACuB,MAAN,CAAaxB,KAAb,CAAP;AACD;;AAEDyB,MAAM,CAACC,OAAP,GAAiB7B,UAAjB","sourcesContent":["var util = require('../util');\n\nfunction JsonParser() { }\n\nJsonParser.prototype.parse = function(value, shape) {\n  return translate(JSON.parse(value), shape);\n};\n\nfunction translate(value, shape) {\n  if (!shape || value === undefined || value === null) return undefined;\n\n  switch (shape.type) {\n    case 'structure': return translateStructure(value, shape);\n    case 'map': return translateMap(value, shape);\n    case 'list': return translateList(value, shape);\n    default: return translateScalar(value, shape);\n  }\n}\n\nfunction translateStructure(structure, shape) {\n  var struct = {};\n  util.each(structure, function(name, value) {\n    var memberShape = shape.members[name];\n    if (memberShape) {\n      var result = translate(value, memberShape);\n      if (result !== undefined) struct[name] = result;\n    }\n  });\n  return struct;\n}\n\nfunction translateList(list, shape) {\n  var out = [];\n  util.arrayEach(list, function(value) {\n    var result = translate(value, shape.member);\n    if (result !== undefined) out.push(result);\n  });\n  return out;\n}\n\nfunction translateMap(map, shape) {\n  var out = {};\n  util.each(map, function(key, value) {\n    var result = translate(value, shape.value);\n    if (result !== undefined) out[key] = result;\n  });\n  return out;\n}\n\nfunction translateScalar(value, shape) {\n  return shape.toType(value);\n}\n\nmodule.exports = JsonParser;\n"]},"metadata":{},"sourceType":"script"}
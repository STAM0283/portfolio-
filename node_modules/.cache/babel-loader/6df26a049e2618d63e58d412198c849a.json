{"ast":null,"code":"'use strict';\n/**\n * @fileOverview This is the main file for the simplesmtp library to create custom SMTP servers\n * @author <a href='mailto:andris@node.ee'>Andris Reinman</a>\n */\n\nvar RAIServer = require('rai').RAIServer,\n    EventEmitter = require('events').EventEmitter,\n    oslib = require('os'),\n    utillib = require('util'),\n    dnslib = require('dns'),\n    crypto = require('crypto'); // expose to the world\n\n\nmodule.exports = function (options) {\n  return new SMTPServer(options);\n};\n/**\n * <p>Constructs a SMTP server</p>\n *\n * <p>Possible options are:</p>\n *\n * <ul>\n *     <li><b>name</b> - the hostname of the server, will be used for\n *         informational messages</li>\n *     <li><b>debug</b> - if set to true, print out messages about the connection</li>\n *     <li><b>timeout</b> - client timeout in milliseconds, defaults to 60 000</li>\n *     <li><b>secureConnection</b> - start a server on secure connection</li>\n *     <li><b>SMTPBanner</b> - greeting banner that is sent to the client on connection</li>\n *     <li><b>requireAuthentication</b> - if set to true, require that the client\n *         must authenticate itself</li>\n *     <li><b>enableAuthentication</b> - if set to true, client may authenticate itself but don't have to</li>\n *     <li><b>maxSize</b> - maximum size of an e-mail in bytes</li>\n *     <li><b>credentials</b> - TLS credentials</li>\n *     <li><b>authMethods</b> - allowed authentication methods, defaults to <code>['PLAIN', 'LOGIN']</code></li>\n *     <li><b>disableEHLO</b> - if set, support HELO only</li>\n *     <li><b>ignoreTLS</b> - if set, allow client do not use STARTTLS</li>\n *     <li><b>disableDNSValidation</b> - if set, do not validate sender domains</li>\n *     <li><b>maxClients</b> - if set, limit the number of simultaneous connections to the server</li>\n * </ul>\n *\n * @constructor\n * @namespace SMTP Server module\n * @param {Object} [options] Options object\n */\n\n\nfunction SMTPServer(options) {\n  EventEmitter.call(this);\n  this.connectedClients = 0;\n  this.options = options || {};\n  this.options.name = this.options.name || oslib.hostname && oslib.hostname() || oslib.getHostname && oslib.getHostname() || '127.0.0.1';\n  this.options.authMethods = (this.options.authMethods || ['PLAIN', 'LOGIN']).map(function (auth) {\n    return auth.toUpperCase().trim();\n  });\n  this.options.disableEHLO = !!this.options.disableEHLO;\n  this.options.ignoreTLS = !!this.options.ignoreTLS;\n  this.SMTPServer = new RAIServer({\n    secureConnection: !!this.options.secureConnection,\n    credentials: this.options.credentials,\n    timeout: this.options.timeout || 60 * 1000,\n    disconnectOnTimeout: false,\n    debug: !!this.options.debug\n  });\n  this.SMTPServer.on('connect', this._createSMTPServerConnection.bind(this));\n}\n\nutillib.inherits(SMTPServer, EventEmitter);\n/**\n * Server starts listening on defined port and hostname\n *\n * @param {Number} port The port number to listen\n * @param {String} [host] The hostname to listen\n * @param {Function} callback The callback function to run when the server is listening\n */\n\nSMTPServer.prototype.listen = function (port, host, callback) {\n  this.SMTPServer.listen(port, host, callback);\n};\n/**\n * <p>Closes the server</p>\n *\n * @param {Function} callback The callback function to run when the server is closed\n */\n\n\nSMTPServer.prototype.end = function (callback) {\n  this.SMTPServer.end(callback);\n};\n/**\n * <p>Creates a new {@link SMTPServerConnection} object and links the main server with\n * the client socket</p>\n *\n * @param {Object} client RAISocket object to a client\n */\n\n\nSMTPServer.prototype._createSMTPServerConnection = function (client) {\n  new SMTPServerConnection(this, client);\n};\n/**\n * <p>Sets up a handler for the connected client</p>\n *\n * <p>Restarts the state and sets up event listeners for client actions</p>\n *\n * @constructor\n * @param {Object} server {@link SMTPServer} instance\n * @param {Object} client RAISocket instance for the client\n */\n\n\nfunction SMTPServerConnection(server, client) {\n  this.server = server;\n  this.client = client;\n  this.init();\n  this.server.connectedClients++;\n\n  if (!this.client.remoteAddress) {\n    if (this.server.options.debug) {\n      console.log('Client already disconnected');\n    }\n\n    this.client.end();\n    return;\n  }\n\n  if (this.server.options.debug) {\n    console.log('Connection from', this.client.remoteAddress);\n  }\n\n  this.client.on('timeout', this._onTimeout.bind(this));\n  this.client.on('error', this._onError.bind(this));\n  this.client.on('command', this._onCommand.bind(this));\n  this.client.on('end', this._onEnd.bind(this));\n  this.client.on('data', this._onData.bind(this));\n  this.client.on('ready', this._onDataReady.bind(this)); // Too many clients. Disallow processing\n\n  if (this.server.options.maxClients && this.server.connectedClients > this.server.options.maxClients) {\n    this.end('421 ' + this.server.options.name + ' ESMTP - Too many connections. Please try again later.');\n  } else {\n    // Send the greeting banner. Force ESMTP notice\n    this.client.send('220 ' + this.server.options.name + ' ESMTP ' + (this.server.options.SMTPBanner || 'node.js simplesmtp'));\n  }\n}\n/**\n * <p>Reset the envelope state</p>\n *\n * <p>If <code>keepAuthData</code> is set to true, then doesn't remove\n * authentication data</p>\n *\n * @param {Boolean} [keepAuthData=false] If set to true keep authentication data\n */\n\n\nSMTPServerConnection.prototype.init = function (keepAuthData) {\n  if (this.envelope === undefined) {\n    this.envelope = {};\n  }\n\n  this.envelope.from = '';\n  this.envelope.to = [];\n  this.envelope.date = new Date();\n\n  if (this.hostNameAppearsAs) {\n    this.envelope.host = this.hostNameAppearsAs;\n  }\n\n  if (this.client.remoteAddress) {\n    this.envelope.remoteAddress = this.client.remoteAddress;\n  }\n\n  if (!keepAuthData) {\n    this.authentication = {\n      username: false,\n      authenticated: false,\n      state: 'NORMAL'\n    };\n  }\n\n  this.envelope.authentication = this.authentication;\n};\n/**\n * <p>Sends a message to the client and closes the connection</p>\n *\n * @param {String} [message] if set, send it to the client before disconnecting\n */\n\n\nSMTPServerConnection.prototype.end = function (message) {\n  if (message) {\n    this.client.send(message);\n  }\n\n  this.client.end();\n};\n/**\n * <p>Will be called when the connection to the client is closed</p>\n *\n * @event\n */\n\n\nSMTPServerConnection.prototype._onEnd = function () {\n  if (this.server.options.debug) {\n    console.log('Connection closed to', this.client.remoteAddress);\n  }\n\n  this.server.connectedClients--;\n\n  try {\n    this.client.end();\n  } catch (E) {}\n\n  this.server.emit('close', this.envelope);\n};\n/**\n * <p>Will be called when timeout occurs</p>\n *\n * @event\n */\n\n\nSMTPServerConnection.prototype._onTimeout = function () {\n  this.end('421 4.4.2 ' + this.server.options.name + ' Error: timeout exceeded');\n};\n/**\n * <p>Will be called when an error occurs</p>\n *\n * @event\n */\n\n\nSMTPServerConnection.prototype._onError = function () {\n  this.end('421 4.4.2 ' + this.server.options.name + ' Error: client error');\n};\n/**\n * <p>Will be called when a command is received from the client</p>\n *\n * <p>If there's curently an authentication process going on, route\n * the data to <code>_handleAuthLogin</code>, otherwise act as\n * defined</p>\n *\n * @event\n * @param {String} command Command\n * @param {Buffer} command Payload related to the command\n */\n\n\nSMTPServerConnection.prototype._onCommand = function (command, payload) {\n  if (this.authentication.state == 'AUTHPLAINUSERDATA') {\n    this._handleAuthPlain(command.toString('utf-8').trim().split(' '));\n\n    return;\n  }\n\n  if (this.authentication.state == 'AUTHENTICATING') {\n    this._handleAuthLogin(command);\n\n    return;\n  }\n\n  if (this.authentication.state == 'AUTHXOAUTH2') {\n    this._handleAuthXOAuth2(command);\n\n    return;\n  }\n\n  switch ((command || '').toString().trim().toUpperCase()) {\n    // Should not occur too often\n    case 'HELO':\n      this._onCommandHELO(payload.toString('utf-8').trim());\n\n      break;\n    // Lists server capabilities\n\n    case 'EHLO':\n      if (!this.server.options.disableEHLO) {\n        this._onCommandEHLO(payload.toString('utf-8').trim());\n      } else {\n        this.client.send('502 5.5.2 Error: command not recognized');\n      }\n\n      break;\n    // Closes the connection\n\n    case 'QUIT':\n      this.end('221 2.0.0 Goodbye!');\n      break;\n    // Resets the current state\n\n    case 'RSET':\n      this._onCommandRSET();\n\n      break;\n    // Doesn't work for spam related purposes\n\n    case 'VRFY':\n      this.client.send('252 2.1.5 Send some mail, I\\'ll try my best');\n      break;\n    // Initiate an e-mail by defining a sender\n\n    case 'MAIL':\n      this._onCommandMAIL(payload.toString('utf-8').trim());\n\n      break;\n    // Add recipients to the e-mail envelope\n\n    case 'RCPT':\n      this._onCommandRCPT(payload.toString('utf-8').trim());\n\n      break;\n    // Authenticate if needed\n\n    case 'AUTH':\n      this._onCommandAUTH(payload);\n\n      break;\n    // Start accepting binary data stream\n\n    case 'DATA':\n      this._onCommandDATA();\n\n      break;\n    // Upgrade connection to secure TLS\n\n    case 'STARTTLS':\n      this._onCommandSTARTTLS();\n\n      break;\n    // No operation\n\n    case 'NOOP':\n      this._onCommandNOOP();\n\n      break;\n    // No operation\n\n    case '':\n      // ignore blank lines\n      break;\n    // Display an error on anything else\n\n    default:\n      this.client.send('502 5.5.2 Error: command not recognized');\n  }\n};\n/**\n * <p>Initiate an e-mail by defining a sender.</p>\n *\n * <p>This doesn't work if authorization is required but the client is\n * not logged in yet.</p>\n *\n * <p>If <code>validateSender</code> option is set to true, then emits\n * <code>'validateSender'</code> and wait for the callback before moving\n * on</p>\n *\n * @param {String} mail Address payload in the form of 'FROM:&lt;address&gt;'\n */\n\n\nSMTPServerConnection.prototype._onCommandMAIL = function (mail) {\n  var self = this,\n      match,\n      email,\n      domain;\n\n  if (!this.hostNameAppearsAs) {\n    return this.client.send('503 5.5.1 Error: send HELO/EHLO first');\n  }\n\n  if (this.server.options.requireAuthentication && !this.authentication.authenticated) {\n    return this.client.send('530 5.5.1 Authentication Required');\n  }\n\n  if (this.envelope.from) {\n    return this.client.send('503 5.5.1 Error: nested MAIL command');\n  }\n\n  if (!(match = mail.match(/^from\\:\\s*<([^@>]+\\@([^@>]+))>(\\s|$)/i)) && !mail.match(/^from\\:\\s*<>/i)) {\n    return this.client.send('501 5.1.7 Bad sender address syntax');\n  }\n\n  if (this.server.options.maxSize) {\n    mail.replace(/> size=(\\d+)\\b\\s*/i, function (o, size) {\n      self.envelope.messageSize = size;\n    });\n  }\n\n  email = match !== null && match[1] || '';\n  domain = (match !== null && match[2] || '').toLowerCase();\n\n  this._validateAddress('sender', email, domain, function (err) {\n    if (err) {\n      return self.client.send(err.message);\n    }\n\n    email = email.substr(0, email.length - domain.length) + domain;\n    self.envelope.from = email;\n    self.client.send('250 2.1.0 Ok');\n  });\n};\n/**\n * <p>Add recipients to the e-mail envelope</p>\n *\n * <p>This doesn't work if <code>MAIL</code> command is not yet executed</p>\n *\n * <p>If <code>validateRecipients</code> option is set to true, then emits\n * <code>'validateRecipient'</code> and wait for the callback before moving\n * on</p>\n *\n * @param {String} mail Address payload in the form of 'TO:&lt;address&gt;'\n */\n\n\nSMTPServerConnection.prototype._onCommandRCPT = function (mail) {\n  var self = this,\n      match,\n      email,\n      domain;\n\n  if (!this.envelope.from) {\n    return this.client.send('503 5.5.1 Error: need MAIL command');\n  }\n\n  if (!(match = mail.match(/^to\\:\\s*<([^@>]+\\@([^@>]+))>$/i))) {\n    return this.client.send('501 5.1.7 Bad recipient address syntax');\n  }\n\n  email = match[1] || '';\n  domain = (match[2] || '').toLowerCase();\n\n  this._validateAddress('recipient', email, domain, function (err) {\n    if (err) {\n      return self.client.send(err.message);\n    } // force domain part to be lowercase\n\n\n    email = email.substr(0, email.length - domain.length) + domain; // add to recipients list\n\n    if (self.envelope.to.indexOf(email) < 0) {\n      self.envelope.to.push(email);\n    }\n\n    self.client.send('250 2.1.0 Ok');\n  });\n};\n/**\n * <p>If <code>disableDNSValidation</code> option is set to false, then performs\n * validation via DNS lookup.\n *\n * <p>If <code>validate{type}</code> option is set to true, then emits\n * <code>'validate{type}'</code> and waits for the callback before moving\n * on</p>\n *\n * @param {String} addressType 'sender' or 'recipient'\n * @param {String} email\n * @param {String} domain\n * @param {Function} callback\n */\n\n\nSMTPServerConnection.prototype._validateAddress = function (addressType, email, domain, callback) {\n  var validateEvent, validationFailedEvent, dnsErrorMessage, localErrorMessage;\n\n  if (addressType === 'sender') {\n    validateEvent = 'validateSender';\n    validationFailedEvent = 'senderValidationFailed';\n    dnsErrorMessage = '450 4.1.8 <' + email + '>: Sender address rejected: Domain not found';\n    localErrorMessage = '550 5.1.1 <' + email + '>: Sender address rejected: User unknown in local sender table';\n  } else if (addressType === 'recipient') {\n    validateEvent = 'validateRecipient';\n    validationFailedEvent = 'recipientValidationFailed';\n    dnsErrorMessage = '450 4.1.8 <' + email + '>: Recipient address rejected: Domain not found';\n    localErrorMessage = '550 5.1.1 <' + email + '>: Recipient address rejected: User unknown in local recipient table';\n  } else {\n    // How are internal errors handled?\n    throw new Error('Address type not supported');\n  }\n\n  var validateViaLocal = function () {\n    if (this.server.listeners(validateEvent).length) {\n      this.server.emit(validateEvent, this.envelope, email, function (err) {\n        if (err) {\n          return callback(new Error(err.SMTPResponse || localErrorMessage));\n        }\n\n        return callback();\n      }.bind(this));\n    } else {\n      return callback();\n    }\n  };\n\n  var validateViaDNS = function () {\n    dnslib.resolveMx(domain, function (err, addresses) {\n      if (err || !addresses || !addresses.length) {\n        this.server.emit(validationFailedEvent, email);\n        return callback(new Error(err && err.SMTPResponse || dnsErrorMessage));\n      }\n\n      validateViaLocal.call(this);\n    }.bind(this));\n  };\n\n  if (!this.server.options.disableDNSValidation) {\n    validateViaDNS.call(this);\n  } else {\n    return validateViaLocal.call(this);\n  }\n};\n/**\n * <p>Switch to data mode and starts waiting for a binary data stream. Emits\n * <code>'startData'</code>.</p>\n *\n * <p>If <code>RCPT</code> is not yet run, stop</p>\n */\n\n\nSMTPServerConnection.prototype._onCommandDATA = function () {\n  if (!this.envelope.to.length) {\n    return this.client.send('503 5.5.1 Error: need RCPT command');\n  }\n\n  this.client.startDataMode();\n  this.client.send('354 End data with <CR><LF>.<CR><LF>');\n  this.server.emit('startData', this.envelope);\n};\n/**\n * <p>Resets the current state - e-mail data and authentication info</p>\n */\n\n\nSMTPServerConnection.prototype._onCommandRSET = function () {\n  this.init();\n  this.client.send('250 2.0.0 Ok');\n};\n/**\n * <p>If the server is in secure connection mode, start the authentication\n * process. Param <code>payload</code> defines the authentication mechanism.</p>\n *\n * <p>Currently supported - PLAIN and LOGIN. There is no need for more\n * complicated mechanisms (different CRAM versions etc.) since authentication\n * is only done in secure connection mode</p>\n *\n * @param {Buffer} payload Defines the authentication mechanism\n */\n\n\nSMTPServerConnection.prototype._onCommandAUTH = function (payload) {\n  var method;\n\n  if (!this.server.options.requireAuthentication && !this.server.options.enableAuthentication) {\n    return this.client.send('503 5.5.1 Error: authentication not enabled');\n  }\n\n  if (!this.server.options.ignoreTLS && !this.client.secureConnection) {\n    return this.client.send('530 5.7.0 Must issue a STARTTLS command first');\n  }\n\n  if (this.authentication.authenticated) {\n    return this.client.send('503 5.7.0 No identity changes permitted');\n  }\n\n  payload = payload.toString('utf-8').trim().split(' ');\n  method = payload.shift().trim().toUpperCase();\n\n  if (this.server.options.authMethods.indexOf(method) < 0) {\n    return this.client.send('535 5.7.8 Error: authentication failed: no mechanism available');\n  }\n\n  switch (method) {\n    case 'PLAIN':\n      this._handleAuthPlain(payload);\n\n      break;\n\n    case 'XOAUTH2':\n      this._handleAuthXOAuth2(payload);\n\n      break;\n\n    case 'LOGIN':\n      var username = payload.shift();\n\n      if (username) {\n        username = username.trim();\n        this.authentication.state = 'AUTHENTICATING';\n      }\n\n      this._handleAuthLogin(username);\n\n      break;\n  }\n};\n/**\n * <p>Upgrade the connection to a secure TLS connection</p>\n */\n\n\nSMTPServerConnection.prototype._onCommandSTARTTLS = function () {\n  if (this.server.options.disableSTARTTLS) {\n    return this.client.send('502 5.5.2 Error: command not recognized');\n  }\n\n  if (this.client.secureConnection) {\n    return this.client.send('554 5.5.1 Error: TLS already active');\n  }\n\n  this.client.send('220 2.0.0 Ready to start TLS');\n  this.client.startTLS(this.server.options.credentials, function () {// Connection secured\n    // nothing to do here, since it is the client that should\n    // make the next move\n  }.bind(this));\n};\n/**\n * <p>Retrieve hostname from the client. Not very important, since client\n * IP is already known and the client can send fake data</p>\n *\n * @param {String} host Hostname of the client\n */\n\n\nSMTPServerConnection.prototype._onCommandHELO = function (host) {\n  if (!host) {\n    return this.client.send('501 Syntax: EHLO hostname');\n  } else {\n    this.hostNameAppearsAs = host;\n    this.envelope.host = host;\n  }\n\n  this.client.send('250 ' + this.server.options.name + ' at your service, [' + this.client.remoteAddress + ']');\n};\n/**\n * <p>Retrieve hostname from the client. Not very important, since client\n * IP is already known and the client can send fake data</p>\n *\n * <p>Additionally displays server capability list to the client</p>\n *\n * @param {String} host Hostname of the client\n */\n\n\nSMTPServerConnection.prototype._onCommandEHLO = function (host) {\n  var response = [this.server.options.name + ' at your service, [' + this.client.remoteAddress + ']', '8BITMIME', 'ENHANCEDSTATUSCODES'];\n\n  if (this.server.options.maxSize) {\n    response.push('SIZE ' + this.server.options.maxSize);\n  }\n\n  if ((this.client.secureConnection || this.server.options.ignoreTLS) && (this.server.options.requireAuthentication || this.server.options.enableAuthentication)) {\n    response.push('AUTH ' + this.server.options.authMethods.join(' '));\n    response.push('AUTH=' + this.server.options.authMethods.join(' '));\n  }\n\n  if (!this.client.secureConnection && !this.server.options.disableSTARTTLS) {\n    response.push('STARTTLS');\n  }\n\n  if (!host) {\n    return this.client.send('501 Syntax: EHLO hostname');\n  } else {\n    this.hostNameAppearsAs = host;\n    this.envelope.host = host;\n  }\n\n  this.client.send(response.map(function (feature, i, arr) {\n    return '250' + (i < arr.length - 1 ? '-' : ' ') + feature;\n  }).join('\\r\\n'));\n};\n/**\n * <p>No operation. Just returns OK.</p>\n */\n\n\nSMTPServerConnection.prototype._onCommandNOOP = function () {\n  this.client.send('250 OK');\n};\n/**\n * <p>Detect login information from the payload and initiate authentication\n * by emitting <code>'authorizeUser'</code> and waiting for its callback</p>\n *\n * @param {Buffer} payload AUTH PLAIN login information\n */\n\n\nSMTPServerConnection.prototype._handleAuthPlain = function (payload) {\n  if (payload.length) {\n    var userdata = new Buffer(payload.join(' '), 'base64'),\n        password;\n    userdata = userdata.toString('utf-8').split('\\u0000');\n\n    if (userdata.length != 3) {\n      return this.client.send('500 5.5.2 Error: invalid userdata to decode');\n    }\n\n    this.authentication.username = userdata[1] || userdata[0] || '';\n    password = userdata[2] || '';\n    this.server.emit('authorizeUser', this.envelope, this.authentication.username, password, function (err, success) {\n      if (err || !success) {\n        this.authentication.authenticated = false;\n        this.authentication.username = false;\n        this.authentication.state = 'NORMAL';\n        return this.client.send('535 5.7.8 Error: authentication failed: generic failure');\n      }\n\n      this.client.send('235 2.7.0 Authentication successful');\n      this.authentication.authenticated = true;\n      this.authentication.state = 'AUTHENTICATED';\n    }.bind(this));\n  } else {\n    if (this.authentication.state == 'NORMAL') {\n      this.authentication.state = 'AUTHPLAINUSERDATA';\n      this.client.send('334');\n    }\n  }\n};\n/**\n * <p>Sets authorization state to 'AUTHENTICATING' and reuqests for the\n * username and password from the client</p>\n *\n * <p>If username and password are set initiate authentication\n * by emitting <code>'authorizeUser'</code> and waiting for its callback</p>\n *\n * @param {Buffer} payload AUTH LOGIN login information\n */\n\n\nSMTPServerConnection.prototype._handleAuthLogin = function (payload) {\n  if (this.authentication.state == 'NORMAL') {\n    this.authentication.state = 'AUTHENTICATING';\n    this.client.send('334 VXNlcm5hbWU6');\n  } else if (this.authentication.state == 'AUTHENTICATING') {\n    if (this.authentication.username === false) {\n      this.authentication.username = new Buffer(payload, 'base64').toString('utf-8');\n      this.client.send('334 UGFzc3dvcmQ6');\n    } else {\n      this.authentication.state = 'VERIFYING';\n      this.server.emit('authorizeUser', this.envelope, this.authentication.username, new Buffer(payload, 'base64').toString('utf-8'), function (err, success) {\n        if (err || !success) {\n          this.authentication.authenticated = false;\n          this.authentication.username = false;\n          this.authentication.state = 'NORMAL';\n          return this.client.send('535 5.7.8 Error: authentication failed: generic failure');\n        }\n\n        this.client.send('235 2.7.0 Authentication successful');\n        this.authentication.authenticated = true;\n        this.authentication.state = 'AUTHENTICATED';\n      }.bind(this));\n    }\n  }\n};\n/**\n * <p>Detect login information from the payload and initiate authentication\n * by emitting <code>'authorizeUser'</code> and waiting for its callback</p>\n *\n * @param {Buffer} payload AUTH XOAUTH2 login information\n */\n\n\nSMTPServerConnection.prototype._handleAuthXOAuth2 = function (payload) {\n  if (this.authentication.state == 'AUTHXOAUTH2') {\n    // empty response from the client\n    this.authentication.authenticated = false;\n    this.authentication.username = false;\n    this.authentication.state = 'NORMAL';\n    return this.client.send('535 5.7.1 Username and Password not accepted');\n  }\n\n  var userdata = new Buffer(payload.join(' '), 'base64'),\n      token;\n  userdata = userdata.toString('utf-8').split('\\x01');\n\n  if (userdata.length != 4) {\n    return this.client.send('500 5.5.2 Error: invalid userdata to decode');\n  }\n\n  this.authentication.username = userdata[0].substr(5) || '';\n  token = userdata[1].split(' ')[1] || '';\n  this.server.emit('authorizeUser', this.envelope, this.authentication.username, token, function (err, success) {\n    if (err || !success) {\n      this.authentication.state = 'AUTHXOAUTH2';\n      return this.client.send('334 eyJzdGF0dXMiOiI0MDEiLCJzY2hlbWVzIjoiYmVhcmVyIG1hYyIsInNjb3BlIjoiaHR0cHM6Ly9tYWlsLmdvb2dsZS5jb20vIn0K');\n    }\n\n    this.client.send('235 2.7.0 Authentication successful');\n    this.authentication.authenticated = true;\n    this.authentication.state = 'AUTHENTICATED';\n  }.bind(this));\n};\n/**\n * <p>Emits the data received from the client with <code>'data'</code>\n *\n * @event\n * @param {Buffer} chunk Binary data sent by the client on data mode\n */\n\n\nSMTPServerConnection.prototype._onData = function (chunk) {\n  this.server.emit('data', this.envelope, chunk);\n};\n/**\n * <p>If the data stream ends, emit <code>'dataReady'</code>and wait for\n * the callback, only if server listened for it.</p>\n *\n * @event\n */\n\n\nSMTPServerConnection.prototype._onDataReady = function () {\n  if (this.server.listeners('dataReady').length) {\n    this.server.emit('dataReady', this.envelope, function (err, code) {\n      this.init(true); //reset state, keep auth data\n\n      if (err) {\n        this.client.send(err && err.SMTPResponse || '550 ' + (err && err.message || 'FAILED'));\n      } else {\n        this.client.send('250 2.0.0 Ok: queued as ' + (code || crypto.randomBytes(10).toString('hex')));\n      }\n    }.bind(this));\n  } else {\n    this.init(true); //reset state, keep auth data\n\n    this.client.send('250 2.0.0 Ok: queued as ' + crypto.randomBytes(10).toString('hex'));\n  }\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/simplesmtp/lib/server.js"],"names":["RAIServer","require","EventEmitter","oslib","utillib","dnslib","crypto","module","exports","options","SMTPServer","call","connectedClients","name","hostname","getHostname","authMethods","map","auth","toUpperCase","trim","disableEHLO","ignoreTLS","secureConnection","credentials","timeout","disconnectOnTimeout","debug","on","_createSMTPServerConnection","bind","inherits","prototype","listen","port","host","callback","end","client","SMTPServerConnection","server","init","remoteAddress","console","log","_onTimeout","_onError","_onCommand","_onEnd","_onData","_onDataReady","maxClients","send","SMTPBanner","keepAuthData","envelope","undefined","from","to","date","Date","hostNameAppearsAs","authentication","username","authenticated","state","message","E","emit","command","payload","_handleAuthPlain","toString","split","_handleAuthLogin","_handleAuthXOAuth2","_onCommandHELO","_onCommandEHLO","_onCommandRSET","_onCommandMAIL","_onCommandRCPT","_onCommandAUTH","_onCommandDATA","_onCommandSTARTTLS","_onCommandNOOP","mail","self","match","email","domain","requireAuthentication","maxSize","replace","o","size","messageSize","toLowerCase","_validateAddress","err","substr","length","indexOf","push","addressType","validateEvent","validationFailedEvent","dnsErrorMessage","localErrorMessage","Error","validateViaLocal","listeners","SMTPResponse","validateViaDNS","resolveMx","addresses","disableDNSValidation","startDataMode","method","enableAuthentication","shift","disableSTARTTLS","startTLS","response","join","feature","i","arr","userdata","Buffer","password","success","token","chunk","code","randomBytes"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * @fileOverview This is the main file for the simplesmtp library to create custom SMTP servers\n * @author <a href='mailto:andris@node.ee'>Andris Reinman</a>\n */\n\nvar RAIServer = require('rai').RAIServer,\n    EventEmitter = require('events').EventEmitter,\n    oslib = require('os'),\n    utillib = require('util'),\n    dnslib = require('dns'),\n    crypto = require('crypto');\n\n// expose to the world\nmodule.exports = function(options) {\n    return new SMTPServer(options);\n};\n\n/**\n * <p>Constructs a SMTP server</p>\n *\n * <p>Possible options are:</p>\n *\n * <ul>\n *     <li><b>name</b> - the hostname of the server, will be used for\n *         informational messages</li>\n *     <li><b>debug</b> - if set to true, print out messages about the connection</li>\n *     <li><b>timeout</b> - client timeout in milliseconds, defaults to 60 000</li>\n *     <li><b>secureConnection</b> - start a server on secure connection</li>\n *     <li><b>SMTPBanner</b> - greeting banner that is sent to the client on connection</li>\n *     <li><b>requireAuthentication</b> - if set to true, require that the client\n *         must authenticate itself</li>\n *     <li><b>enableAuthentication</b> - if set to true, client may authenticate itself but don't have to</li>\n *     <li><b>maxSize</b> - maximum size of an e-mail in bytes</li>\n *     <li><b>credentials</b> - TLS credentials</li>\n *     <li><b>authMethods</b> - allowed authentication methods, defaults to <code>['PLAIN', 'LOGIN']</code></li>\n *     <li><b>disableEHLO</b> - if set, support HELO only</li>\n *     <li><b>ignoreTLS</b> - if set, allow client do not use STARTTLS</li>\n *     <li><b>disableDNSValidation</b> - if set, do not validate sender domains</li>\n *     <li><b>maxClients</b> - if set, limit the number of simultaneous connections to the server</li>\n * </ul>\n *\n * @constructor\n * @namespace SMTP Server module\n * @param {Object} [options] Options object\n */\nfunction SMTPServer(options) {\n    EventEmitter.call(this);\n\n    this.connectedClients = 0;\n    this.options = options || {};\n    this.options.name = this.options.name || (oslib.hostname && oslib.hostname()) ||\n        (oslib.getHostname && oslib.getHostname()) ||\n        '127.0.0.1';\n\n    this.options.authMethods = (this.options.authMethods || ['PLAIN', 'LOGIN']).map(\n        function(auth) {\n            return auth.toUpperCase().trim();\n        });\n\n    this.options.disableEHLO = !! this.options.disableEHLO;\n    this.options.ignoreTLS = !! this.options.ignoreTLS;\n\n    this.SMTPServer = new RAIServer({\n        secureConnection: !! this.options.secureConnection,\n        credentials: this.options.credentials,\n        timeout: this.options.timeout || 60 * 1000,\n        disconnectOnTimeout: false,\n        debug: !! this.options.debug\n    });\n\n    this.SMTPServer.on('connect', this._createSMTPServerConnection.bind(this));\n}\nutillib.inherits(SMTPServer, EventEmitter);\n\n/**\n * Server starts listening on defined port and hostname\n *\n * @param {Number} port The port number to listen\n * @param {String} [host] The hostname to listen\n * @param {Function} callback The callback function to run when the server is listening\n */\nSMTPServer.prototype.listen = function(port, host, callback) {\n    this.SMTPServer.listen(port, host, callback);\n};\n\n/**\n * <p>Closes the server</p>\n *\n * @param {Function} callback The callback function to run when the server is closed\n */\nSMTPServer.prototype.end = function(callback) {\n    this.SMTPServer.end(callback);\n};\n\n/**\n * <p>Creates a new {@link SMTPServerConnection} object and links the main server with\n * the client socket</p>\n *\n * @param {Object} client RAISocket object to a client\n */\nSMTPServer.prototype._createSMTPServerConnection = function(client) {\n    new SMTPServerConnection(this, client);\n};\n\n/**\n * <p>Sets up a handler for the connected client</p>\n *\n * <p>Restarts the state and sets up event listeners for client actions</p>\n *\n * @constructor\n * @param {Object} server {@link SMTPServer} instance\n * @param {Object} client RAISocket instance for the client\n */\nfunction SMTPServerConnection(server, client) {\n    this.server = server;\n    this.client = client;\n\n    this.init();\n    this.server.connectedClients++;\n\n    if (!this.client.remoteAddress) {\n        if (this.server.options.debug) {\n            console.log('Client already disconnected');\n        }\n        this.client.end();\n        return;\n    }\n\n    if (this.server.options.debug) {\n        console.log('Connection from', this.client.remoteAddress);\n    }\n\n    this.client.on('timeout', this._onTimeout.bind(this));\n    this.client.on('error', this._onError.bind(this));\n    this.client.on('command', this._onCommand.bind(this));\n    this.client.on('end', this._onEnd.bind(this));\n\n    this.client.on('data', this._onData.bind(this));\n    this.client.on('ready', this._onDataReady.bind(this));\n\n    // Too many clients. Disallow processing\n    if (this.server.options.maxClients && this.server.connectedClients > this.server.options.maxClients) {\n        this.end('421 ' + this.server.options.name + ' ESMTP - Too many connections. Please try again later.');\n    } else {\n        // Send the greeting banner. Force ESMTP notice\n        this.client.send('220 ' + this.server.options.name + ' ESMTP ' + (this.server.options.SMTPBanner || 'node.js simplesmtp'));\n    }\n}\n\n/**\n * <p>Reset the envelope state</p>\n *\n * <p>If <code>keepAuthData</code> is set to true, then doesn't remove\n * authentication data</p>\n *\n * @param {Boolean} [keepAuthData=false] If set to true keep authentication data\n */\nSMTPServerConnection.prototype.init = function(keepAuthData) {\n    if (this.envelope === undefined) {\n        this.envelope = {};\n    }\n\n    this.envelope.from = '';\n    this.envelope.to = [];\n    this.envelope.date = new Date();\n\n    if (this.hostNameAppearsAs) {\n        this.envelope.host = this.hostNameAppearsAs;\n    }\n\n    if (this.client.remoteAddress) {\n        this.envelope.remoteAddress = this.client.remoteAddress;\n    }\n\n    if (!keepAuthData) {\n        this.authentication = {\n            username: false,\n            authenticated: false,\n            state: 'NORMAL'\n        };\n    }\n\n    this.envelope.authentication = this.authentication;\n};\n\n/**\n * <p>Sends a message to the client and closes the connection</p>\n *\n * @param {String} [message] if set, send it to the client before disconnecting\n */\nSMTPServerConnection.prototype.end = function(message) {\n    if (message) {\n        this.client.send(message);\n    }\n    this.client.end();\n};\n\n/**\n * <p>Will be called when the connection to the client is closed</p>\n *\n * @event\n */\nSMTPServerConnection.prototype._onEnd = function() {\n    if (this.server.options.debug) {\n        console.log('Connection closed to', this.client.remoteAddress);\n    }\n    this.server.connectedClients--;\n    try {\n        this.client.end();\n    } catch (E) {}\n    this.server.emit('close', this.envelope);\n};\n\n/**\n * <p>Will be called when timeout occurs</p>\n *\n * @event\n */\nSMTPServerConnection.prototype._onTimeout = function() {\n    this.end('421 4.4.2 ' + this.server.options.name + ' Error: timeout exceeded');\n};\n\n/**\n * <p>Will be called when an error occurs</p>\n *\n * @event\n */\nSMTPServerConnection.prototype._onError = function() {\n    this.end('421 4.4.2 ' + this.server.options.name + ' Error: client error');\n};\n\n/**\n * <p>Will be called when a command is received from the client</p>\n *\n * <p>If there's curently an authentication process going on, route\n * the data to <code>_handleAuthLogin</code>, otherwise act as\n * defined</p>\n *\n * @event\n * @param {String} command Command\n * @param {Buffer} command Payload related to the command\n */\nSMTPServerConnection.prototype._onCommand = function(command, payload) {\n    if (this.authentication.state == 'AUTHPLAINUSERDATA') {\n        this._handleAuthPlain(command.toString('utf-8').trim().split(' '));\n        return;\n    }\n\n    if (this.authentication.state == 'AUTHENTICATING') {\n        this._handleAuthLogin(command);\n        return;\n    }\n\n    if (this.authentication.state == 'AUTHXOAUTH2') {\n        this._handleAuthXOAuth2(command);\n        return;\n    }\n\n    switch ((command || '').toString().trim().toUpperCase()) {\n\n        // Should not occur too often\n        case 'HELO':\n            this._onCommandHELO(payload.toString('utf-8').trim());\n            break;\n\n            // Lists server capabilities\n        case 'EHLO':\n            if (!this.server.options.disableEHLO) {\n                this._onCommandEHLO(payload.toString('utf-8').trim());\n            } else {\n                this.client.send('502 5.5.2 Error: command not recognized');\n            }\n            break;\n\n            // Closes the connection\n        case 'QUIT':\n            this.end('221 2.0.0 Goodbye!');\n            break;\n\n            // Resets the current state\n        case 'RSET':\n            this._onCommandRSET();\n            break;\n\n            // Doesn't work for spam related purposes\n        case 'VRFY':\n            this.client.send('252 2.1.5 Send some mail, I\\'ll try my best');\n            break;\n\n            // Initiate an e-mail by defining a sender\n        case 'MAIL':\n            this._onCommandMAIL(payload.toString('utf-8').trim());\n            break;\n\n            // Add recipients to the e-mail envelope\n        case 'RCPT':\n            this._onCommandRCPT(payload.toString('utf-8').trim());\n            break;\n\n            // Authenticate if needed\n        case 'AUTH':\n            this._onCommandAUTH(payload);\n            break;\n\n            // Start accepting binary data stream\n        case 'DATA':\n            this._onCommandDATA();\n            break;\n\n            // Upgrade connection to secure TLS\n        case 'STARTTLS':\n            this._onCommandSTARTTLS();\n            break;\n\n            // No operation\n        case 'NOOP':\n            this._onCommandNOOP();\n            break;\n\n            // No operation\n        case '':\n            // ignore blank lines\n            break;\n\n            // Display an error on anything else\n        default:\n            this.client.send('502 5.5.2 Error: command not recognized');\n    }\n};\n\n/**\n * <p>Initiate an e-mail by defining a sender.</p>\n *\n * <p>This doesn't work if authorization is required but the client is\n * not logged in yet.</p>\n *\n * <p>If <code>validateSender</code> option is set to true, then emits\n * <code>'validateSender'</code> and wait for the callback before moving\n * on</p>\n *\n * @param {String} mail Address payload in the form of 'FROM:&lt;address&gt;'\n */\nSMTPServerConnection.prototype._onCommandMAIL = function(mail) {\n    var self = this,\n        match,\n        email,\n        domain;\n\n    if (!this.hostNameAppearsAs) {\n        return this.client.send('503 5.5.1 Error: send HELO/EHLO first');\n    }\n\n    if (this.server.options.requireAuthentication && !this.authentication.authenticated) {\n        return this.client.send('530 5.5.1 Authentication Required');\n    }\n\n    if (this.envelope.from) {\n        return this.client.send('503 5.5.1 Error: nested MAIL command');\n    }\n\n    if (!(match = mail.match(/^from\\:\\s*<([^@>]+\\@([^@>]+))>(\\s|$)/i)) && !(mail.match(/^from\\:\\s*<>/i))) {\n        return this.client.send('501 5.1.7 Bad sender address syntax');\n    }\n\n    if (this.server.options.maxSize) {\n        mail.replace(/> size=(\\d+)\\b\\s*/i, function(o, size) {\n            self.envelope.messageSize = size;\n        });\n    }\n\n    email = (match !== null && match[1]) || '';\n    domain = ((match !== null && match[2]) || '').toLowerCase();\n\n    this._validateAddress('sender', email, domain, function(err) {\n        if (err) {\n            return self.client.send(err.message);\n        }\n        email = email.substr(0, email.length - domain.length) + domain;\n        self.envelope.from = email;\n        self.client.send('250 2.1.0 Ok');\n    });\n};\n\n/**\n * <p>Add recipients to the e-mail envelope</p>\n *\n * <p>This doesn't work if <code>MAIL</code> command is not yet executed</p>\n *\n * <p>If <code>validateRecipients</code> option is set to true, then emits\n * <code>'validateRecipient'</code> and wait for the callback before moving\n * on</p>\n *\n * @param {String} mail Address payload in the form of 'TO:&lt;address&gt;'\n */\nSMTPServerConnection.prototype._onCommandRCPT = function(mail) {\n    var self = this,\n        match,\n        email,\n        domain;\n\n    if (!this.envelope.from) {\n        return this.client.send('503 5.5.1 Error: need MAIL command');\n    }\n\n    if (!(match = mail.match(/^to\\:\\s*<([^@>]+\\@([^@>]+))>$/i))) {\n        return this.client.send('501 5.1.7 Bad recipient address syntax');\n    }\n\n    email = match[1] || '';\n    domain = (match[2] || '').toLowerCase();\n\n    this._validateAddress('recipient', email, domain, function(err) {\n        if (err) {\n            return self.client.send(err.message);\n        }\n\n        // force domain part to be lowercase\n        email = email.substr(0, email.length - domain.length) + domain;\n\n        // add to recipients list\n        if (self.envelope.to.indexOf(email) < 0) {\n            self.envelope.to.push(email);\n        }\n        self.client.send('250 2.1.0 Ok');\n    });\n\n};\n\n/**\n * <p>If <code>disableDNSValidation</code> option is set to false, then performs\n * validation via DNS lookup.\n *\n * <p>If <code>validate{type}</code> option is set to true, then emits\n * <code>'validate{type}'</code> and waits for the callback before moving\n * on</p>\n *\n * @param {String} addressType 'sender' or 'recipient'\n * @param {String} email\n * @param {String} domain\n * @param {Function} callback\n */\nSMTPServerConnection.prototype._validateAddress = function(addressType, email, domain, callback) {\n\n    var validateEvent,\n        validationFailedEvent,\n        dnsErrorMessage,\n        localErrorMessage;\n\n    if (addressType === 'sender') {\n        validateEvent = 'validateSender';\n        validationFailedEvent = 'senderValidationFailed';\n        dnsErrorMessage = '450 4.1.8 <' + email + '>: Sender address rejected: Domain not found';\n        localErrorMessage = '550 5.1.1 <' + email + '>: Sender address rejected: User unknown in local sender table';\n    } else if (addressType === 'recipient') {\n        validateEvent = 'validateRecipient';\n        validationFailedEvent = 'recipientValidationFailed';\n        dnsErrorMessage = '450 4.1.8 <' + email + '>: Recipient address rejected: Domain not found';\n        localErrorMessage = '550 5.1.1 <' + email + '>: Recipient address rejected: User unknown in local recipient table';\n    } else {\n        // How are internal errors handled?\n        throw new Error('Address type not supported');\n    }\n\n    var validateViaLocal = function() {\n        if (this.server.listeners(validateEvent).length) {\n            this.server.emit(validateEvent, this.envelope, email, (function(err) {\n                if (err) {\n                    return callback(new Error(err.SMTPResponse || localErrorMessage));\n                }\n                return callback();\n            }).bind(this));\n        } else {\n            return callback();\n        }\n    };\n\n    var validateViaDNS = function() {\n        dnslib.resolveMx(domain, (function(err, addresses) {\n            if (err || !addresses || !addresses.length) {\n                this.server.emit(validationFailedEvent, email);\n                return callback(new Error(err && err.SMTPResponse || dnsErrorMessage));\n            }\n            validateViaLocal.call(this);\n        }).bind(this));\n    };\n\n    if (!this.server.options.disableDNSValidation) {\n        validateViaDNS.call(this);\n    } else {\n        return validateViaLocal.call(this);\n    }\n};\n\n/**\n * <p>Switch to data mode and starts waiting for a binary data stream. Emits\n * <code>'startData'</code>.</p>\n *\n * <p>If <code>RCPT</code> is not yet run, stop</p>\n */\nSMTPServerConnection.prototype._onCommandDATA = function() {\n\n    if (!this.envelope.to.length) {\n        return this.client.send('503 5.5.1 Error: need RCPT command');\n    }\n\n    this.client.startDataMode();\n    this.client.send('354 End data with <CR><LF>.<CR><LF>');\n    this.server.emit('startData', this.envelope);\n};\n\n/**\n * <p>Resets the current state - e-mail data and authentication info</p>\n */\nSMTPServerConnection.prototype._onCommandRSET = function() {\n    this.init();\n    this.client.send('250 2.0.0 Ok');\n};\n\n/**\n * <p>If the server is in secure connection mode, start the authentication\n * process. Param <code>payload</code> defines the authentication mechanism.</p>\n *\n * <p>Currently supported - PLAIN and LOGIN. There is no need for more\n * complicated mechanisms (different CRAM versions etc.) since authentication\n * is only done in secure connection mode</p>\n *\n * @param {Buffer} payload Defines the authentication mechanism\n */\nSMTPServerConnection.prototype._onCommandAUTH = function(payload) {\n    var method;\n\n    if (!this.server.options.requireAuthentication && !this.server.options.enableAuthentication) {\n        return this.client.send('503 5.5.1 Error: authentication not enabled');\n    }\n\n    if (!this.server.options.ignoreTLS && !this.client.secureConnection) {\n        return this.client.send('530 5.7.0 Must issue a STARTTLS command first');\n    }\n\n    if (this.authentication.authenticated) {\n        return this.client.send('503 5.7.0 No identity changes permitted');\n    }\n\n    payload = payload.toString('utf-8').trim().split(' ');\n    method = payload.shift().trim().toUpperCase();\n\n    if (this.server.options.authMethods.indexOf(method) < 0) {\n        return this.client.send('535 5.7.8 Error: authentication failed: no mechanism available');\n    }\n\n    switch (method) {\n        case 'PLAIN':\n            this._handleAuthPlain(payload);\n            break;\n        case 'XOAUTH2':\n            this._handleAuthXOAuth2(payload);\n            break;\n        case 'LOGIN':\n            var username = payload.shift();\n            if (username) {\n                username = username.trim();\n                this.authentication.state = 'AUTHENTICATING';\n            }\n            this._handleAuthLogin(username);\n            break;\n    }\n};\n\n/**\n * <p>Upgrade the connection to a secure TLS connection</p>\n */\nSMTPServerConnection.prototype._onCommandSTARTTLS = function() {\n    if(this.server.options.disableSTARTTLS) {\n        return this.client.send('502 5.5.2 Error: command not recognized');\n    }\n    if (this.client.secureConnection) {\n        return this.client.send('554 5.5.1 Error: TLS already active');\n    }\n\n    this.client.send('220 2.0.0 Ready to start TLS');\n\n    this.client.startTLS(this.server.options.credentials, (function() {\n        // Connection secured\n        // nothing to do here, since it is the client that should\n        // make the next move\n    }).bind(this));\n};\n\n/**\n * <p>Retrieve hostname from the client. Not very important, since client\n * IP is already known and the client can send fake data</p>\n *\n * @param {String} host Hostname of the client\n */\nSMTPServerConnection.prototype._onCommandHELO = function(host) {\n    if (!host) {\n        return this.client.send('501 Syntax: EHLO hostname');\n    } else {\n        this.hostNameAppearsAs = host;\n        this.envelope.host = host;\n    }\n    this.client.send('250 ' + this.server.options.name + ' at your service, [' +\n        this.client.remoteAddress + ']');\n};\n\n/**\n * <p>Retrieve hostname from the client. Not very important, since client\n * IP is already known and the client can send fake data</p>\n *\n * <p>Additionally displays server capability list to the client</p>\n *\n * @param {String} host Hostname of the client\n */\nSMTPServerConnection.prototype._onCommandEHLO = function(host) {\n    var response = [this.server.options.name + ' at your service, [' +\n        this.client.remoteAddress + ']', '8BITMIME', 'ENHANCEDSTATUSCODES'\n    ];\n\n    if (this.server.options.maxSize) {\n        response.push('SIZE ' + this.server.options.maxSize);\n    }\n\n    if ((this.client.secureConnection || this.server.options.ignoreTLS) && (this.server.options.requireAuthentication || this.server.options.enableAuthentication)) {\n        response.push('AUTH ' + this.server.options.authMethods.join(' '));\n        response.push('AUTH=' + this.server.options.authMethods.join(' '));\n    }\n\n    if (!this.client.secureConnection && !this.server.options.disableSTARTTLS) {\n        response.push('STARTTLS');\n    }\n\n    if (!host) {\n        return this.client.send('501 Syntax: EHLO hostname');\n    } else {\n        this.hostNameAppearsAs = host;\n        this.envelope.host = host;\n    }\n\n    this.client.send(response.map(function(feature, i, arr) {\n        return '250' + (i < arr.length - 1 ? '-' : ' ') + feature;\n    }).join('\\r\\n'));\n};\n\n/**\n * <p>No operation. Just returns OK.</p>\n */\nSMTPServerConnection.prototype._onCommandNOOP = function() {\n    this.client.send('250 OK');\n};\n\n/**\n * <p>Detect login information from the payload and initiate authentication\n * by emitting <code>'authorizeUser'</code> and waiting for its callback</p>\n *\n * @param {Buffer} payload AUTH PLAIN login information\n */\nSMTPServerConnection.prototype._handleAuthPlain = function(payload) {\n    if (payload.length) {\n        var userdata = new Buffer(payload.join(' '), 'base64'),\n            password;\n        userdata = userdata.toString('utf-8').split('\\u0000');\n\n        if (userdata.length != 3) {\n            return this.client.send('500 5.5.2 Error: invalid userdata to decode');\n        }\n\n        this.authentication.username = userdata[1] || userdata[0] || '';\n        password = userdata[2] || '';\n\n        this.server.emit('authorizeUser',\n            this.envelope,\n            this.authentication.username,\n            password, (function(err, success) {\n                if (err || !success) {\n                    this.authentication.authenticated = false;\n                    this.authentication.username = false;\n                    this.authentication.state = 'NORMAL';\n                    return this.client.send('535 5.7.8 Error: authentication failed: generic failure');\n                }\n                this.client.send('235 2.7.0 Authentication successful');\n                this.authentication.authenticated = true;\n                this.authentication.state = 'AUTHENTICATED';\n            }).bind(this));\n    } else {\n        if (this.authentication.state == 'NORMAL') {\n            this.authentication.state = 'AUTHPLAINUSERDATA';\n            this.client.send('334');\n        }\n    }\n};\n\n/**\n * <p>Sets authorization state to 'AUTHENTICATING' and reuqests for the\n * username and password from the client</p>\n *\n * <p>If username and password are set initiate authentication\n * by emitting <code>'authorizeUser'</code> and waiting for its callback</p>\n *\n * @param {Buffer} payload AUTH LOGIN login information\n */\nSMTPServerConnection.prototype._handleAuthLogin = function(payload) {\n    if (this.authentication.state == 'NORMAL') {\n        this.authentication.state = 'AUTHENTICATING';\n        this.client.send('334 VXNlcm5hbWU6');\n    } else if (this.authentication.state == 'AUTHENTICATING') {\n        if (this.authentication.username === false) {\n            this.authentication.username = new Buffer(payload, 'base64').toString('utf-8');\n            this.client.send('334 UGFzc3dvcmQ6');\n        } else {\n            this.authentication.state = 'VERIFYING';\n            this.server.emit('authorizeUser',\n                this.envelope,\n                this.authentication.username,\n                new Buffer(payload, 'base64').toString('utf-8'), (function(err, success) {\n                    if (err || !success) {\n                        this.authentication.authenticated = false;\n                        this.authentication.username = false;\n                        this.authentication.state = 'NORMAL';\n                        return this.client.send('535 5.7.8 Error: authentication failed: generic failure');\n                    }\n                    this.client.send('235 2.7.0 Authentication successful');\n                    this.authentication.authenticated = true;\n                    this.authentication.state = 'AUTHENTICATED';\n                }).bind(this));\n        }\n\n    }\n};\n\n/**\n * <p>Detect login information from the payload and initiate authentication\n * by emitting <code>'authorizeUser'</code> and waiting for its callback</p>\n *\n * @param {Buffer} payload AUTH XOAUTH2 login information\n */\nSMTPServerConnection.prototype._handleAuthXOAuth2 = function(payload) {\n    if (this.authentication.state == 'AUTHXOAUTH2') {\n        // empty response from the client\n        this.authentication.authenticated = false;\n        this.authentication.username = false;\n        this.authentication.state = 'NORMAL';\n        return this.client.send('535 5.7.1 Username and Password not accepted');\n    }\n\n    var userdata = new Buffer(payload.join(' '), 'base64'),\n        token;\n    userdata = userdata.toString('utf-8').split('\\x01');\n\n    if (userdata.length != 4) {\n        return this.client.send('500 5.5.2 Error: invalid userdata to decode');\n    }\n\n    this.authentication.username = userdata[0].substr(5) || '';\n    token = userdata[1].split(' ')[1] || '';\n\n    this.server.emit('authorizeUser',\n        this.envelope,\n        this.authentication.username,\n        token, (function(err, success) {\n            if (err || !success) {\n                this.authentication.state = 'AUTHXOAUTH2';\n                return this.client.send('334 eyJzdGF0dXMiOiI0MDEiLCJzY2hlbWVzIjoiYmVhcmVyIG1hYyIsInNjb3BlIjoiaHR0cHM6Ly9tYWlsLmdvb2dsZS5jb20vIn0K');\n            }\n            this.client.send('235 2.7.0 Authentication successful');\n            this.authentication.authenticated = true;\n            this.authentication.state = 'AUTHENTICATED';\n        }).bind(this));\n};\n\n/**\n * <p>Emits the data received from the client with <code>'data'</code>\n *\n * @event\n * @param {Buffer} chunk Binary data sent by the client on data mode\n */\nSMTPServerConnection.prototype._onData = function(chunk) {\n    this.server.emit('data', this.envelope, chunk);\n};\n\n/**\n * <p>If the data stream ends, emit <code>'dataReady'</code>and wait for\n * the callback, only if server listened for it.</p>\n *\n * @event\n */\nSMTPServerConnection.prototype._onDataReady = function() {\n    if (this.server.listeners('dataReady').length) {\n        this.server.emit('dataReady', this.envelope, (function(err, code) {\n            this.init(true); //reset state, keep auth data\n\n            if (err) {\n                this.client.send(err && err.SMTPResponse || ('550 ' + (err && err.message || 'FAILED')));\n            } else {\n                this.client.send('250 2.0.0 Ok: queued as ' + (code || crypto.randomBytes(10).toString('hex')));\n            }\n\n        }).bind(this));\n    } else {\n        this.init(true); //reset state, keep auth data\n        this.client.send('250 2.0.0 Ok: queued as ' + crypto.randomBytes(10).toString('hex'));\n    }\n};"]},"metadata":{},"sourceType":"script"}
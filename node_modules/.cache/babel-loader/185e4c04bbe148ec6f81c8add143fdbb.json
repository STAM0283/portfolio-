{"ast":null,"code":"var util = require('../util');\n\nvar JsonBuilder = require('../json/builder');\n\nvar JsonParser = require('../json/parser');\n\nfunction buildRequest(req) {\n  var httpRequest = req.httpRequest;\n  var api = req.service.api;\n  var target = api.targetPrefix + '.' + api.operations[req.operation].name;\n  var version = api.jsonVersion || '1.0';\n  var input = api.operations[req.operation].input;\n  var builder = new JsonBuilder();\n  if (version === 1) version = '1.0';\n  httpRequest.body = builder.build(req.params || {}, input);\n  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;\n  httpRequest.headers['X-Amz-Target'] = target;\n}\n\nfunction extractError(resp) {\n  var error = {};\n  var httpResponse = resp.httpResponse;\n\n  if (httpResponse.body.length > 0) {\n    var e = JSON.parse(httpResponse.body.toString());\n\n    if (e.__type || e.code) {\n      error.code = (e.__type || e.code).split('#').pop();\n    } else {\n      error.code = 'UnknownError';\n    }\n\n    if (error.code === 'RequestEntityTooLarge') {\n      error.message = 'Request body must be less than 1 MB';\n    } else {\n      error.message = e.message || e.Message || null;\n    }\n  } else {\n    error.code = httpResponse.statusCode;\n    error.message = null;\n  }\n\n  resp.error = util.error(new Error(), error);\n}\n\nfunction extractData(resp) {\n  var body = resp.httpResponse.body.toString() || '{}';\n\n  if (resp.request.service.config.convertResponseTypes === false) {\n    resp.data = JSON.parse(body);\n  } else {\n    var operation = resp.request.service.api.operations[resp.request.operation];\n    var shape = operation.output || {};\n    var parser = new JsonParser();\n    resp.data = parser.parse(body, shape);\n  }\n}\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/protocol/json.js"],"names":["util","require","JsonBuilder","JsonParser","buildRequest","req","httpRequest","api","service","target","targetPrefix","operations","operation","name","version","jsonVersion","input","builder","body","build","params","headers","extractError","resp","error","httpResponse","length","e","JSON","parse","toString","__type","code","split","pop","message","Message","statusCode","Error","extractData","request","config","convertResponseTypes","data","shape","output","parser","module","exports"],"mappings":"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","sourcesContent":["var util = require('../util');\nvar JsonBuilder = require('../json/builder');\nvar JsonParser = require('../json/parser');\n\nfunction buildRequest(req) {\n  var httpRequest = req.httpRequest;\n  var api = req.service.api;\n  var target = api.targetPrefix + '.' + api.operations[req.operation].name;\n  var version = api.jsonVersion || '1.0';\n  var input = api.operations[req.operation].input;\n  var builder = new JsonBuilder();\n\n  if (version === 1) version = '1.0';\n  httpRequest.body = builder.build(req.params || {}, input);\n  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;\n  httpRequest.headers['X-Amz-Target'] = target;\n}\n\nfunction extractError(resp) {\n  var error = {};\n  var httpResponse = resp.httpResponse;\n\n  if (httpResponse.body.length > 0) {\n    var e = JSON.parse(httpResponse.body.toString());\n    if (e.__type || e.code) {\n      error.code = (e.__type || e.code).split('#').pop();\n    } else {\n      error.code = 'UnknownError';\n    }\n    if (error.code === 'RequestEntityTooLarge') {\n      error.message = 'Request body must be less than 1 MB';\n    } else {\n      error.message = (e.message || e.Message || null);\n    }\n  } else {\n    error.code = httpResponse.statusCode;\n    error.message = null;\n  }\n\n  resp.error = util.error(new Error(), error);\n}\n\nfunction extractData(resp) {\n  var body = resp.httpResponse.body.toString() || '{}';\n  if (resp.request.service.config.convertResponseTypes === false) {\n    resp.data = JSON.parse(body);\n  } else {\n    var operation = resp.request.service.api.operations[resp.request.operation];\n    var shape = operation.output || {};\n    var parser = new JsonParser();\n    resp.data = parser.parse(body, shape);\n  }\n}\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"]},"metadata":{},"sourceType":"script"}
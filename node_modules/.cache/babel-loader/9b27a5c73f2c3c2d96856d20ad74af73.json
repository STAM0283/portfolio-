{"ast":null,"code":"var utils = require('./utils'),\n    dateFormatter = require('./dateformatter');\n/**\n * Helper method to recursively run a filter across an object/array and apply it to all of the object/array's values.\n * @param  {*} input\n * @return {*}\n * @private\n */\n\n\nfunction iterateFilter(input) {\n  var self = this,\n      out = {};\n\n  if (utils.isArray(input)) {\n    return utils.map(input, function (value) {\n      return self.apply(null, arguments);\n    });\n  }\n\n  if (typeof input === 'object') {\n    utils.each(input, function (value, key) {\n      out[key] = self.apply(null, arguments);\n    });\n    return out;\n  }\n\n  return;\n}\n/**\n * Backslash-escape characters that need to be escaped.\n *\n * @example\n * {{ \"\\\"quoted string\\\"\"|addslashes }}\n * // => \\\"quoted string\\\"\n *\n * @param  {*}  input\n * @return {*}        Backslash-escaped string.\n */\n\n\nexports.addslashes = function (input) {\n  var out = iterateFilter.apply(exports.addslashes, arguments);\n\n  if (out !== undefined) {\n    return out;\n  }\n\n  return input.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\").replace(/\\\"/g, '\\\\\"');\n};\n/**\n * Upper-case the first letter of the input and lower-case the rest.\n *\n * @example\n * {{ \"i like Burritos\"|capitalize }}\n * // => I like burritos\n *\n * @param  {*} input  If given an array or object, each string member will be run through the filter individually.\n * @return {*}        Returns the same type as the input.\n */\n\n\nexports.capitalize = function (input) {\n  var out = iterateFilter.apply(exports.capitalize, arguments);\n\n  if (out !== undefined) {\n    return out;\n  }\n\n  return input.toString().charAt(0).toUpperCase() + input.toString().substr(1).toLowerCase();\n};\n/**\n * Format a date or Date-compatible string.\n *\n * @example\n * // now = new Date();\n * {{ now|date('Y-m-d') }}\n * // => 2013-08-14\n * @example\n * // now = new Date();\n * {{ now|date('jS \\o\\f F') }}\n * // => 4th of July\n *\n * @param  {?(string|date)}   input\n * @param  {string}           format  PHP-style date format compatible string. Escape characters with <code>\\</code> for string literals.\n * @param  {number=}          offset  Timezone offset from GMT in minutes.\n * @param  {string=}          abbr    Timezone abbreviation. Used for output only.\n * @return {string}                   Formatted date string.\n */\n\n\nexports.date = function (input, format, offset, abbr) {\n  var l = format.length,\n      date = new dateFormatter.DateZ(input),\n      cur,\n      i = 0,\n      out = '';\n\n  if (offset) {\n    date.setTimezoneOffset(offset, abbr);\n  }\n\n  for (i; i < l; i += 1) {\n    cur = format.charAt(i);\n\n    if (cur === '\\\\') {\n      i += 1;\n      out += i < l ? format.charAt(i) : cur;\n    } else if (dateFormatter.hasOwnProperty(cur)) {\n      out += dateFormatter[cur](date, offset, abbr);\n    } else {\n      out += cur;\n    }\n  }\n\n  return out;\n};\n/**\n * If the input is `undefined`, `null`, or `false`, a default return value can be specified.\n *\n * @example\n * {{ null_value|default('Tacos') }}\n * // => Tacos\n *\n * @example\n * {{ \"Burritos\"|default(\"Tacos\") }}\n * // => Burritos\n *\n * @param  {*}  input\n * @param  {*}  def     Value to return if `input` is `undefined`, `null`, or `false`.\n * @return {*}          `input` or `def` value.\n */\n\n\nexports[\"default\"] = function (input, def) {\n  return typeof input !== 'undefined' && (input || typeof input === 'number') ? input : def;\n};\n/**\n * Force escape the output of the variable. Optionally use `e` as a shortcut filter name. This filter will be applied by default if autoescape is turned on.\n *\n * @example\n * {{ \"<blah>\"|escape }}\n * // => &lt;blah&gt;\n *\n * @example\n * {{ \"<blah>\"|e(\"js\") }}\n * // => \\u003Cblah\\u003E\n *\n * @param  {*} input\n * @param  {string} [type='html']   If you pass the string js in as the type, output will be escaped so that it is safe for JavaScript execution.\n * @return {string}         Escaped string.\n */\n\n\nexports.escape = function (input, type) {\n  var out = iterateFilter.apply(exports.escape, arguments),\n      inp = input,\n      i = 0,\n      code;\n\n  if (out !== undefined) {\n    return out;\n  }\n\n  if (typeof input !== 'string') {\n    return input;\n  }\n\n  out = '';\n\n  switch (type) {\n    case 'js':\n      inp = inp.replace(/\\\\/g, '\\\\u005C');\n\n      for (i; i < inp.length; i += 1) {\n        code = inp.charCodeAt(i);\n\n        if (code < 32) {\n          code = code.toString(16).toUpperCase();\n          code = code.length < 2 ? '0' + code : code;\n          out += '\\\\u00' + code;\n        } else {\n          out += inp[i];\n        }\n      }\n\n      return out.replace(/&/g, '\\\\u0026').replace(/</g, '\\\\u003C').replace(/>/g, '\\\\u003E').replace(/\\'/g, '\\\\u0027').replace(/\"/g, '\\\\u0022').replace(/\\=/g, '\\\\u003D').replace(/-/g, '\\\\u002D').replace(/;/g, '\\\\u003B');\n\n    default:\n      return inp.replace(/&(?!amp;|lt;|gt;|quot;|#39;)/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;');\n  }\n};\n\nexports.e = exports.escape;\n/**\n * Get the first item in an array or character in a string. All other objects will attempt to return the first value available.\n *\n * @example\n * // my_arr = ['a', 'b', 'c']\n * {{ my_arr|first }}\n * // => a\n *\n * @example\n * // my_val = 'Tacos'\n * {{ my_val|first }}\n * // T\n *\n * @param  {*} input\n * @return {*}        The first item of the array or first character of the string input.\n */\n\nexports.first = function (input) {\n  if (typeof input === 'object' && !utils.isArray(input)) {\n    var keys = utils.keys(input);\n    return input[keys[0]];\n  }\n\n  if (typeof input === 'string') {\n    return input.substr(0, 1);\n  }\n\n  return input[0];\n};\n/**\n * Group an array of objects by a common key. If an array is not provided, the input value will be returned untouched.\n *\n * @example\n * // people = [{ age: 23, name: 'Paul' }, { age: 26, name: 'Jane' }, { age: 23, name: 'Jim' }];\n * {% for agegroup in people|groupBy('age') %}\n *   <h2>{{ loop.key }}</h2>\n *   <ul>\n *     {% for person in agegroup %}\n *     <li>{{ person.name }}</li>\n *     {% endfor %}\n *   </ul>\n * {% endfor %}\n *\n * @param  {*}      input Input object.\n * @param  {string} key   Key to group by.\n * @return {object}       Grouped arrays by given key.\n */\n\n\nexports.groupBy = function (input, key) {\n  if (!utils.isArray(input)) {\n    return input;\n  }\n\n  var out = {};\n  utils.each(input, function (value) {\n    if (!value.hasOwnProperty(key)) {\n      return;\n    }\n\n    var keyname = value[key],\n        newVal = utils.extend({}, value);\n    delete value[key];\n\n    if (!out[keyname]) {\n      out[keyname] = [];\n    }\n\n    out[keyname].push(value);\n  });\n  return out;\n};\n/**\n * Join the input with a string.\n *\n * @example\n * // my_array = ['foo', 'bar', 'baz']\n * {{ my_array|join(', ') }}\n * // => foo, bar, baz\n *\n * @example\n * // my_key_object = { a: 'foo', b: 'bar', c: 'baz' }\n * {{ my_key_object|join(' and ') }}\n * // => foo and bar and baz\n *\n * @param  {*}  input\n * @param  {string} glue    String value to join items together.\n * @return {string}\n */\n\n\nexports.join = function (input, glue) {\n  if (utils.isArray(input)) {\n    return input.join(glue);\n  }\n\n  if (typeof input === 'object') {\n    var out = [];\n    utils.each(input, function (value) {\n      out.push(value);\n    });\n    return out.join(glue);\n  }\n\n  return input;\n};\n/**\n * Return a string representation of an JavaScript object.\n *\n * Backwards compatible with swig@0.x.x using `json_encode`.\n *\n * @example\n * // val = { a: 'b' }\n * {{ val|json }}\n * // => {\"a\":\"b\"}\n *\n * @example\n * // val = { a: 'b' }\n * {{ val|json(4) }}\n * // => {\n * //        \"a\": \"b\"\n * //    }\n *\n * @param  {*}    input\n * @param  {number}  [indent]  Number of spaces to indent for pretty-formatting.\n * @return {string}           A valid JSON string.\n */\n\n\nexports.json = function (input, indent) {\n  return JSON.stringify(input, null, indent || 0);\n};\n\nexports.json_encode = exports.json;\n/**\n * Get the last item in an array or character in a string. All other objects will attempt to return the last value available.\n *\n * @example\n * // my_arr = ['a', 'b', 'c']\n * {{ my_arr|last }}\n * // => c\n *\n * @example\n * // my_val = 'Tacos'\n * {{ my_val|last }}\n * // s\n *\n * @param  {*} input\n * @return {*}          The last item of the array or last character of the string.input.\n */\n\nexports.last = function (input) {\n  if (typeof input === 'object' && !utils.isArray(input)) {\n    var keys = utils.keys(input);\n    return input[keys[keys.length - 1]];\n  }\n\n  if (typeof input === 'string') {\n    return input.charAt(input.length - 1);\n  }\n\n  return input[input.length - 1];\n};\n/**\n * Return the input in all lowercase letters.\n *\n * @example\n * {{ \"FOOBAR\"|lower }}\n * // => foobar\n *\n * @example\n * // myObj = { a: 'FOO', b: 'BAR' }\n * {{ myObj|lower|join('') }}\n * // => foobar\n *\n * @param  {*}  input\n * @return {*}          Returns the same type as the input.\n */\n\n\nexports.lower = function (input) {\n  var out = iterateFilter.apply(exports.lower, arguments);\n\n  if (out !== undefined) {\n    return out;\n  }\n\n  return input.toString().toLowerCase();\n};\n/**\n * Deprecated in favor of <a href=\"#safe\">safe</a>.\n */\n\n\nexports.raw = function (input) {\n  return exports.safe(input);\n};\n\nexports.raw.safe = true;\n/**\n * Returns a new string with the matched search pattern replaced by the given replacement string. Uses JavaScript's built-in String.replace() method.\n *\n * @example\n * // my_var = 'foobar';\n * {{ my_var|replace('o', 'e', 'g') }}\n * // => feebar\n *\n * @example\n * // my_var = \"farfegnugen\";\n * {{ my_var|replace('^f', 'p') }}\n * // => parfegnugen\n *\n * @example\n * // my_var = 'a1b2c3';\n * {{ my_var|replace('\\w', '0', 'g') }}\n * // => 010203\n *\n * @param  {string} input\n * @param  {string} search      String or pattern to replace from the input.\n * @param  {string} replacement String to replace matched pattern.\n * @param  {string} [flags]      Regular Expression flags. 'g': global match, 'i': ignore case, 'm': match over multiple lines\n * @return {string}             Replaced string.\n */\n\nexports.replace = function (input, search, replacement, flags) {\n  var r = new RegExp(search, flags);\n  return input.replace(r, replacement);\n};\n/**\n * Reverse sort the input. This is an alias for <code data-language=\"swig\">{{ input|sort(true) }}</code>.\n *\n * @example\n * // val = [1, 2, 3];\n * {{ val|reverse }}\n * // => 3,2,1\n *\n * @param  {array}  input\n * @return {array}        Reversed array. The original input object is returned if it was not an array.\n */\n\n\nexports.reverse = function (input) {\n  return exports.sort(input, true);\n};\n/**\n * Forces the input to not be auto-escaped. Use this only on content that you know is safe to be rendered on your page.\n *\n * @example\n * // my_var = \"<p>Stuff</p>\";\n * {{ my_var|safe }}\n * // => <p>Stuff</p>\n *\n * @param  {*}  input\n * @return {*}          The input exactly how it was given, regardless of autoescaping status.\n */\n\n\nexports.safe = function (input) {\n  // This is a magic filter. Its logic is hard-coded into Swig's parser.\n  return input;\n};\n\nexports.safe.safe = true;\n/**\n * Sort the input in an ascending direction.\n * If given an object, will return the keys as a sorted array.\n * If given a string, each character will be sorted individually.\n *\n * @example\n * // val = [2, 6, 4];\n * {{ val|sort }}\n * // => 2,4,6\n *\n * @example\n * // val = 'zaq';\n * {{ val|sort }}\n * // => aqz\n *\n * @example\n * // val = { bar: 1, foo: 2 }\n * {{ val|sort(true) }}\n * // => foo,bar\n *\n * @param  {*} input\n * @param {boolean} [reverse=false] Output is given reverse-sorted if true.\n * @return {*}        Sorted array;\n */\n\nexports.sort = function (input, reverse) {\n  var out;\n\n  if (utils.isArray(input)) {\n    out = input.sort();\n  } else {\n    switch (typeof input) {\n      case 'object':\n        out = utils.keys(input).sort();\n        break;\n\n      case 'string':\n        out = input.split('');\n\n        if (reverse) {\n          return out.reverse().join('');\n        }\n\n        return out.sort().join('');\n    }\n  }\n\n  if (out && reverse) {\n    return out.reverse();\n  }\n\n  return out || input;\n};\n/**\n * Strip HTML tags.\n *\n * @example\n * // stuff = '<p>foobar</p>';\n * {{ stuff|striptags }}\n * // => foobar\n *\n * @param  {*}  input\n * @return {*}        Returns the same object as the input, but with all string values stripped of tags.\n */\n\n\nexports.striptags = function (input) {\n  var out = iterateFilter.apply(exports.striptags, arguments);\n\n  if (out !== undefined) {\n    return out;\n  }\n\n  return input.toString().replace(/(<([^>]+)>)/ig, '');\n};\n/**\n * Capitalizes every word given and lower-cases all other letters.\n *\n * @example\n * // my_str = 'this is soMe text';\n * {{ my_str|title }}\n * // => This Is Some Text\n *\n * @example\n * // my_arr = ['hi', 'this', 'is', 'an', 'array'];\n * {{ my_arr|title|join(' ') }}\n * // => Hi This Is An Array\n *\n * @param  {*}  input\n * @return {*}        Returns the same object as the input, but with all words in strings title-cased.\n */\n\n\nexports.title = function (input) {\n  var out = iterateFilter.apply(exports.title, arguments);\n\n  if (out !== undefined) {\n    return out;\n  }\n\n  return input.toString().replace(/\\w\\S*/g, function (str) {\n    return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();\n  });\n};\n/**\n * Remove all duplicate items from an array.\n *\n * @example\n * // my_arr = [1, 2, 3, 4, 4, 3, 2, 1];\n * {{ my_arr|uniq|join(',') }}\n * // => 1,2,3,4\n *\n * @param  {array}  input\n * @return {array}        Array with unique items. If input was not an array, the original item is returned untouched.\n */\n\n\nexports.uniq = function (input) {\n  var result;\n\n  if (!input || !utils.isArray(input)) {\n    return '';\n  }\n\n  result = [];\n  utils.each(input, function (v) {\n    if (result.indexOf(v) === -1) {\n      result.push(v);\n    }\n  });\n  return result;\n};\n/**\n * Convert the input to all uppercase letters. If an object or array is provided, all values will be uppercased.\n *\n * @example\n * // my_str = 'tacos';\n * {{ my_str|upper }}\n * // => TACOS\n *\n * @example\n * // my_arr = ['tacos', 'burritos'];\n * {{ my_arr|upper|join(' & ') }}\n * // => TACOS & BURRITOS\n *\n * @param  {*}  input\n * @return {*}        Returns the same type as the input, with all strings upper-cased.\n */\n\n\nexports.upper = function (input) {\n  var out = iterateFilter.apply(exports.upper, arguments);\n\n  if (out !== undefined) {\n    return out;\n  }\n\n  return input.toString().toUpperCase();\n};\n/**\n * URL-encode a string. If an object or array is passed, all values will be URL-encoded.\n *\n * @example\n * // my_str = 'param=1&anotherParam=2';\n * {{ my_str|url_encode }}\n * // => param%3D1%26anotherParam%3D2\n *\n * @param  {*} input\n * @return {*}       URL-encoded string.\n */\n\n\nexports.url_encode = function (input) {\n  var out = iterateFilter.apply(exports.url_encode, arguments);\n\n  if (out !== undefined) {\n    return out;\n  }\n\n  return encodeURIComponent(input);\n};\n/**\n * URL-decode a string. If an object or array is passed, all values will be URL-decoded.\n *\n * @example\n * // my_str = 'param%3D1%26anotherParam%3D2';\n * {{ my_str|url_decode }}\n * // => param=1&anotherParam=2\n *\n * @param  {*} input\n * @return {*}       URL-decoded string.\n */\n\n\nexports.url_decode = function (input) {\n  var out = iterateFilter.apply(exports.url_decode, arguments);\n\n  if (out !== undefined) {\n    return out;\n  }\n\n  return decodeURIComponent(input);\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/swig/lib/filters.js"],"names":["utils","require","dateFormatter","iterateFilter","input","self","out","isArray","map","value","apply","arguments","each","key","exports","addslashes","undefined","replace","capitalize","toString","charAt","toUpperCase","substr","toLowerCase","date","format","offset","abbr","l","length","DateZ","cur","i","setTimezoneOffset","hasOwnProperty","def","escape","type","inp","code","charCodeAt","e","first","keys","groupBy","keyname","newVal","extend","push","join","glue","json","indent","JSON","stringify","json_encode","last","lower","raw","safe","search","replacement","flags","r","RegExp","reverse","sort","split","striptags","title","str","uniq","result","v","indexOf","upper","url_encode","encodeURIComponent","url_decode","decodeURIComponent"],"mappings":"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","sourcesContent":["var utils = require('./utils'),\n  dateFormatter = require('./dateformatter');\n\n/**\n * Helper method to recursively run a filter across an object/array and apply it to all of the object/array's values.\n * @param  {*} input\n * @return {*}\n * @private\n */\nfunction iterateFilter(input) {\n  var self = this,\n    out = {};\n\n  if (utils.isArray(input)) {\n    return utils.map(input, function (value) {\n      return self.apply(null, arguments);\n    });\n  }\n\n  if (typeof input === 'object') {\n    utils.each(input, function (value, key) {\n      out[key] = self.apply(null, arguments);\n    });\n    return out;\n  }\n\n  return;\n}\n\n/**\n * Backslash-escape characters that need to be escaped.\n *\n * @example\n * {{ \"\\\"quoted string\\\"\"|addslashes }}\n * // => \\\"quoted string\\\"\n *\n * @param  {*}  input\n * @return {*}        Backslash-escaped string.\n */\nexports.addslashes = function (input) {\n  var out = iterateFilter.apply(exports.addslashes, arguments);\n  if (out !== undefined) {\n    return out;\n  }\n\n  return input.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\").replace(/\\\"/g, '\\\\\"');\n};\n\n/**\n * Upper-case the first letter of the input and lower-case the rest.\n *\n * @example\n * {{ \"i like Burritos\"|capitalize }}\n * // => I like burritos\n *\n * @param  {*} input  If given an array or object, each string member will be run through the filter individually.\n * @return {*}        Returns the same type as the input.\n */\nexports.capitalize = function (input) {\n  var out = iterateFilter.apply(exports.capitalize, arguments);\n  if (out !== undefined) {\n    return out;\n  }\n\n  return input.toString().charAt(0).toUpperCase() + input.toString().substr(1).toLowerCase();\n};\n\n/**\n * Format a date or Date-compatible string.\n *\n * @example\n * // now = new Date();\n * {{ now|date('Y-m-d') }}\n * // => 2013-08-14\n * @example\n * // now = new Date();\n * {{ now|date('jS \\o\\f F') }}\n * // => 4th of July\n *\n * @param  {?(string|date)}   input\n * @param  {string}           format  PHP-style date format compatible string. Escape characters with <code>\\</code> for string literals.\n * @param  {number=}          offset  Timezone offset from GMT in minutes.\n * @param  {string=}          abbr    Timezone abbreviation. Used for output only.\n * @return {string}                   Formatted date string.\n */\nexports.date = function (input, format, offset, abbr) {\n  var l = format.length,\n    date = new dateFormatter.DateZ(input),\n    cur,\n    i = 0,\n    out = '';\n\n  if (offset) {\n    date.setTimezoneOffset(offset, abbr);\n  }\n\n  for (i; i < l; i += 1) {\n    cur = format.charAt(i);\n    if (cur === '\\\\') {\n      i += 1;\n      out += (i < l) ? format.charAt(i) : cur;\n    } else if (dateFormatter.hasOwnProperty(cur)) {\n      out += dateFormatter[cur](date, offset, abbr);\n    } else {\n      out += cur;\n    }\n  }\n  return out;\n};\n\n/**\n * If the input is `undefined`, `null`, or `false`, a default return value can be specified.\n *\n * @example\n * {{ null_value|default('Tacos') }}\n * // => Tacos\n *\n * @example\n * {{ \"Burritos\"|default(\"Tacos\") }}\n * // => Burritos\n *\n * @param  {*}  input\n * @param  {*}  def     Value to return if `input` is `undefined`, `null`, or `false`.\n * @return {*}          `input` or `def` value.\n */\nexports[\"default\"] = function (input, def) {\n  return (typeof input !== 'undefined' && (input || typeof input === 'number')) ? input : def;\n};\n\n/**\n * Force escape the output of the variable. Optionally use `e` as a shortcut filter name. This filter will be applied by default if autoescape is turned on.\n *\n * @example\n * {{ \"<blah>\"|escape }}\n * // => &lt;blah&gt;\n *\n * @example\n * {{ \"<blah>\"|e(\"js\") }}\n * // => \\u003Cblah\\u003E\n *\n * @param  {*} input\n * @param  {string} [type='html']   If you pass the string js in as the type, output will be escaped so that it is safe for JavaScript execution.\n * @return {string}         Escaped string.\n */\nexports.escape = function (input, type) {\n  var out = iterateFilter.apply(exports.escape, arguments),\n    inp = input,\n    i = 0,\n    code;\n\n  if (out !== undefined) {\n    return out;\n  }\n\n  if (typeof input !== 'string') {\n    return input;\n  }\n\n  out = '';\n\n  switch (type) {\n  case 'js':\n    inp = inp.replace(/\\\\/g, '\\\\u005C');\n    for (i; i < inp.length; i += 1) {\n      code = inp.charCodeAt(i);\n      if (code < 32) {\n        code = code.toString(16).toUpperCase();\n        code = (code.length < 2) ? '0' + code : code;\n        out += '\\\\u00' + code;\n      } else {\n        out += inp[i];\n      }\n    }\n    return out.replace(/&/g, '\\\\u0026')\n      .replace(/</g, '\\\\u003C')\n      .replace(/>/g, '\\\\u003E')\n      .replace(/\\'/g, '\\\\u0027')\n      .replace(/\"/g, '\\\\u0022')\n      .replace(/\\=/g, '\\\\u003D')\n      .replace(/-/g, '\\\\u002D')\n      .replace(/;/g, '\\\\u003B');\n\n  default:\n    return inp.replace(/&(?!amp;|lt;|gt;|quot;|#39;)/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#39;');\n  }\n};\nexports.e = exports.escape;\n\n/**\n * Get the first item in an array or character in a string. All other objects will attempt to return the first value available.\n *\n * @example\n * // my_arr = ['a', 'b', 'c']\n * {{ my_arr|first }}\n * // => a\n *\n * @example\n * // my_val = 'Tacos'\n * {{ my_val|first }}\n * // T\n *\n * @param  {*} input\n * @return {*}        The first item of the array or first character of the string input.\n */\nexports.first = function (input) {\n  if (typeof input === 'object' && !utils.isArray(input)) {\n    var keys = utils.keys(input);\n    return input[keys[0]];\n  }\n\n  if (typeof input === 'string') {\n    return input.substr(0, 1);\n  }\n\n  return input[0];\n};\n\n/**\n * Group an array of objects by a common key. If an array is not provided, the input value will be returned untouched.\n *\n * @example\n * // people = [{ age: 23, name: 'Paul' }, { age: 26, name: 'Jane' }, { age: 23, name: 'Jim' }];\n * {% for agegroup in people|groupBy('age') %}\n *   <h2>{{ loop.key }}</h2>\n *   <ul>\n *     {% for person in agegroup %}\n *     <li>{{ person.name }}</li>\n *     {% endfor %}\n *   </ul>\n * {% endfor %}\n *\n * @param  {*}      input Input object.\n * @param  {string} key   Key to group by.\n * @return {object}       Grouped arrays by given key.\n */\nexports.groupBy = function (input, key) {\n  if (!utils.isArray(input)) {\n    return input;\n  }\n\n  var out = {};\n\n  utils.each(input, function (value) {\n    if (!value.hasOwnProperty(key)) {\n      return;\n    }\n\n    var keyname = value[key],\n      newVal = utils.extend({}, value);\n    delete value[key];\n\n    if (!out[keyname]) {\n      out[keyname] = [];\n    }\n\n    out[keyname].push(value);\n  });\n\n  return out;\n};\n\n/**\n * Join the input with a string.\n *\n * @example\n * // my_array = ['foo', 'bar', 'baz']\n * {{ my_array|join(', ') }}\n * // => foo, bar, baz\n *\n * @example\n * // my_key_object = { a: 'foo', b: 'bar', c: 'baz' }\n * {{ my_key_object|join(' and ') }}\n * // => foo and bar and baz\n *\n * @param  {*}  input\n * @param  {string} glue    String value to join items together.\n * @return {string}\n */\nexports.join = function (input, glue) {\n  if (utils.isArray(input)) {\n    return input.join(glue);\n  }\n\n  if (typeof input === 'object') {\n    var out = [];\n    utils.each(input, function (value) {\n      out.push(value);\n    });\n    return out.join(glue);\n  }\n  return input;\n};\n\n/**\n * Return a string representation of an JavaScript object.\n *\n * Backwards compatible with swig@0.x.x using `json_encode`.\n *\n * @example\n * // val = { a: 'b' }\n * {{ val|json }}\n * // => {\"a\":\"b\"}\n *\n * @example\n * // val = { a: 'b' }\n * {{ val|json(4) }}\n * // => {\n * //        \"a\": \"b\"\n * //    }\n *\n * @param  {*}    input\n * @param  {number}  [indent]  Number of spaces to indent for pretty-formatting.\n * @return {string}           A valid JSON string.\n */\nexports.json = function (input, indent) {\n  return JSON.stringify(input, null, indent || 0);\n};\nexports.json_encode = exports.json;\n\n/**\n * Get the last item in an array or character in a string. All other objects will attempt to return the last value available.\n *\n * @example\n * // my_arr = ['a', 'b', 'c']\n * {{ my_arr|last }}\n * // => c\n *\n * @example\n * // my_val = 'Tacos'\n * {{ my_val|last }}\n * // s\n *\n * @param  {*} input\n * @return {*}          The last item of the array or last character of the string.input.\n */\nexports.last = function (input) {\n  if (typeof input === 'object' && !utils.isArray(input)) {\n    var keys = utils.keys(input);\n    return input[keys[keys.length - 1]];\n  }\n\n  if (typeof input === 'string') {\n    return input.charAt(input.length - 1);\n  }\n\n  return input[input.length - 1];\n};\n\n/**\n * Return the input in all lowercase letters.\n *\n * @example\n * {{ \"FOOBAR\"|lower }}\n * // => foobar\n *\n * @example\n * // myObj = { a: 'FOO', b: 'BAR' }\n * {{ myObj|lower|join('') }}\n * // => foobar\n *\n * @param  {*}  input\n * @return {*}          Returns the same type as the input.\n */\nexports.lower = function (input) {\n  var out = iterateFilter.apply(exports.lower, arguments);\n  if (out !== undefined) {\n    return out;\n  }\n\n  return input.toString().toLowerCase();\n};\n\n/**\n * Deprecated in favor of <a href=\"#safe\">safe</a>.\n */\nexports.raw = function (input) {\n  return exports.safe(input);\n};\nexports.raw.safe = true;\n\n/**\n * Returns a new string with the matched search pattern replaced by the given replacement string. Uses JavaScript's built-in String.replace() method.\n *\n * @example\n * // my_var = 'foobar';\n * {{ my_var|replace('o', 'e', 'g') }}\n * // => feebar\n *\n * @example\n * // my_var = \"farfegnugen\";\n * {{ my_var|replace('^f', 'p') }}\n * // => parfegnugen\n *\n * @example\n * // my_var = 'a1b2c3';\n * {{ my_var|replace('\\w', '0', 'g') }}\n * // => 010203\n *\n * @param  {string} input\n * @param  {string} search      String or pattern to replace from the input.\n * @param  {string} replacement String to replace matched pattern.\n * @param  {string} [flags]      Regular Expression flags. 'g': global match, 'i': ignore case, 'm': match over multiple lines\n * @return {string}             Replaced string.\n */\nexports.replace = function (input, search, replacement, flags) {\n  var r = new RegExp(search, flags);\n  return input.replace(r, replacement);\n};\n\n/**\n * Reverse sort the input. This is an alias for <code data-language=\"swig\">{{ input|sort(true) }}</code>.\n *\n * @example\n * // val = [1, 2, 3];\n * {{ val|reverse }}\n * // => 3,2,1\n *\n * @param  {array}  input\n * @return {array}        Reversed array. The original input object is returned if it was not an array.\n */\nexports.reverse = function (input) {\n  return exports.sort(input, true);\n};\n\n/**\n * Forces the input to not be auto-escaped. Use this only on content that you know is safe to be rendered on your page.\n *\n * @example\n * // my_var = \"<p>Stuff</p>\";\n * {{ my_var|safe }}\n * // => <p>Stuff</p>\n *\n * @param  {*}  input\n * @return {*}          The input exactly how it was given, regardless of autoescaping status.\n */\nexports.safe = function (input) {\n  // This is a magic filter. Its logic is hard-coded into Swig's parser.\n  return input;\n};\nexports.safe.safe = true;\n\n/**\n * Sort the input in an ascending direction.\n * If given an object, will return the keys as a sorted array.\n * If given a string, each character will be sorted individually.\n *\n * @example\n * // val = [2, 6, 4];\n * {{ val|sort }}\n * // => 2,4,6\n *\n * @example\n * // val = 'zaq';\n * {{ val|sort }}\n * // => aqz\n *\n * @example\n * // val = { bar: 1, foo: 2 }\n * {{ val|sort(true) }}\n * // => foo,bar\n *\n * @param  {*} input\n * @param {boolean} [reverse=false] Output is given reverse-sorted if true.\n * @return {*}        Sorted array;\n */\nexports.sort = function (input, reverse) {\n  var out;\n  if (utils.isArray(input)) {\n    out = input.sort();\n  } else {\n    switch (typeof input) {\n    case 'object':\n      out = utils.keys(input).sort();\n      break;\n    case 'string':\n      out = input.split('');\n      if (reverse) {\n        return out.reverse().join('');\n      }\n      return out.sort().join('');\n    }\n  }\n\n  if (out && reverse) {\n    return out.reverse();\n  }\n\n  return out || input;\n};\n\n/**\n * Strip HTML tags.\n *\n * @example\n * // stuff = '<p>foobar</p>';\n * {{ stuff|striptags }}\n * // => foobar\n *\n * @param  {*}  input\n * @return {*}        Returns the same object as the input, but with all string values stripped of tags.\n */\nexports.striptags = function (input) {\n  var out = iterateFilter.apply(exports.striptags, arguments);\n  if (out !== undefined) {\n    return out;\n  }\n\n  return input.toString().replace(/(<([^>]+)>)/ig, '');\n};\n\n/**\n * Capitalizes every word given and lower-cases all other letters.\n *\n * @example\n * // my_str = 'this is soMe text';\n * {{ my_str|title }}\n * // => This Is Some Text\n *\n * @example\n * // my_arr = ['hi', 'this', 'is', 'an', 'array'];\n * {{ my_arr|title|join(' ') }}\n * // => Hi This Is An Array\n *\n * @param  {*}  input\n * @return {*}        Returns the same object as the input, but with all words in strings title-cased.\n */\nexports.title = function (input) {\n  var out = iterateFilter.apply(exports.title, arguments);\n  if (out !== undefined) {\n    return out;\n  }\n\n  return input.toString().replace(/\\w\\S*/g, function (str) {\n    return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();\n  });\n};\n\n/**\n * Remove all duplicate items from an array.\n *\n * @example\n * // my_arr = [1, 2, 3, 4, 4, 3, 2, 1];\n * {{ my_arr|uniq|join(',') }}\n * // => 1,2,3,4\n *\n * @param  {array}  input\n * @return {array}        Array with unique items. If input was not an array, the original item is returned untouched.\n */\nexports.uniq = function (input) {\n  var result;\n\n  if (!input || !utils.isArray(input)) {\n    return '';\n  }\n\n  result = [];\n  utils.each(input, function (v) {\n    if (result.indexOf(v) === -1) {\n      result.push(v);\n    }\n  });\n  return result;\n};\n\n/**\n * Convert the input to all uppercase letters. If an object or array is provided, all values will be uppercased.\n *\n * @example\n * // my_str = 'tacos';\n * {{ my_str|upper }}\n * // => TACOS\n *\n * @example\n * // my_arr = ['tacos', 'burritos'];\n * {{ my_arr|upper|join(' & ') }}\n * // => TACOS & BURRITOS\n *\n * @param  {*}  input\n * @return {*}        Returns the same type as the input, with all strings upper-cased.\n */\nexports.upper = function (input) {\n  var out = iterateFilter.apply(exports.upper, arguments);\n  if (out !== undefined) {\n    return out;\n  }\n\n  return input.toString().toUpperCase();\n};\n\n/**\n * URL-encode a string. If an object or array is passed, all values will be URL-encoded.\n *\n * @example\n * // my_str = 'param=1&anotherParam=2';\n * {{ my_str|url_encode }}\n * // => param%3D1%26anotherParam%3D2\n *\n * @param  {*} input\n * @return {*}       URL-encoded string.\n */\nexports.url_encode = function (input) {\n  var out = iterateFilter.apply(exports.url_encode, arguments);\n  if (out !== undefined) {\n    return out;\n  }\n  return encodeURIComponent(input);\n};\n\n/**\n * URL-decode a string. If an object or array is passed, all values will be URL-decoded.\n *\n * @example\n * // my_str = 'param%3D1%26anotherParam%3D2';\n * {{ my_str|url_decode }}\n * // => param=1&anotherParam=2\n *\n * @param  {*} input\n * @return {*}       URL-decoded string.\n */\nexports.url_decode = function (input) {\n  var out = iterateFilter.apply(exports.url_decode, arguments);\n  if (out !== undefined) {\n    return out;\n  }\n  return decodeURIComponent(input);\n};\n"]},"metadata":{},"sourceType":"script"}
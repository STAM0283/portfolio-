{"ast":null,"code":"var util = require('../util');\n\nfunction QueryParamSerializer() {}\n\nQueryParamSerializer.prototype.serialize = function (params, shape, fn) {\n  serializeStructure('', params, shape, fn);\n};\n\nfunction serializeStructure(prefix, struct, rules, fn) {\n  util.each(rules.members, function (name, member) {\n    var value = struct[name];\n    if (value === null || value === undefined) return;\n    var memberName = prefix ? prefix + '.' + member.name : member.name;\n    serializeMember(memberName, value, member, fn);\n  });\n}\n\nfunction serializeMap(name, map, rules, fn) {\n  var i = 1;\n  util.each(map, function (key, value) {\n    var prefix = rules.flattened || rules.queryFlattened ? '.' : '.entry.';\n    var position = prefix + i++ + '.';\n    var keyName = position + (rules.key.name || 'key');\n    var valueName = position + (rules.value.name || 'value');\n    serializeMember(name + keyName, key, rules.key, fn);\n    serializeMember(name + valueName, value, rules.value, fn);\n  });\n}\n\nfunction serializeList(name, list, rules, fn) {\n  var memberRules = rules.member || {};\n\n  if (list.length === 0) {\n    fn.call(this, name, null);\n    return;\n  }\n\n  util.arrayEach(list, function (v, n) {\n    var suffix = '.' + (n + 1);\n\n    if (rules.flattened || rules.queryFlattened) {\n      if (memberRules.name) {\n        var parts = name.split('.');\n        parts.pop();\n        parts.push(memberRules.name);\n        name = parts.join('.');\n      }\n    } else {\n      suffix = '.member' + suffix;\n    }\n\n    serializeMember(name + suffix, v, memberRules, fn);\n  });\n}\n\nfunction serializeMember(name, value, rules, fn) {\n  if (value === null || value === undefined) return;\n\n  if (rules.type === 'structure') {\n    serializeStructure(name, value, rules, fn);\n  } else if (rules.type === 'list') {\n    serializeList(name, value, rules, fn);\n  } else if (rules.type === 'map') {\n    serializeMap(name, value, rules, fn);\n  } else {\n    fn(name, rules.toWireFormat(value).toString());\n  }\n}\n\nmodule.exports = QueryParamSerializer;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/query/query_param_serializer.js"],"names":["util","require","QueryParamSerializer","prototype","serialize","params","shape","fn","serializeStructure","prefix","struct","rules","each","members","name","member","value","undefined","memberName","serializeMember","serializeMap","map","i","key","flattened","queryFlattened","position","keyName","valueName","serializeList","list","memberRules","length","call","arrayEach","v","n","suffix","parts","split","pop","push","join","type","toWireFormat","toString","module","exports"],"mappings":"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","sourcesContent":["var util = require('../util');\n\nfunction QueryParamSerializer() { }\n\nQueryParamSerializer.prototype.serialize = function(params, shape, fn) {\n  serializeStructure('', params, shape, fn);\n};\n\nfunction serializeStructure(prefix, struct, rules, fn) {\n  util.each(rules.members, function(name, member) {\n    var value = struct[name];\n    if (value === null || value === undefined) return;\n\n    var memberName = prefix ? prefix + '.' + member.name : member.name;\n    serializeMember(memberName, value, member, fn);\n  });\n}\n\nfunction serializeMap(name, map, rules, fn) {\n  var i = 1;\n  util.each(map, function (key, value) {\n    var prefix = rules.flattened || rules.queryFlattened ? '.' : '.entry.';\n    var position = prefix + (i++) + '.';\n    var keyName = position + (rules.key.name || 'key');\n    var valueName = position + (rules.value.name || 'value');\n    serializeMember(name + keyName, key, rules.key, fn);\n    serializeMember(name + valueName, value, rules.value, fn);\n  });\n}\n\nfunction serializeList(name, list, rules, fn) {\n  var memberRules = rules.member || {};\n\n  if (list.length === 0) {\n    fn.call(this, name, null);\n    return;\n  }\n\n  util.arrayEach(list, function (v, n) {\n    var suffix = '.' + (n + 1);\n    if (rules.flattened || rules.queryFlattened) {\n      if (memberRules.name) {\n        var parts = name.split('.');\n        parts.pop();\n        parts.push(memberRules.name);\n        name = parts.join('.');\n      }\n    } else {\n      suffix = '.member' + suffix;\n    }\n    serializeMember(name + suffix, v, memberRules, fn);\n  });\n}\n\nfunction serializeMember(name, value, rules, fn) {\n  if (value === null || value === undefined) return;\n  if (rules.type === 'structure') {\n    serializeStructure(name, value, rules, fn);\n  } else if (rules.type === 'list') {\n    serializeList(name, value, rules, fn);\n  } else if (rules.type === 'map') {\n    serializeMap(name, value, rules, fn);\n  } else {\n    fn(name, rules.toWireFormat(value).toString());\n  }\n}\n\nmodule.exports = QueryParamSerializer;\n"]},"metadata":{},"sourceType":"script"}
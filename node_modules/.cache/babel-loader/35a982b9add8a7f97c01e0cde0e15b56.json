{"ast":null,"code":"var AWS = require('../core');\n/**\n * Creates a credential provider chain that searches for AWS credentials\n * in a list of credential providers specified by the {providers} property.\n *\n * By default, the chain will use the {defaultProviders} to resolve credentials.\n * These providers will look in the environment using the\n * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.\n *\n * ## Setting Providers\n *\n * Each provider in the {providers} list should be a function that returns\n * a {AWS.Credentials} object, or a hardcoded credentials object. The function\n * form allows for delayed execution of the credential construction.\n *\n * ## Resolving Credentials from a Chain\n *\n * Call {resolve} to return the first valid credential object that can be\n * loaded by the provider chain.\n *\n * For example, to resolve a chain with a custom provider that checks a file\n * on disk after the set of {defaultProviders}:\n *\n * ```javascript\n * var diskProvider = new AWS.FileSystemCredentials('./creds.json');\n * var chain = new AWS.CredentialProviderChain();\n * chain.providers.push(diskProvider);\n * chain.resolve();\n * ```\n *\n * The above code will return the `diskProvider` object if the\n * file contains credentials and the `defaultProviders` do not contain\n * any credential settings.\n *\n * @!attribute providers\n *   @return [Array<AWS.Credentials, Function>]\n *     a list of credentials objects or functions that return credentials\n *     objects. If the provider is a function, the function will be\n *     executed lazily when the provider needs to be checked for valid\n *     credentials. By default, this object will be set to the\n *     {defaultProviders}.\n *   @see defaultProviders\n */\n\n\nAWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new CredentialProviderChain with a default set of providers\n   * specified by {defaultProviders}.\n   */\n  constructor: function CredentialProviderChain(providers) {\n    if (providers) {\n      this.providers = providers;\n    } else {\n      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);\n    }\n  },\n\n  /**\n   * Resolves the provider chain by searching for the first set of\n   * credentials in {providers}.\n   *\n   * @callback callback function(err, credentials)\n   *   Called when the provider resolves the chain to a credentials object\n   *   or null if no credentials can be found.\n   *\n   *   @param err [Error] the error object returned if no credentials are\n   *     found.\n   *   @param credentials [AWS.Credentials] the credentials object resolved\n   *     by the provider chain.\n   * @return [AWS.CredentialProviderChain] the provider, for chaining.\n   */\n  resolve: function resolve(callback) {\n    if (this.providers.length === 0) {\n      callback(new Error('No providers'));\n      return this;\n    }\n\n    var index = 0;\n    var providers = this.providers.slice(0);\n\n    function resolveNext(err, creds) {\n      if (!err && creds || index === providers.length) {\n        callback(err, creds);\n        return;\n      }\n\n      var provider = providers[index++];\n\n      if (typeof provider === 'function') {\n        creds = provider.call();\n      } else {\n        creds = provider;\n      }\n\n      if (creds.get) {\n        creds.get(function (err) {\n          resolveNext(err, err ? null : creds);\n        });\n      } else {\n        resolveNext(null, creds);\n      }\n    }\n\n    resolveNext();\n    return this;\n  }\n});\n/**\n * The default set of providers used by a vanilla CredentialProviderChain.\n */\n\nAWS.CredentialProviderChain.defaultProviders = [];","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/credentials/credential_provider_chain.js"],"names":["AWS","require","CredentialProviderChain","util","inherit","Credentials","constructor","providers","defaultProviders","slice","resolve","callback","length","Error","index","resolveNext","err","creds","provider","call","get"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CAD,GAAG,CAACE,uBAAJ,GAA8BF,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBJ,GAAG,CAACK,WAArB,EAAkC;AAE9D;;;;AAIAC,EAAAA,WAAW,EAAE,SAASJ,uBAAT,CAAiCK,SAAjC,EAA4C;AACvD,QAAIA,SAAJ,EAAe;AACb,WAAKA,SAAL,GAAiBA,SAAjB;AACD,KAFD,MAEO;AACL,WAAKA,SAAL,GAAiBP,GAAG,CAACE,uBAAJ,CAA4BM,gBAA5B,CAA6CC,KAA7C,CAAmD,CAAnD,CAAjB;AACD;AACF,GAZ6D;;AAc9D;;;;;;;;;;;;;;AAcAC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,QAAI,KAAKJ,SAAL,CAAeK,MAAf,KAA0B,CAA9B,EAAiC;AAC/BD,MAAAA,QAAQ,CAAC,IAAIE,KAAJ,CAAU,cAAV,CAAD,CAAR;AACA,aAAO,IAAP;AACD;;AAED,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIP,SAAS,GAAG,KAAKA,SAAL,CAAeE,KAAf,CAAqB,CAArB,CAAhB;;AAEA,aAASM,WAAT,CAAqBC,GAArB,EAA0BC,KAA1B,EAAiC;AAC/B,UAAK,CAACD,GAAD,IAAQC,KAAT,IAAmBH,KAAK,KAAKP,SAAS,CAACK,MAA3C,EAAmD;AACjDD,QAAAA,QAAQ,CAACK,GAAD,EAAMC,KAAN,CAAR;AACA;AACD;;AAED,UAAIC,QAAQ,GAAGX,SAAS,CAACO,KAAK,EAAN,CAAxB;;AACA,UAAI,OAAOI,QAAP,KAAoB,UAAxB,EAAoC;AAClCD,QAAAA,KAAK,GAAGC,QAAQ,CAACC,IAAT,EAAR;AACD,OAFD,MAEO;AACLF,QAAAA,KAAK,GAAGC,QAAR;AACD;;AAED,UAAID,KAAK,CAACG,GAAV,EAAe;AACbH,QAAAA,KAAK,CAACG,GAAN,CAAU,UAASJ,GAAT,EAAc;AACtBD,UAAAA,WAAW,CAACC,GAAD,EAAMA,GAAG,GAAG,IAAH,GAAUC,KAAnB,CAAX;AACD,SAFD;AAGD,OAJD,MAIO;AACLF,QAAAA,WAAW,CAAC,IAAD,EAAOE,KAAP,CAAX;AACD;AACF;;AAEDF,IAAAA,WAAW;AACX,WAAO,IAAP;AACD;AA7D6D,CAAlC,CAA9B;AAiEA;;;;AAGAf,GAAG,CAACE,uBAAJ,CAA4BM,gBAA5B,GAA+C,EAA/C","sourcesContent":["var AWS = require('../core');\n\n/**\n * Creates a credential provider chain that searches for AWS credentials\n * in a list of credential providers specified by the {providers} property.\n *\n * By default, the chain will use the {defaultProviders} to resolve credentials.\n * These providers will look in the environment using the\n * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.\n *\n * ## Setting Providers\n *\n * Each provider in the {providers} list should be a function that returns\n * a {AWS.Credentials} object, or a hardcoded credentials object. The function\n * form allows for delayed execution of the credential construction.\n *\n * ## Resolving Credentials from a Chain\n *\n * Call {resolve} to return the first valid credential object that can be\n * loaded by the provider chain.\n *\n * For example, to resolve a chain with a custom provider that checks a file\n * on disk after the set of {defaultProviders}:\n *\n * ```javascript\n * var diskProvider = new AWS.FileSystemCredentials('./creds.json');\n * var chain = new AWS.CredentialProviderChain();\n * chain.providers.push(diskProvider);\n * chain.resolve();\n * ```\n *\n * The above code will return the `diskProvider` object if the\n * file contains credentials and the `defaultProviders` do not contain\n * any credential settings.\n *\n * @!attribute providers\n *   @return [Array<AWS.Credentials, Function>]\n *     a list of credentials objects or functions that return credentials\n *     objects. If the provider is a function, the function will be\n *     executed lazily when the provider needs to be checked for valid\n *     credentials. By default, this object will be set to the\n *     {defaultProviders}.\n *   @see defaultProviders\n */\nAWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {\n\n  /**\n   * Creates a new CredentialProviderChain with a default set of providers\n   * specified by {defaultProviders}.\n   */\n  constructor: function CredentialProviderChain(providers) {\n    if (providers) {\n      this.providers = providers;\n    } else {\n      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);\n    }\n  },\n\n  /**\n   * Resolves the provider chain by searching for the first set of\n   * credentials in {providers}.\n   *\n   * @callback callback function(err, credentials)\n   *   Called when the provider resolves the chain to a credentials object\n   *   or null if no credentials can be found.\n   *\n   *   @param err [Error] the error object returned if no credentials are\n   *     found.\n   *   @param credentials [AWS.Credentials] the credentials object resolved\n   *     by the provider chain.\n   * @return [AWS.CredentialProviderChain] the provider, for chaining.\n   */\n  resolve: function resolve(callback) {\n    if (this.providers.length === 0) {\n      callback(new Error('No providers'));\n      return this;\n    }\n\n    var index = 0;\n    var providers = this.providers.slice(0);\n\n    function resolveNext(err, creds) {\n      if ((!err && creds) || index === providers.length) {\n        callback(err, creds);\n        return;\n      }\n\n      var provider = providers[index++];\n      if (typeof provider === 'function') {\n        creds = provider.call();\n      } else {\n        creds = provider;\n      }\n\n      if (creds.get) {\n        creds.get(function(err) {\n          resolveNext(err, err ? null : creds);\n        });\n      } else {\n        resolveNext(null, creds);\n      }\n    }\n\n    resolveNext();\n    return this;\n  }\n\n});\n\n/**\n * The default set of providers used by a vanilla CredentialProviderChain.\n */\nAWS.CredentialProviderChain.defaultProviders = [];\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var filters = require('../filters');\n/**\n * Apply a filter to an entire block of template.\n *\n * @alias filter\n *\n * @example\n * {% filter uppercase %}oh hi, {{ name }}{% endfilter %}\n * // => OH HI, PAUL\n *\n * @example\n * {% filter replace(\".\", \"!\", \"g\") %}Hi. My name is Paul.{% endfilter %}\n * // => Hi! My name is Paul!\n *\n * @param {function} filter  The filter that should be applied to the contents of the tag.\n */\n\n\nexports.compile = function (compiler, args, content, parents, options, blockName) {\n  var filter = args.shift().replace(/\\($/, ''),\n      val = '(function () {\\n' + '  var _output = \"\";\\n' + compiler(content, parents, options, blockName) + '  return _output;\\n' + '})()';\n\n  if (args[args.length - 1] === ')') {\n    args.pop();\n  }\n\n  args = args.length ? ', ' + args.join('') : '';\n  return '_output += _filters[\"' + filter + '\"](' + val + args + ');\\n';\n};\n\nexports.parse = function (str, line, parser, types) {\n  var filter;\n\n  function check(filter) {\n    if (!filters.hasOwnProperty(filter)) {\n      throw new Error('Filter \"' + filter + '\" does not exist on line ' + line + '.');\n    }\n  }\n\n  parser.on(types.FUNCTION, function (token) {\n    if (!filter) {\n      filter = token.match.replace(/\\($/, '');\n      check(filter);\n      this.out.push(token.match);\n      this.state.push(token.type);\n      return;\n    }\n\n    return true;\n  });\n  parser.on(types.VAR, function (token) {\n    if (!filter) {\n      filter = token.match;\n      check(filter);\n      this.out.push(filter);\n      return;\n    }\n\n    return true;\n  });\n  return true;\n};\n\nexports.ends = true;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/swig/lib/tags/filter.js"],"names":["filters","require","exports","compile","compiler","args","content","parents","options","blockName","filter","shift","replace","val","length","pop","join","parse","str","line","parser","types","check","hasOwnProperty","Error","on","FUNCTION","token","match","out","push","state","type","VAR","ends"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAArB;AAEA;;;;;;;;;;;;;;;;;AAgBAC,OAAO,CAACC,OAAR,GAAkB,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,OAAnC,EAA4CC,OAA5C,EAAqDC,SAArD,EAAgE;AAChF,MAAIC,MAAM,GAAGL,IAAI,CAACM,KAAL,GAAaC,OAAb,CAAqB,KAArB,EAA4B,EAA5B,CAAb;AAAA,MACEC,GAAG,GAAG,qBACJ,uBADI,GAEJT,QAAQ,CAACE,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,SAA5B,CAFJ,GAGJ,qBAHI,GAIJ,MALJ;;AAOA,MAAIJ,IAAI,CAACA,IAAI,CAACS,MAAL,GAAc,CAAf,CAAJ,KAA0B,GAA9B,EAAmC;AACjCT,IAAAA,IAAI,CAACU,GAAL;AACD;;AAEDV,EAAAA,IAAI,GAAIA,IAAI,CAACS,MAAN,GAAgB,OAAOT,IAAI,CAACW,IAAL,CAAU,EAAV,CAAvB,GAAuC,EAA9C;AACA,SAAO,0BAA0BN,MAA1B,GAAmC,KAAnC,GAA2CG,GAA3C,GAAiDR,IAAjD,GAAwD,MAA/D;AACD,CAdD;;AAgBAH,OAAO,CAACe,KAAR,GAAgB,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,KAA7B,EAAoC;AAClD,MAAIX,MAAJ;;AAEA,WAASY,KAAT,CAAeZ,MAAf,EAAuB;AACrB,QAAI,CAACV,OAAO,CAACuB,cAAR,CAAuBb,MAAvB,CAAL,EAAqC;AACnC,YAAM,IAAIc,KAAJ,CAAU,aAAad,MAAb,GAAsB,2BAAtB,GAAoDS,IAApD,GAA2D,GAArE,CAAN;AACD;AACF;;AAEDC,EAAAA,MAAM,CAACK,EAAP,CAAUJ,KAAK,CAACK,QAAhB,EAA0B,UAAUC,KAAV,EAAiB;AACzC,QAAI,CAACjB,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAGiB,KAAK,CAACC,KAAN,CAAYhB,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAT;AACAU,MAAAA,KAAK,CAACZ,MAAD,CAAL;AACA,WAAKmB,GAAL,CAASC,IAAT,CAAcH,KAAK,CAACC,KAApB;AACA,WAAKG,KAAL,CAAWD,IAAX,CAAgBH,KAAK,CAACK,IAAtB;AACA;AACD;;AACD,WAAO,IAAP;AACD,GATD;AAWAZ,EAAAA,MAAM,CAACK,EAAP,CAAUJ,KAAK,CAACY,GAAhB,EAAqB,UAAUN,KAAV,EAAiB;AACpC,QAAI,CAACjB,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAGiB,KAAK,CAACC,KAAf;AACAN,MAAAA,KAAK,CAACZ,MAAD,CAAL;AACA,WAAKmB,GAAL,CAASC,IAAT,CAAcpB,MAAd;AACA;AACD;;AACD,WAAO,IAAP;AACD,GARD;AAUA,SAAO,IAAP;AACD,CA/BD;;AAiCAR,OAAO,CAACgC,IAAR,GAAe,IAAf","sourcesContent":["var filters = require('../filters');\n\n/**\n * Apply a filter to an entire block of template.\n *\n * @alias filter\n *\n * @example\n * {% filter uppercase %}oh hi, {{ name }}{% endfilter %}\n * // => OH HI, PAUL\n *\n * @example\n * {% filter replace(\".\", \"!\", \"g\") %}Hi. My name is Paul.{% endfilter %}\n * // => Hi! My name is Paul!\n *\n * @param {function} filter  The filter that should be applied to the contents of the tag.\n */\n\nexports.compile = function (compiler, args, content, parents, options, blockName) {\n  var filter = args.shift().replace(/\\($/, ''),\n    val = '(function () {\\n' +\n      '  var _output = \"\";\\n' +\n      compiler(content, parents, options, blockName) +\n      '  return _output;\\n' +\n      '})()';\n\n  if (args[args.length - 1] === ')') {\n    args.pop();\n  }\n\n  args = (args.length) ? ', ' + args.join('') : '';\n  return '_output += _filters[\"' + filter + '\"](' + val + args + ');\\n';\n};\n\nexports.parse = function (str, line, parser, types) {\n  var filter;\n\n  function check(filter) {\n    if (!filters.hasOwnProperty(filter)) {\n      throw new Error('Filter \"' + filter + '\" does not exist on line ' + line + '.');\n    }\n  }\n\n  parser.on(types.FUNCTION, function (token) {\n    if (!filter) {\n      filter = token.match.replace(/\\($/, '');\n      check(filter);\n      this.out.push(token.match);\n      this.state.push(token.type);\n      return;\n    }\n    return true;\n  });\n\n  parser.on(types.VAR, function (token) {\n    if (!filter) {\n      filter = token.match;\n      check(filter);\n      this.out.push(filter);\n      return;\n    }\n    return true;\n  });\n\n  return true;\n};\n\nexports.ends = true;\n"]},"metadata":{},"sourceType":"script"}
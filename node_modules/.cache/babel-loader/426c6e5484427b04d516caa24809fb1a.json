{"ast":null,"code":"var isArray;\n/**\n * Strip leading and trailing whitespace from a string.\n * @param  {string} input\n * @return {string}       Stripped input.\n */\n\nexports.strip = function (input) {\n  return input.replace(/^\\s+|\\s+$/g, '');\n};\n/**\n * Test if a string starts with a given prefix.\n * @param  {string} str    String to test against.\n * @param  {string} prefix Prefix to check for.\n * @return {boolean}\n */\n\n\nexports.startsWith = function (str, prefix) {\n  return str.indexOf(prefix) === 0;\n};\n/**\n * Test if a string ends with a given suffix.\n * @param  {string} str    String to test against.\n * @param  {string} suffix Suffix to check for.\n * @return {boolean}\n */\n\n\nexports.endsWith = function (str, suffix) {\n  return str.indexOf(suffix, str.length - suffix.length) !== -1;\n};\n/**\n * Iterate over an array or object.\n * @param  {array|object} obj Enumerable object.\n * @param  {Function}     fn  Callback function executed for each item.\n * @return {array|object}     The original input object.\n */\n\n\nexports.each = function (obj, fn) {\n  var i, l;\n\n  if (isArray(obj)) {\n    i = 0;\n    l = obj.length;\n\n    for (i; i < l; i += 1) {\n      if (fn(obj[i], i, obj) === false) {\n        break;\n      }\n    }\n  } else {\n    for (i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        if (fn(obj[i], i, obj) === false) {\n          break;\n        }\n      }\n    }\n  }\n\n  return obj;\n};\n/**\n * Test if an object is an Array.\n * @param {object} obj\n * @return {boolean}\n */\n\n\nexports.isArray = isArray = Array.hasOwnProperty('isArray') ? Array.isArray : function (obj) {\n  return obj ? typeof obj === 'object' && Object.prototype.toString.call(obj).indexOf() !== -1 : false;\n};\n/**\n * Test if an item in an enumerable matches your conditions.\n * @param  {array|object}   obj   Enumerable object.\n * @param  {Function}       fn    Executed for each item. Return true if your condition is met.\n * @return {boolean}\n */\n\nexports.some = function (obj, fn) {\n  var i = 0,\n      result,\n      l;\n\n  if (isArray(obj)) {\n    l = obj.length;\n\n    for (i; i < l; i += 1) {\n      result = fn(obj[i], i, obj);\n\n      if (result) {\n        break;\n      }\n    }\n  } else {\n    exports.each(obj, function (value, index) {\n      result = fn(value, index, obj);\n      return !result;\n    });\n  }\n\n  return !!result;\n};\n/**\n * Return a new enumerable, mapped by a given iteration function.\n * @param  {object}   obj Enumerable object.\n * @param  {Function} fn  Executed for each item. Return the item to replace the original item with.\n * @return {object}       New mapped object.\n */\n\n\nexports.map = function (obj, fn) {\n  var i = 0,\n      result = [],\n      l;\n\n  if (isArray(obj)) {\n    l = obj.length;\n\n    for (i; i < l; i += 1) {\n      result[i] = fn(obj[i], i);\n    }\n  } else {\n    for (i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        result[i] = fn(obj[i], i);\n      }\n    }\n  }\n\n  return result;\n};\n/**\n * Copy all of the properties in the source objects over to the destination object, and return the destination object. It's in-order, so the last source will override properties of the same name in previous arguments.\n * @param {...object} arguments\n * @return {object}\n */\n\n\nexports.extend = function () {\n  var args = arguments,\n      target = args[0],\n      objs = args.length > 1 ? Array.prototype.slice.call(args, 1) : [],\n      i = 0,\n      l = objs.length,\n      key,\n      obj;\n\n  for (i; i < l; i += 1) {\n    obj = objs[i] || {};\n\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        target[key] = obj[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Get all of the keys on an object.\n * @param  {object} obj\n * @return {array}\n */\n\n\nexports.keys = function (obj) {\n  if (!obj) {\n    return [];\n  }\n\n  if (Object.keys) {\n    return Object.keys(obj);\n  }\n\n  return exports.map(obj, function (v, k) {\n    return k;\n  });\n};\n/**\n * Throw an error with possible line number and source file.\n * @param  {string} message Error message\n * @param  {number} [line]  Line number in template.\n * @param  {string} [file]  Template file the error occured in.\n * @throws {Error} No seriously, the point is to throw an error.\n */\n\n\nexports.throwError = function (message, line, file) {\n  if (line) {\n    message += ' on line ' + line;\n  }\n\n  if (file) {\n    message += ' in file ' + file;\n  }\n\n  throw new Error(message + '.');\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/swig/lib/utils.js"],"names":["isArray","exports","strip","input","replace","startsWith","str","prefix","indexOf","endsWith","suffix","length","each","obj","fn","i","l","hasOwnProperty","Array","Object","prototype","toString","call","some","result","value","index","map","extend","args","arguments","target","objs","slice","key","keys","v","k","throwError","message","line","file","Error"],"mappings":"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","sourcesContent":["var isArray;\n\n/**\n * Strip leading and trailing whitespace from a string.\n * @param  {string} input\n * @return {string}       Stripped input.\n */\nexports.strip = function (input) {\n  return input.replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n * Test if a string starts with a given prefix.\n * @param  {string} str    String to test against.\n * @param  {string} prefix Prefix to check for.\n * @return {boolean}\n */\nexports.startsWith = function (str, prefix) {\n  return str.indexOf(prefix) === 0;\n};\n\n/**\n * Test if a string ends with a given suffix.\n * @param  {string} str    String to test against.\n * @param  {string} suffix Suffix to check for.\n * @return {boolean}\n */\nexports.endsWith = function (str, suffix) {\n  return str.indexOf(suffix, str.length - suffix.length) !== -1;\n};\n\n/**\n * Iterate over an array or object.\n * @param  {array|object} obj Enumerable object.\n * @param  {Function}     fn  Callback function executed for each item.\n * @return {array|object}     The original input object.\n */\nexports.each = function (obj, fn) {\n  var i, l;\n\n  if (isArray(obj)) {\n    i = 0;\n    l = obj.length;\n    for (i; i < l; i += 1) {\n      if (fn(obj[i], i, obj) === false) {\n        break;\n      }\n    }\n  } else {\n    for (i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        if (fn(obj[i], i, obj) === false) {\n          break;\n        }\n      }\n    }\n  }\n\n  return obj;\n};\n\n/**\n * Test if an object is an Array.\n * @param {object} obj\n * @return {boolean}\n */\nexports.isArray = isArray = (Array.hasOwnProperty('isArray')) ? Array.isArray : function (obj) {\n  return (obj) ? (typeof obj === 'object' && Object.prototype.toString.call(obj).indexOf() !== -1) : false;\n};\n\n/**\n * Test if an item in an enumerable matches your conditions.\n * @param  {array|object}   obj   Enumerable object.\n * @param  {Function}       fn    Executed for each item. Return true if your condition is met.\n * @return {boolean}\n */\nexports.some = function (obj, fn) {\n  var i = 0,\n    result,\n    l;\n  if (isArray(obj)) {\n    l = obj.length;\n\n    for (i; i < l; i += 1) {\n      result = fn(obj[i], i, obj);\n      if (result) {\n        break;\n      }\n    }\n  } else {\n    exports.each(obj, function (value, index) {\n      result = fn(value, index, obj);\n      return !(result);\n    });\n  }\n  return !!result;\n};\n\n/**\n * Return a new enumerable, mapped by a given iteration function.\n * @param  {object}   obj Enumerable object.\n * @param  {Function} fn  Executed for each item. Return the item to replace the original item with.\n * @return {object}       New mapped object.\n */\nexports.map = function (obj, fn) {\n  var i = 0,\n    result = [],\n    l;\n\n  if (isArray(obj)) {\n    l = obj.length;\n    for (i; i < l; i += 1) {\n      result[i] = fn(obj[i], i);\n    }\n  } else {\n    for (i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        result[i] = fn(obj[i], i);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Copy all of the properties in the source objects over to the destination object, and return the destination object. It's in-order, so the last source will override properties of the same name in previous arguments.\n * @param {...object} arguments\n * @return {object}\n */\nexports.extend = function () {\n  var args = arguments,\n    target = args[0],\n    objs = (args.length > 1) ? Array.prototype.slice.call(args, 1) : [],\n    i = 0,\n    l = objs.length,\n    key,\n    obj;\n\n  for (i; i < l; i += 1) {\n    obj = objs[i] || {};\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        target[key] = obj[key];\n      }\n    }\n  }\n  return target;\n};\n\n/**\n * Get all of the keys on an object.\n * @param  {object} obj\n * @return {array}\n */\nexports.keys = function (obj) {\n  if (!obj) {\n    return [];\n  }\n\n  if (Object.keys) {\n    return Object.keys(obj);\n  }\n\n  return exports.map(obj, function (v, k) {\n    return k;\n  });\n};\n\n/**\n * Throw an error with possible line number and source file.\n * @param  {string} message Error message\n * @param  {number} [line]  Line number in template.\n * @param  {string} [file]  Template file the error occured in.\n * @throws {Error} No seriously, the point is to throw an error.\n */\nexports.throwError = function (message, line, file) {\n  if (line) {\n    message += ' on line ' + line;\n  }\n  if (file) {\n    message += ' in file ' + file;\n  }\n  throw new Error(message + '.');\n};\n"]},"metadata":{},"sourceType":"script"}
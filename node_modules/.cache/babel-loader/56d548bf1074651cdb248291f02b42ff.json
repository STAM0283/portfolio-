{"ast":null,"code":"var utils = require('../utils'),\n    strings = ['html', 'js'];\n/**\n * Control auto-escaping of variable output from within your templates.\n *\n * @alias autoescape\n *\n * @example\n * // myvar = '<foo>';\n * {% autoescape true %}{{ myvar }}{% endautoescape %}\n * // => &lt;foo&gt;\n * {% autoescape false %}{{ myvar }}{% endautoescape %}\n * // => <foo>\n *\n * @param {boolean|string} control One of `true`, `false`, `\"js\"` or `\"html\"`.\n */\n\n\nexports.compile = function (compiler, args, content, parents, options, blockName) {\n  return compiler(content, parents, options, blockName);\n};\n\nexports.parse = function (str, line, parser, types, stack, opts) {\n  var matched;\n  parser.on('*', function (token) {\n    if (!matched && (token.type === types.BOOL || token.type === types.STRING && strings.indexOf(token.match) === -1)) {\n      this.out.push(token.match);\n      matched = true;\n      return;\n    }\n\n    utils.throwError('Unexpected token \"' + token.match + '\" in autoescape tag', line, opts.filename);\n  });\n  return true;\n};\n\nexports.ends = true;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/swig/lib/tags/autoescape.js"],"names":["utils","require","strings","exports","compile","compiler","args","content","parents","options","blockName","parse","str","line","parser","types","stack","opts","matched","on","token","type","BOOL","STRING","indexOf","match","out","push","throwError","filename","ends"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACEC,OAAO,GAAG,CAAC,MAAD,EAAS,IAAT,CADZ;AAGA;;;;;;;;;;;;;;;;AAcAC,OAAO,CAACC,OAAR,GAAkB,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,OAAnC,EAA4CC,OAA5C,EAAqDC,SAArD,EAAgE;AAChF,SAAOL,QAAQ,CAACE,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,SAA5B,CAAf;AACD,CAFD;;AAGAP,OAAO,CAACQ,KAAR,GAAgB,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,KAA7B,EAAoCC,KAApC,EAA2CC,IAA3C,EAAiD;AAC/D,MAAIC,OAAJ;AACAJ,EAAAA,MAAM,CAACK,EAAP,CAAU,GAAV,EAAe,UAAUC,KAAV,EAAiB;AAC9B,QAAI,CAACF,OAAD,KACCE,KAAK,CAACC,IAAN,KAAeN,KAAK,CAACO,IAArB,IACEF,KAAK,CAACC,IAAN,KAAeN,KAAK,CAACQ,MAArB,IAA+BrB,OAAO,CAACsB,OAAR,CAAgBJ,KAAK,CAACK,KAAtB,MAAiC,CAAC,CAFpE,CAAJ,EAGM;AACJ,WAAKC,GAAL,CAASC,IAAT,CAAcP,KAAK,CAACK,KAApB;AACAP,MAAAA,OAAO,GAAG,IAAV;AACA;AACD;;AACDlB,IAAAA,KAAK,CAAC4B,UAAN,CAAiB,uBAAuBR,KAAK,CAACK,KAA7B,GAAqC,qBAAtD,EAA6EZ,IAA7E,EAAmFI,IAAI,CAACY,QAAxF;AACD,GAVD;AAYA,SAAO,IAAP;AACD,CAfD;;AAgBA1B,OAAO,CAAC2B,IAAR,GAAe,IAAf","sourcesContent":["var utils = require('../utils'),\n  strings = ['html', 'js'];\n\n/**\n * Control auto-escaping of variable output from within your templates.\n *\n * @alias autoescape\n *\n * @example\n * // myvar = '<foo>';\n * {% autoescape true %}{{ myvar }}{% endautoescape %}\n * // => &lt;foo&gt;\n * {% autoescape false %}{{ myvar }}{% endautoescape %}\n * // => <foo>\n *\n * @param {boolean|string} control One of `true`, `false`, `\"js\"` or `\"html\"`.\n */\nexports.compile = function (compiler, args, content, parents, options, blockName) {\n  return compiler(content, parents, options, blockName);\n};\nexports.parse = function (str, line, parser, types, stack, opts) {\n  var matched;\n  parser.on('*', function (token) {\n    if (!matched &&\n        (token.type === types.BOOL ||\n          (token.type === types.STRING && strings.indexOf(token.match) === -1))\n        ) {\n      this.out.push(token.match);\n      matched = true;\n      return;\n    }\n    utils.throwError('Unexpected token \"' + token.match + '\" in autoescape tag', line, opts.filename);\n  });\n\n  return true;\n};\nexports.ends = true;\n"]},"metadata":{},"sourceType":"script"}
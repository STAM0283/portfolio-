{"ast":null,"code":"\"use strict\";\n\nvar http = require('follow-redirects').http,\n    https = require('follow-redirects').https,\n    urllib = require(\"url\"),\n    Stream = require('stream').Stream;\n/**\n * @namespace URLFetch\n * @name urlfetch\n */\n\n\nmodule.exports = openUrlStream;\n/**\n * <p>Open a stream to a specified URL</p>\n *\n * @memberOf urlfetch\n * @param {String} url URL to open\n * @param {Object} [options] Optional options object\n * @param {String} [options.userAgent=\"mailcomposer\"] User Agent for the request\n * @return {Stream} Stream for the URL contents\n */\n\nfunction openUrlStream(url, options) {\n  options = options || {};\n  var urlparts = urllib.parse(url),\n      urloptions = {\n    host: urlparts.hostname,\n    port: urlparts.port || (urlparts.protocol == \"https:\" ? 443 : 80),\n    path: urlparts.path || urlparts.pathname,\n    method: \"GET\",\n    headers: {\n      \"User-Agent\": options.userAgent || \"mailcomposer\"\n    },\n    agent: false\n  },\n      client = urlparts.protocol == \"https:\" ? https : http,\n      stream = new Stream(),\n      request;\n\n  stream.resume = function () {};\n\n  if (urlparts.auth) {\n    urloptions.auth = urlparts.auth;\n  }\n\n  request = client.request(urloptions, function (response) {\n    if ((response.statusCode || 0).toString().charAt(0) != \"2\") {\n      stream.emit(\"error\", \"Invalid status code \" + (response.statusCode || 0));\n      return;\n    }\n\n    response.on('error', function (err) {\n      stream.emit(\"error\", err);\n    });\n    response.on('data', function (chunk) {\n      stream.emit(\"data\", chunk);\n    });\n    response.on('end', function (chunk) {\n      if (chunk) {\n        stream.emit(\"data\", chunk);\n      }\n\n      stream.emit(\"end\");\n    });\n  });\n  request.end();\n  request.on('error', function (err) {\n    stream.emit(\"error\", err);\n  });\n  return stream;\n}","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/mailcomposer/lib/urlfetch.js"],"names":["http","require","https","urllib","Stream","module","exports","openUrlStream","url","options","urlparts","parse","urloptions","host","hostname","port","protocol","path","pathname","method","headers","userAgent","agent","client","stream","request","resume","auth","response","statusCode","toString","charAt","emit","on","err","chunk","end"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAAP,CAA4BD,IAAvC;AAAA,IACIE,KAAK,GAAGD,OAAO,CAAC,kBAAD,CAAP,CAA4BC,KADxC;AAAA,IAEIC,MAAM,GAAGF,OAAO,CAAC,KAAD,CAFpB;AAAA,IAGIG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAP,CAAkBG,MAH/B;AAKA;;;;;;AAIAC,MAAM,CAACC,OAAP,GAAiBC,aAAjB;AAEA;;;;;;;;;;AASA,SAASA,aAAT,CAAuBC,GAAvB,EAA4BC,OAA5B,EAAqC;AACjCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIC,QAAQ,GAAGP,MAAM,CAACQ,KAAP,CAAaH,GAAb,CAAf;AAAA,MACII,UAAU,GAAG;AACTC,IAAAA,IAAI,EAAEH,QAAQ,CAACI,QADN;AAETC,IAAAA,IAAI,EAAEL,QAAQ,CAACK,IAAT,KAAkBL,QAAQ,CAACM,QAAT,IAAqB,QAArB,GAAgC,GAAhC,GAAsC,EAAxD,CAFG;AAGTC,IAAAA,IAAI,EAAEP,QAAQ,CAACO,IAAT,IAAiBP,QAAQ,CAACQ,QAHvB;AAITC,IAAAA,MAAM,EAAE,KAJC;AAKTC,IAAAA,OAAO,EAAE;AACL,oBAAcX,OAAO,CAACY,SAAR,IAAqB;AAD9B,KALA;AAQTC,IAAAA,KAAK,EAAE;AARE,GADjB;AAAA,MAWIC,MAAM,GAAIb,QAAQ,CAACM,QAAT,IAAqB,QAArB,GAAgCd,KAAhC,GAAwCF,IAXtD;AAAA,MAYIwB,MAAM,GAAG,IAAIpB,MAAJ,EAZb;AAAA,MAaIqB,OAbJ;;AAeAD,EAAAA,MAAM,CAACE,MAAP,GAAgB,YAAW,CAAE,CAA7B;;AAEA,MAAIhB,QAAQ,CAACiB,IAAb,EAAmB;AACff,IAAAA,UAAU,CAACe,IAAX,GAAkBjB,QAAQ,CAACiB,IAA3B;AACH;;AAEDF,EAAAA,OAAO,GAAGF,MAAM,CAACE,OAAP,CAAeb,UAAf,EAA2B,UAASgB,QAAT,EAAmB;AACpD,QAAI,CAACA,QAAQ,CAACC,UAAT,IAAuB,CAAxB,EAA2BC,QAA3B,GAAsCC,MAAtC,CAA6C,CAA7C,KAAmD,GAAvD,EAA4D;AACxDP,MAAAA,MAAM,CAACQ,IAAP,CAAY,OAAZ,EAAqB,0BAA0BJ,QAAQ,CAACC,UAAT,IAAuB,CAAjD,CAArB;AACA;AACH;;AAEDD,IAAAA,QAAQ,CAACK,EAAT,CAAY,OAAZ,EAAqB,UAASC,GAAT,EAAc;AAC/BV,MAAAA,MAAM,CAACQ,IAAP,CAAY,OAAZ,EAAqBE,GAArB;AACH,KAFD;AAIAN,IAAAA,QAAQ,CAACK,EAAT,CAAY,MAAZ,EAAoB,UAASE,KAAT,EAAgB;AAChCX,MAAAA,MAAM,CAACQ,IAAP,CAAY,MAAZ,EAAoBG,KAApB;AACH,KAFD;AAIAP,IAAAA,QAAQ,CAACK,EAAT,CAAY,KAAZ,EAAmB,UAASE,KAAT,EAAgB;AAC/B,UAAIA,KAAJ,EAAW;AACPX,QAAAA,MAAM,CAACQ,IAAP,CAAY,MAAZ,EAAoBG,KAApB;AACH;;AACDX,MAAAA,MAAM,CAACQ,IAAP,CAAY,KAAZ;AACH,KALD;AAMH,GApBS,CAAV;AAqBAP,EAAAA,OAAO,CAACW,GAAR;AAEAX,EAAAA,OAAO,CAACQ,EAAR,CAAW,OAAX,EAAoB,UAASC,GAAT,EAAc;AAC9BV,IAAAA,MAAM,CAACQ,IAAP,CAAY,OAAZ,EAAqBE,GAArB;AACH,GAFD;AAIA,SAAOV,MAAP;AACH","sourcesContent":["\"use strict\";\n\nvar http = require('follow-redirects').http,\n    https = require('follow-redirects').https,\n    urllib = require(\"url\"),\n    Stream = require('stream').Stream;\n\n/**\n * @namespace URLFetch\n * @name urlfetch\n */\nmodule.exports = openUrlStream;\n\n/**\n * <p>Open a stream to a specified URL</p>\n *\n * @memberOf urlfetch\n * @param {String} url URL to open\n * @param {Object} [options] Optional options object\n * @param {String} [options.userAgent=\"mailcomposer\"] User Agent for the request\n * @return {Stream} Stream for the URL contents\n */\nfunction openUrlStream(url, options) {\n    options = options || {};\n    var urlparts = urllib.parse(url),\n        urloptions = {\n            host: urlparts.hostname,\n            port: urlparts.port || (urlparts.protocol == \"https:\" ? 443 : 80),\n            path: urlparts.path || urlparts.pathname,\n            method: \"GET\",\n            headers: {\n                \"User-Agent\": options.userAgent || \"mailcomposer\"\n            },\n            agent: false\n        },\n        client = (urlparts.protocol == \"https:\" ? https : http),\n        stream = new Stream(),\n        request;\n\n    stream.resume = function() {};\n\n    if (urlparts.auth) {\n        urloptions.auth = urlparts.auth;\n    }\n\n    request = client.request(urloptions, function(response) {\n        if ((response.statusCode || 0).toString().charAt(0) != \"2\") {\n            stream.emit(\"error\", \"Invalid status code \" + (response.statusCode || 0));\n            return;\n        }\n\n        response.on('error', function(err) {\n            stream.emit(\"error\", err);\n        });\n\n        response.on('data', function(chunk) {\n            stream.emit(\"data\", chunk);\n        });\n\n        response.on('end', function(chunk) {\n            if (chunk) {\n                stream.emit(\"data\", chunk);\n            }\n            stream.emit(\"end\");\n        });\n    });\n    request.end();\n\n    request.on('error', function(err) {\n        stream.emit(\"error\", err);\n    });\n\n    return stream;\n}"]},"metadata":{},"sourceType":"script"}
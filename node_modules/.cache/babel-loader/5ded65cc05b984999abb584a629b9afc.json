{"ast":null,"code":"var AWS = require('../core');\n\nvar inherit = AWS.util.inherit;\n/**\n * @api private\n */\n\nvar cachedSecret = {};\n/**\n * @api private\n */\n\nvar expiresHeader = 'presigned-expires';\n/**\n * @api private\n */\n\nAWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {\n  constructor: function V4(request, serviceName) {\n    AWS.Signers.RequestSigner.call(this, request);\n    this.serviceName = serviceName;\n  },\n  algorithm: 'AWS4-HMAC-SHA256',\n  addAuthorization: function addAuthorization(credentials, date) {\n    var datetime = AWS.util.date.iso8601(date).replace(/[:\\-]|\\.\\d{3}/g, '');\n\n    if (this.isPresigned()) {\n      this.updateForPresigned(credentials, datetime);\n    } else {\n      this.addHeaders(credentials, datetime);\n      this.updateBody(credentials);\n    }\n\n    this.request.headers['Authorization'] = this.authorization(credentials, datetime);\n  },\n  addHeaders: function addHeaders(credentials, datetime) {\n    this.request.headers['X-Amz-Date'] = datetime;\n\n    if (credentials.sessionToken) {\n      this.request.headers['x-amz-security-token'] = credentials.sessionToken;\n    }\n  },\n  updateBody: function updateBody(credentials) {\n    if (this.request.params) {\n      this.request.params.AWSAccessKeyId = credentials.accessKeyId;\n\n      if (credentials.sessionToken) {\n        this.request.params.SecurityToken = credentials.sessionToken;\n      }\n\n      this.request.body = AWS.util.queryParamsToString(this.request.params);\n      this.request.headers['Content-Length'] = this.request.body.length;\n    }\n  },\n  updateForPresigned: function updateForPresigned(credentials, datetime) {\n    var credString = this.credentialString(datetime);\n    var qs = {\n      'X-Amz-Date': datetime,\n      'X-Amz-Algorithm': this.algorithm,\n      'X-Amz-Credential': credentials.accessKeyId + '/' + credString,\n      'X-Amz-Expires': this.request.headers[expiresHeader],\n      'X-Amz-SignedHeaders': this.signedHeaders()\n    };\n\n    if (credentials.sessionToken) {\n      qs['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n\n    if (this.request.headers['Content-Type']) {\n      qs['Content-Type'] = this.request.headers['Content-Type'];\n    } // need to pull in any other X-Amz-* headers\n\n\n    AWS.util.each.call(this, this.request.headers, function (key, value) {\n      if (key === expiresHeader) return;\n\n      if (this.isSignableHeader(key) && key.toLowerCase().indexOf('x-amz-') === 0) {\n        qs[key] = value;\n      }\n    });\n    var sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';\n    this.request.path += sep + AWS.util.queryParamsToString(qs);\n  },\n  authorization: function authorization(credentials, datetime) {\n    var parts = [];\n    var credString = this.credentialString(datetime);\n    parts.push(this.algorithm + ' Credential=' + credentials.accessKeyId + '/' + credString);\n    parts.push('SignedHeaders=' + this.signedHeaders());\n    parts.push('Signature=' + this.signature(credentials, datetime));\n    return parts.join(', ');\n  },\n  signature: function signature(credentials, datetime) {\n    var cache = cachedSecret[this.serviceName];\n    var date = datetime.substr(0, 8);\n\n    if (!cache || cache.akid !== credentials.accessKeyId || cache.region !== this.request.region || cache.date !== date) {\n      var kSecret = credentials.secretAccessKey;\n      var kDate = AWS.util.crypto.hmac('AWS4' + kSecret, date, 'buffer');\n      var kRegion = AWS.util.crypto.hmac(kDate, this.request.region, 'buffer');\n      var kService = AWS.util.crypto.hmac(kRegion, this.serviceName, 'buffer');\n      var kCredentials = AWS.util.crypto.hmac(kService, 'aws4_request', 'buffer');\n      cachedSecret[this.serviceName] = {\n        region: this.request.region,\n        date: date,\n        key: kCredentials,\n        akid: credentials.accessKeyId\n      };\n    }\n\n    var key = cachedSecret[this.serviceName].key;\n    return AWS.util.crypto.hmac(key, this.stringToSign(datetime), 'hex');\n  },\n  stringToSign: function stringToSign(datetime) {\n    var parts = [];\n    parts.push('AWS4-HMAC-SHA256');\n    parts.push(datetime);\n    parts.push(this.credentialString(datetime));\n    parts.push(this.hexEncodedHash(this.canonicalString()));\n    return parts.join('\\n');\n  },\n  canonicalString: function canonicalString() {\n    var parts = [];\n    parts.push(this.request.method);\n    parts.push(this.request.pathname());\n    parts.push(this.request.search());\n    parts.push(this.canonicalHeaders() + '\\n');\n    parts.push(this.signedHeaders());\n    parts.push(this.hexEncodedBodyHash());\n    return parts.join('\\n');\n  },\n  canonicalHeaders: function canonicalHeaders() {\n    var headers = [];\n    AWS.util.each.call(this, this.request.headers, function (key, item) {\n      headers.push([key, item]);\n    });\n    headers.sort(function (a, b) {\n      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;\n    });\n    var parts = [];\n    AWS.util.arrayEach.call(this, headers, function (item) {\n      var key = item[0].toLowerCase();\n\n      if (this.isSignableHeader(key)) {\n        parts.push(key + ':' + this.canonicalHeaderValues(item[1].toString()));\n      }\n    });\n    return parts.join('\\n');\n  },\n  canonicalHeaderValues: function canonicalHeaderValues(values) {\n    return values.replace(/\\s+/g, ' ').replace(/^\\s+|\\s+$/g, '');\n  },\n  signedHeaders: function signedHeaders() {\n    var keys = [];\n    AWS.util.each.call(this, this.request.headers, function (key) {\n      key = key.toLowerCase();\n      if (this.isSignableHeader(key)) keys.push(key);\n    });\n    return keys.sort().join(';');\n  },\n  credentialString: function credentialString(datetime) {\n    var parts = [];\n    parts.push(datetime.substr(0, 8));\n    parts.push(this.request.region);\n    parts.push(this.serviceName);\n    parts.push('aws4_request');\n    return parts.join('/');\n  },\n  hexEncodedHash: function hash(string) {\n    return AWS.util.crypto.sha256(string, 'hex');\n  },\n  hexEncodedBodyHash: function hexEncodedBodyHash() {\n    if (this.isPresigned() && this.serviceName === 's3') {\n      return 'UNSIGNED-PAYLOAD';\n    } else if (this.request.headers['X-Amz-Content-Sha256']) {\n      return this.request.headers['X-Amz-Content-Sha256'];\n    } else {\n      return this.hexEncodedHash(this.request.body || '');\n    }\n  },\n  unsignableHeaders: ['authorization', 'content-type', 'content-length', 'user-agent', expiresHeader],\n  isSignableHeader: function isSignableHeader(key) {\n    if (key.toLowerCase().indexOf('x-amz-') === 0) return true;\n    return this.unsignableHeaders.indexOf(key) < 0;\n  },\n  isPresigned: function isPresigned() {\n    return this.request.headers[expiresHeader] ? true : false;\n  }\n});\nmodule.exports = AWS.Signers.V4;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/signers/v4.js"],"names":["AWS","require","inherit","util","cachedSecret","expiresHeader","Signers","V4","RequestSigner","constructor","request","serviceName","call","algorithm","addAuthorization","credentials","date","datetime","iso8601","replace","isPresigned","updateForPresigned","addHeaders","updateBody","headers","authorization","sessionToken","params","AWSAccessKeyId","accessKeyId","SecurityToken","body","queryParamsToString","length","credString","credentialString","qs","signedHeaders","each","key","value","isSignableHeader","toLowerCase","indexOf","sep","path","parts","push","signature","join","cache","substr","akid","region","kSecret","secretAccessKey","kDate","crypto","hmac","kRegion","kService","kCredentials","stringToSign","hexEncodedHash","canonicalString","method","pathname","search","canonicalHeaders","hexEncodedBodyHash","item","sort","a","b","arrayEach","canonicalHeaderValues","toString","values","keys","hash","string","sha256","unsignableHeaders","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('../core');\nvar inherit = AWS.util.inherit;\n\n/**\n * @api private\n */\nvar cachedSecret = {};\n\n/**\n * @api private\n */\nvar expiresHeader = 'presigned-expires';\n\n/**\n * @api private\n */\nAWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {\n  constructor: function V4(request, serviceName) {\n    AWS.Signers.RequestSigner.call(this, request);\n    this.serviceName = serviceName;\n  },\n\n  algorithm: 'AWS4-HMAC-SHA256',\n\n  addAuthorization: function addAuthorization(credentials, date) {\n    var datetime = AWS.util.date.iso8601(date).replace(/[:\\-]|\\.\\d{3}/g, '');\n\n    if (this.isPresigned()) {\n      this.updateForPresigned(credentials, datetime);\n    } else {\n      this.addHeaders(credentials, datetime);\n      this.updateBody(credentials);\n    }\n\n    this.request.headers['Authorization'] =\n      this.authorization(credentials, datetime);\n  },\n\n  addHeaders: function addHeaders(credentials, datetime) {\n    this.request.headers['X-Amz-Date'] = datetime;\n    if (credentials.sessionToken) {\n      this.request.headers['x-amz-security-token'] = credentials.sessionToken;\n    }\n  },\n\n  updateBody: function updateBody(credentials) {\n    if (this.request.params) {\n      this.request.params.AWSAccessKeyId = credentials.accessKeyId;\n\n      if (credentials.sessionToken) {\n        this.request.params.SecurityToken = credentials.sessionToken;\n      }\n\n      this.request.body = AWS.util.queryParamsToString(this.request.params);\n      this.request.headers['Content-Length'] = this.request.body.length;\n    }\n  },\n\n  updateForPresigned: function updateForPresigned(credentials, datetime) {\n    var credString = this.credentialString(datetime);\n    var qs = {\n      'X-Amz-Date': datetime,\n      'X-Amz-Algorithm': this.algorithm,\n      'X-Amz-Credential': credentials.accessKeyId + '/' + credString,\n      'X-Amz-Expires': this.request.headers[expiresHeader],\n      'X-Amz-SignedHeaders': this.signedHeaders()\n    };\n\n    if (credentials.sessionToken) {\n      qs['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n\n    if (this.request.headers['Content-Type']) {\n      qs['Content-Type'] = this.request.headers['Content-Type'];\n    }\n\n    // need to pull in any other X-Amz-* headers\n    AWS.util.each.call(this, this.request.headers, function(key, value) {\n      if (key === expiresHeader) return;\n      if (this.isSignableHeader(key) &&\n          key.toLowerCase().indexOf('x-amz-') === 0) {\n        qs[key] = value;\n      }\n    });\n\n    var sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';\n    this.request.path += sep + AWS.util.queryParamsToString(qs);\n  },\n\n  authorization: function authorization(credentials, datetime) {\n    var parts = [];\n    var credString = this.credentialString(datetime);\n    parts.push(this.algorithm + ' Credential=' +\n      credentials.accessKeyId + '/' + credString);\n    parts.push('SignedHeaders=' + this.signedHeaders());\n    parts.push('Signature=' + this.signature(credentials, datetime));\n    return parts.join(', ');\n  },\n\n  signature: function signature(credentials, datetime) {\n    var cache = cachedSecret[this.serviceName];\n    var date = datetime.substr(0, 8);\n    if (!cache ||\n        cache.akid !== credentials.accessKeyId ||\n        cache.region !== this.request.region ||\n        cache.date !== date) {\n      var kSecret = credentials.secretAccessKey;\n      var kDate = AWS.util.crypto.hmac('AWS4' + kSecret, date, 'buffer');\n      var kRegion = AWS.util.crypto.hmac(kDate, this.request.region, 'buffer');\n      var kService = AWS.util.crypto.hmac(kRegion, this.serviceName, 'buffer');\n      var kCredentials = AWS.util.crypto.hmac(kService, 'aws4_request', 'buffer');\n      cachedSecret[this.serviceName] = {\n        region: this.request.region, date: date,\n        key: kCredentials, akid: credentials.accessKeyId\n      };\n    }\n\n    var key = cachedSecret[this.serviceName].key;\n    return AWS.util.crypto.hmac(key, this.stringToSign(datetime), 'hex');\n  },\n\n  stringToSign: function stringToSign(datetime) {\n    var parts = [];\n    parts.push('AWS4-HMAC-SHA256');\n    parts.push(datetime);\n    parts.push(this.credentialString(datetime));\n    parts.push(this.hexEncodedHash(this.canonicalString()));\n    return parts.join('\\n');\n  },\n\n  canonicalString: function canonicalString() {\n    var parts = [];\n    parts.push(this.request.method);\n    parts.push(this.request.pathname());\n    parts.push(this.request.search());\n    parts.push(this.canonicalHeaders() + '\\n');\n    parts.push(this.signedHeaders());\n    parts.push(this.hexEncodedBodyHash());\n    return parts.join('\\n');\n  },\n\n  canonicalHeaders: function canonicalHeaders() {\n    var headers = [];\n    AWS.util.each.call(this, this.request.headers, function (key, item) {\n      headers.push([key, item]);\n    });\n    headers.sort(function (a, b) {\n      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;\n    });\n    var parts = [];\n    AWS.util.arrayEach.call(this, headers, function (item) {\n      var key = item[0].toLowerCase();\n      if (this.isSignableHeader(key)) {\n        parts.push(key + ':' +\n          this.canonicalHeaderValues(item[1].toString()));\n      }\n    });\n    return parts.join('\\n');\n  },\n\n  canonicalHeaderValues: function canonicalHeaderValues(values) {\n    return values.replace(/\\s+/g, ' ').replace(/^\\s+|\\s+$/g, '');\n  },\n\n  signedHeaders: function signedHeaders() {\n    var keys = [];\n    AWS.util.each.call(this, this.request.headers, function (key) {\n      key = key.toLowerCase();\n      if (this.isSignableHeader(key)) keys.push(key);\n    });\n    return keys.sort().join(';');\n  },\n\n  credentialString: function credentialString(datetime) {\n    var parts = [];\n    parts.push(datetime.substr(0, 8));\n    parts.push(this.request.region);\n    parts.push(this.serviceName);\n    parts.push('aws4_request');\n    return parts.join('/');\n  },\n\n  hexEncodedHash: function hash(string) {\n    return AWS.util.crypto.sha256(string, 'hex');\n  },\n\n  hexEncodedBodyHash: function hexEncodedBodyHash() {\n    if (this.isPresigned() && this.serviceName === 's3') {\n      return 'UNSIGNED-PAYLOAD';\n    } else if (this.request.headers['X-Amz-Content-Sha256']) {\n      return this.request.headers['X-Amz-Content-Sha256'];\n    } else {\n      return this.hexEncodedHash(this.request.body || '');\n    }\n  },\n\n  unsignableHeaders: ['authorization', 'content-type', 'content-length',\n                      'user-agent', expiresHeader],\n\n  isSignableHeader: function isSignableHeader(key) {\n    if (key.toLowerCase().indexOf('x-amz-') === 0) return true;\n    return this.unsignableHeaders.indexOf(key) < 0;\n  },\n\n  isPresigned: function isPresigned() {\n    return this.request.headers[expiresHeader] ? true : false;\n  }\n\n});\n\nmodule.exports = AWS.Signers.V4;\n"]},"metadata":{},"sourceType":"script"}
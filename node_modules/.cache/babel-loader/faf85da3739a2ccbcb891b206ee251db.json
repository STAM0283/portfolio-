{"ast":null,"code":"\"use strict\";\n\nvar wellKnownHosts = require(\"../wellknown\"),\n    simplesmtp = require(\"simplesmtp\"),\n    wellKnownDomains = {}; // Expose to the world\n\n\nmodule.exports = SMTPTransport; // Convert Wellknown keys to lowercase\n\nwellKnownHosts = Object.keys(wellKnownHosts).reduce(function (lowerCaseKeys, currentKey) {\n  [].concat(wellKnownHosts[currentKey].domains || []).forEach(function (domain) {\n    wellKnownDomains[domain] = currentKey.toLowerCase().trim();\n  });\n  lowerCaseKeys[currentKey.toLowerCase().trim()] = wellKnownHosts[currentKey];\n  return lowerCaseKeys;\n}, {});\n/**\n * <p>Generates a Transport object for SMTP</p>\n *\n * <p>NB! This is a pool of connections that try to keep themselves alive. The\n * connection is not closed to the server once the message is delivered.</p>\n *\n * <p>Possible options can be the following:</p>\n *\n * <ul>\n *     <li><b>service</b> - a well known service identifier (\"Gmail\", \"Hotmail\"\n *         etc.) for auto-completing host, port and secure connection settings</li>\n *     <li><b>host</b> - hostname of the SMTP server</li>\n *     <li><b>port</b> - port of the SMTP server</li>\n *     <li><b>secureConnection</b> - use SSL</li>\n *     <li><b>name</b> - the name of the client server</li>\n *     <li><b>authMethod</b> -specified the authMethod, value can be [\"plain\", \"login\"], default is \"plain\"</li>\n *     <li><b>auth</b> - authentication object as <code>{user:\"...\", pass:\"...\"}</code>\n *     <li><b>ignoreTLS</b> - ignore server support for STARTTLS</li>\n *     <li><b>debug</b> - output client and server messages to console</li>\n *     <li><b>maxConnections</b> - how many connections to keep in the pool</li>\n *     <li><b>maxMessages</b> - limit the count of messages to send through a single connection</li>\n *     <li><b>greetingTimeout</b> - Time to wait in ms until greeting message is received from the server (defaults to 10000)</li>\n *     <li><b>socketTimeout</b> - Time of inactivity until the connection is closed (defaults to 1 hour)</li>\n * </ul>\n *\n * @constructor\n * @param {Object} [options] SMTP options\n */\n\nfunction SMTPTransport(options) {\n  this.options = options || {};\n  this.initOptions();\n  this.pool = simplesmtp.createClientPool(this.options.port, this.options.host, this.options);\n}\n\nSMTPTransport.wellKnownHosts = wellKnownHosts; // Setup version info for the transport\n\nSMTPTransport.prototype.version = simplesmtp.version;\n/**\n * <p>Initializes the SMTP connection options. Needed mostly for legacy option\n * values and also for filling in the well known hosts data if needed.</p>\n */\n\nSMTPTransport.prototype.initOptions = function () {\n  var keys, key, i, len, service; // provide support for legacy API\n\n  if (this.options.use_authentication === false) {\n    this.options.auth = false;\n  } else if (this.options.user || this.options.pass || this.options.XOAuthToken) {\n    if (!this.options.auth) {\n      this.options.auth = {};\n    }\n\n    this.options.authMethod = this.options.authMethod || \"PLAIN\";\n    this.options.auth.user = this.options.auth.user || this.options.user;\n    this.options.auth.pass = this.options.auth.pass || this.options.pass;\n    this.options.auth.XOAuthToken = this.options.auth.XOAuthToken || this.options.XOAuthToken;\n    this.options.auth.XOAuth2 = this.options.auth.XOAuth2 || this.options.XOAuth2;\n  }\n\n  if (this.options.ssl) {\n    this.options.secureConnection = true;\n  }\n\n  if (this.options.tls === false) {\n    this.options.ignoreTLS = true;\n  } // lets be modest just in case\n\n\n  this.options.maxConnections = this.options.maxConnections || 5; // detect service from the e-mail address if host is not provided before falling to localhost\n\n  if (!this.options.host && !this.options.port && !this.options.service && this.options.auth && this.options.auth.user) {\n    this.options.service = wellKnownDomains[(this.options.auth.user || \"\").toString().split(\"@\").pop().toLowerCase().trim()] || false;\n  } // use well known settings if service is defined\n\n\n  if ((service = this.options.service) && (service = service.toString().toLowerCase().trim()) && wellKnownHosts[service]) {\n    keys = Object.keys(wellKnownHosts[service]);\n\n    for (i = 0, len = keys.length; i < len; i++) {\n      key = keys[i];\n      this.options[key] = this.options[key] || wellKnownHosts[service][key];\n    }\n  }\n};\n/**\n * <p>Forwards the mailcomposer message object to the simplesmpt client pool</p>\n *\n * @param {Object} emailMessage MailComposer object\n * @param {Function} callback Callback function to run when the sending is completed\n */\n\n\nSMTPTransport.prototype.sendMail = function (emailMessage, callback) {\n  // force SMTP encoding\n  emailMessage.options.escapeSMTP = true;\n\n  if (this.options.requiresAuth && (!this.options.auth || !(this.options.auth.user && this.options.auth.pass || this.options.auth.XOAuth2 || this.options.auth.XOAuthToken))) {\n    return typeof callback == \"function\" && callback(new Error(\"Authentication required, invalid details provided\"));\n  }\n\n  this.pool.sendMail(emailMessage, callback);\n};\n/**\n * <p>Closes the client pool</p>\n *\n * @param {Function} callback Callback function to run once the pool is closed\n */\n\n\nSMTPTransport.prototype.close = function (callback) {\n  this.pool.close(callback);\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/express-mailer/node_modules/nodemailer/lib/engines/smtp.js"],"names":["wellKnownHosts","require","simplesmtp","wellKnownDomains","module","exports","SMTPTransport","Object","keys","reduce","lowerCaseKeys","currentKey","concat","domains","forEach","domain","toLowerCase","trim","options","initOptions","pool","createClientPool","port","host","prototype","version","key","i","len","service","use_authentication","auth","user","pass","XOAuthToken","authMethod","XOAuth2","ssl","secureConnection","tls","ignoreTLS","maxConnections","toString","split","pop","length","sendMail","emailMessage","callback","escapeSMTP","requiresAuth","Error","close"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar wellKnownHosts = require(\"../wellknown\"),\n    simplesmtp = require(\"simplesmtp\"),\n    wellKnownDomains = {};\n\n// Expose to the world\nmodule.exports = SMTPTransport;\n\n// Convert Wellknown keys to lowercase\nwellKnownHosts = Object.keys(wellKnownHosts).reduce(function(lowerCaseKeys, currentKey){\n\n    [].concat(wellKnownHosts[currentKey].domains || []).forEach(function(domain){\n        wellKnownDomains[domain] = currentKey.toLowerCase().trim();\n    });\n\n    lowerCaseKeys[currentKey.toLowerCase().trim()] = wellKnownHosts[currentKey];\n    return lowerCaseKeys;\n},{});\n\n/**\n * <p>Generates a Transport object for SMTP</p>\n *\n * <p>NB! This is a pool of connections that try to keep themselves alive. The\n * connection is not closed to the server once the message is delivered.</p>\n *\n * <p>Possible options can be the following:</p>\n *\n * <ul>\n *     <li><b>service</b> - a well known service identifier (\"Gmail\", \"Hotmail\"\n *         etc.) for auto-completing host, port and secure connection settings</li>\n *     <li><b>host</b> - hostname of the SMTP server</li>\n *     <li><b>port</b> - port of the SMTP server</li>\n *     <li><b>secureConnection</b> - use SSL</li>\n *     <li><b>name</b> - the name of the client server</li>\n *     <li><b>authMethod</b> -specified the authMethod, value can be [\"plain\", \"login\"], default is \"plain\"</li>\n *     <li><b>auth</b> - authentication object as <code>{user:\"...\", pass:\"...\"}</code>\n *     <li><b>ignoreTLS</b> - ignore server support for STARTTLS</li>\n *     <li><b>debug</b> - output client and server messages to console</li>\n *     <li><b>maxConnections</b> - how many connections to keep in the pool</li>\n *     <li><b>maxMessages</b> - limit the count of messages to send through a single connection</li>\n *     <li><b>greetingTimeout</b> - Time to wait in ms until greeting message is received from the server (defaults to 10000)</li>\n *     <li><b>socketTimeout</b> - Time of inactivity until the connection is closed (defaults to 1 hour)</li>\n * </ul>\n *\n * @constructor\n * @param {Object} [options] SMTP options\n */\nfunction SMTPTransport(options){\n    this.options = options || {};\n\n    this.initOptions();\n\n    this.pool = simplesmtp.createClientPool(this.options.port,\n        this.options.host, this.options);\n}\n\nSMTPTransport.wellKnownHosts = wellKnownHosts;\n\n// Setup version info for the transport\nSMTPTransport.prototype.version = simplesmtp.version;\n\n/**\n * <p>Initializes the SMTP connection options. Needed mostly for legacy option\n * values and also for filling in the well known hosts data if needed.</p>\n */\nSMTPTransport.prototype.initOptions = function(){\n    var keys, key, i, len, service;\n\n    // provide support for legacy API\n    if(this.options.use_authentication === false){\n        this.options.auth = false;\n    }else if(this.options.user || this.options.pass || this.options.XOAuthToken){\n        if(!this.options.auth){\n            this.options.auth = {};\n        }\n        this.options.authMethod = this.options.authMethod || \"PLAIN\";\n        this.options.auth.user = this.options.auth.user || this.options.user;\n        this.options.auth.pass = this.options.auth.pass || this.options.pass;\n        this.options.auth.XOAuthToken = this.options.auth.XOAuthToken || this.options.XOAuthToken;\n        this.options.auth.XOAuth2 = this.options.auth.XOAuth2 || this.options.XOAuth2;\n    }\n\n    if(this.options.ssl){\n        this.options.secureConnection = true;\n    }\n\n    if(this.options.tls === false){\n        this.options.ignoreTLS = true;\n    }\n\n    // lets be modest just in case\n    this.options.maxConnections = this.options.maxConnections || 5;\n\n    // detect service from the e-mail address if host is not provided before falling to localhost\n    if(!this.options.host && !this.options.port && !this.options.service && this.options.auth && this.options.auth.user){\n        this.options.service = wellKnownDomains[(this.options.auth.user || \"\").toString().split(\"@\").pop().toLowerCase().trim()] || false;\n    }\n\n    // use well known settings if service is defined\n    if((service = this.options.service) && (service = service.toString().toLowerCase().trim()) && wellKnownHosts[service]){\n        keys = Object.keys(wellKnownHosts[service]);\n        for(i=0, len=keys.length; i<len; i++){\n            key = keys[i];\n            this.options[key] = this.options[key] ||\n                    wellKnownHosts[service][key];\n        }\n    }\n};\n\n/**\n * <p>Forwards the mailcomposer message object to the simplesmpt client pool</p>\n *\n * @param {Object} emailMessage MailComposer object\n * @param {Function} callback Callback function to run when the sending is completed\n */\nSMTPTransport.prototype.sendMail = function(emailMessage, callback){\n    // force SMTP encoding\n    emailMessage.options.escapeSMTP = true;\n\n    if(this.options.requiresAuth &&\n      (!this.options.auth || !((this.options.auth.user && this.options.auth.pass) || this.options.auth.XOAuth2 || this.options.auth.XOAuthToken))){\n        return typeof callback == \"function\" &&\n            callback(new Error(\"Authentication required, invalid details provided\"));\n    }\n\n    this.pool.sendMail(emailMessage, callback);\n};\n\n/**\n * <p>Closes the client pool</p>\n *\n * @param {Function} callback Callback function to run once the pool is closed\n */\nSMTPTransport.prototype.close = function(callback){\n    this.pool.close(callback);\n};\n"]},"metadata":{},"sourceType":"script"}
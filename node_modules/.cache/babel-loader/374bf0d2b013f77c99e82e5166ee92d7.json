{"ast":null,"code":"\"use strict\";\n\nvar SendmailTransport = require(\"./engines/sendmail\"),\n    SMTPTransport = require(\"./engines/smtp\"),\n    SESTransport = require(\"./engines/ses\"),\n    StubTransport = require(\"./engines/stub\"),\n    DirectTransport = require(\"./engines/direct\"),\n    PickupTransport = require(\"./engines/pickup\"); // Expose to the world\n\n\nmodule.exports.Transport = Transport;\n/**\n * Hash of available transports (uppercase) and their constructor methods\n */\n\nTransport.transports = {\n  \"SMTP\": SMTPTransport,\n  \"SES\": SESTransport,\n  \"SENDMAIL\": SendmailTransport,\n  \"STUB\": StubTransport,\n  \"DIRECT\": DirectTransport,\n  \"PICKUP\": PickupTransport\n};\n/**\n * <p>Generates a Transport object that can be used to deliver e-mail.</p>\n *\n * <p>All transport objects need to have <code>sendMail</code> property defined\n * and if needed, also an <code>close</code> method</p>\n *\n * @constructor\n * @param {String|Function} type The type of the transport, currently available: SMTP, SES and Sendmail\n */\n\nfunction Transport(type, options) {\n  var Constructor;\n  this.options = options || {};\n\n  if (typeof type == \"function\") {\n    this.transportType = (type.name || \"CUSTOM\").toString().toUpperCase().trim();\n    Constructor = type;\n  } else {\n    this.transportType = (type || \"direct\").toString().trim().toUpperCase();\n    this.dkimOptions = false;\n\n    if (!(this.transportType in Transport.transports) && this.transportType.toLowerCase() in SMTPTransport.wellKnownHosts) {\n      this.options.service = this.transportType;\n      this.transportType = SMTPTransport.wellKnownHosts[this.transportType.toLowerCase()].transport;\n    }\n\n    Constructor = Transport.transports[this.transportType];\n  }\n\n  if (Constructor) {\n    this.transport = new Constructor(this.options);\n    this.version = this.transport.version || false;\n  } else {\n    this.transport = false;\n  }\n}\n/**\n * <p>Forwards the generated mailcomposer object to the selected transport\n * object for message delivery</p>\n *\n * @param {Object} emailMessage MailComposer object\n * @param {Function} callback Callback function to run when the sending is completed\n */\n\n\nTransport.prototype.sendMailWithTransport = function (emailMessage, callback) {\n  if (!this.transport) {\n    return callback(new Error(\"Invalid transport method defined\"));\n  }\n\n  if (this.dkimOptions) {\n    emailMessage.useDKIM(this.dkimOptions);\n  }\n\n  this.transport.sendMail(emailMessage, callback);\n};\n/**\n * <p>Sets up DKIM signing for this transport object</p>\n *\n * @param {Object} dkim DKIM options\n */\n\n\nTransport.prototype.useDKIM = function (dkim) {\n  this.dkimOptions = dkim;\n};\n/**\n * <p>Closes the transport when needed, useful with SMTP (which uses connection\n * pool) but not so much with SES or Sendmail</p>\n *\n * @param {Function} Callback function to run when the connection is closed\n */\n\n\nTransport.prototype.close = function (callback) {\n  if (!this.transport) {\n    return callback(new Error(\"Invalid transport method defined\"));\n  }\n\n  if (typeof this.transport.close == \"function\") {\n    this.transport.close(callback);\n  } else {\n    if (typeof callback == \"function\") {\n      callback(null);\n    }\n  }\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/express-mailer/node_modules/nodemailer/lib/transport.js"],"names":["SendmailTransport","require","SMTPTransport","SESTransport","StubTransport","DirectTransport","PickupTransport","module","exports","Transport","transports","type","options","Constructor","transportType","name","toString","toUpperCase","trim","dkimOptions","toLowerCase","wellKnownHosts","service","transport","version","prototype","sendMailWithTransport","emailMessage","callback","Error","useDKIM","sendMail","dkim","close"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar SendmailTransport = require(\"./engines/sendmail\"),\n    SMTPTransport = require(\"./engines/smtp\"),\n    SESTransport = require(\"./engines/ses\"),\n    StubTransport = require(\"./engines/stub\"),\n    DirectTransport = require(\"./engines/direct\"),\n    PickupTransport = require(\"./engines/pickup\");\n\n\n// Expose to the world\nmodule.exports.Transport = Transport;\n\n/**\n * Hash of available transports (uppercase) and their constructor methods\n */\nTransport.transports = {\n    \"SMTP\": SMTPTransport,\n    \"SES\": SESTransport,\n    \"SENDMAIL\": SendmailTransport,\n    \"STUB\": StubTransport,\n    \"DIRECT\": DirectTransport,\n    \"PICKUP\": PickupTransport\n};\n\n/**\n * <p>Generates a Transport object that can be used to deliver e-mail.</p>\n *\n * <p>All transport objects need to have <code>sendMail</code> property defined\n * and if needed, also an <code>close</code> method</p>\n *\n * @constructor\n * @param {String|Function} type The type of the transport, currently available: SMTP, SES and Sendmail\n */\nfunction Transport(type, options){\n    var Constructor;\n\n    this.options = options || {};\n\n    if(typeof type == \"function\"){\n        this.transportType = (type.name || \"CUSTOM\").toString().toUpperCase().trim();\n        Constructor = type;\n    }else{\n        this.transportType = (type || \"direct\").toString().trim().toUpperCase();\n        this.dkimOptions = false;\n\n        if(!(this.transportType in Transport.transports) && this.transportType.toLowerCase() in SMTPTransport.wellKnownHosts){\n            this.options.service = this.transportType;\n            this.transportType  = SMTPTransport.wellKnownHosts[this.transportType.toLowerCase()].transport;\n        }\n\n        Constructor = Transport.transports[this.transportType];\n    }\n\n    if(Constructor){\n        this.transport = new Constructor(this.options);\n        this.version = this.transport.version || false;\n    }else{\n        this.transport = false;\n    }\n\n}\n\n/**\n * <p>Forwards the generated mailcomposer object to the selected transport\n * object for message delivery</p>\n *\n * @param {Object} emailMessage MailComposer object\n * @param {Function} callback Callback function to run when the sending is completed\n */\nTransport.prototype.sendMailWithTransport = function(emailMessage, callback){\n    if(!this.transport){\n        return callback(new Error(\"Invalid transport method defined\"));\n    }\n\n    if(this.dkimOptions){\n        emailMessage.useDKIM(this.dkimOptions);\n    }\n\n    this.transport.sendMail(emailMessage, callback);\n};\n\n/**\n * <p>Sets up DKIM signing for this transport object</p>\n *\n * @param {Object} dkim DKIM options\n */\nTransport.prototype.useDKIM = function(dkim){\n    this.dkimOptions = dkim;\n};\n\n/**\n * <p>Closes the transport when needed, useful with SMTP (which uses connection\n * pool) but not so much with SES or Sendmail</p>\n *\n * @param {Function} Callback function to run when the connection is closed\n */\nTransport.prototype.close = function(callback){\n    if(!this.transport){\n        return callback(new Error(\"Invalid transport method defined\"));\n    }\n\n    if(typeof this.transport.close == \"function\"){\n        this.transport.close(callback);\n    }else{\n        if(typeof callback == \"function\"){\n            callback(null);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var util = require('../util');\n\nvar builder = require('xmlbuilder');\n\nfunction XmlBuilder() {}\n\nXmlBuilder.prototype.toXML = function (params, shape, rootElement) {\n  var xml = builder.create(rootElement);\n  applyNamespaces(xml, shape);\n  serialize(xml, params, shape);\n  return xml.children.length === 0 ? '' : xml.root().toString();\n};\n\nfunction serialize(xml, value, shape) {\n  switch (shape.type) {\n    case 'structure':\n      return serializeStructure(xml, value, shape);\n\n    case 'map':\n      return serializeMap(xml, value, shape);\n\n    case 'list':\n      return serializeList(xml, value, shape);\n\n    default:\n      return serializeScalar(xml, value, shape);\n  }\n}\n\nfunction serializeStructure(xml, params, shape) {\n  util.arrayEach(shape.memberNames, function (memberName) {\n    var memberShape = shape.members[memberName];\n    if (memberShape.location !== 'body') return;\n    var value = params[memberName];\n    var name = memberShape.queryName || memberShape.name;\n\n    if (value !== undefined && value !== null) {\n      if (memberShape.isXmlAttribute) {\n        xml.att(name, value);\n      } else if (memberShape.flattened) {\n        serialize(xml, value, memberShape);\n      } else {\n        var element = xml.ele(name);\n        applyNamespaces(element, memberShape);\n        serialize(element, value, memberShape);\n      }\n    }\n  });\n}\n\nfunction serializeMap(xml, map, shape) {\n  var xmlKey = shape.key.queryName || shape.key.name || 'key';\n  var xmlValue = shape.value.queryName || shape.value.name || 'value';\n  util.each(map, function (key, value) {\n    var entry = xml.ele(shape.flattened ? shape.name : 'entry');\n    serialize(entry.ele(xmlKey), key, shape.key);\n    serialize(entry.ele(xmlValue), value, shape.value);\n  });\n}\n\nfunction serializeList(xml, list, shape) {\n  if (shape.flattened) {\n    util.arrayEach(list, function (value) {\n      var name = shape.member.queryName || shape.member.name || shape.name;\n      var element = xml.ele(name);\n      serialize(element, value, shape.member);\n    });\n  } else {\n    util.arrayEach(list, function (value) {\n      var name = shape.member.queryName || shape.member.name || 'member';\n      var element = xml.ele(name);\n      serialize(element, value, shape.member);\n    });\n  }\n}\n\nfunction serializeScalar(xml, value, shape) {\n  xml.txt(shape.toWireFormat(value));\n}\n\nfunction applyNamespaces(xml, shape) {\n  var uri,\n      prefix = 'xmlns';\n\n  if (shape.xmlNamespaceUri) {\n    uri = shape.xmlNamespaceUri;\n    if (shape.xmlNamespacePrefix) prefix += ':' + shape.xmlNamespacePrefix;\n  } else if (xml.isRoot && shape.api.xmlNamespaceUri) {\n    uri = shape.api.xmlNamespaceUri;\n  }\n\n  if (uri) xml.att(prefix, uri);\n}\n\nmodule.exports = XmlBuilder;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/xml/builder.js"],"names":["util","require","builder","XmlBuilder","prototype","toXML","params","shape","rootElement","xml","create","applyNamespaces","serialize","children","length","root","toString","value","type","serializeStructure","serializeMap","serializeList","serializeScalar","arrayEach","memberNames","memberName","memberShape","members","location","name","queryName","undefined","isXmlAttribute","att","flattened","element","ele","map","xmlKey","key","xmlValue","each","entry","list","member","txt","toWireFormat","uri","prefix","xmlNamespaceUri","xmlNamespacePrefix","isRoot","api","module","exports"],"mappings":"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","sourcesContent":["var util = require('../util');\nvar builder = require('xmlbuilder');\n\nfunction XmlBuilder() { }\n\nXmlBuilder.prototype.toXML = function(params, shape, rootElement) {\n  var xml = builder.create(rootElement);\n  applyNamespaces(xml, shape);\n  serialize(xml, params, shape);\n  return xml.children.length === 0 ? '' : xml.root().toString();\n};\n\nfunction serialize(xml, value, shape) {\n  switch(shape.type) {\n    case 'structure': return serializeStructure(xml, value, shape);\n    case 'map': return serializeMap(xml, value, shape);\n    case 'list': return serializeList(xml, value, shape);\n    default: return serializeScalar(xml, value, shape);\n  }\n}\n\nfunction serializeStructure(xml, params, shape) {\n  util.arrayEach(shape.memberNames, function(memberName) {\n    var memberShape = shape.members[memberName];\n    if (memberShape.location !== 'body') return;\n\n    var value = params[memberName];\n    var name = memberShape.queryName || memberShape.name;\n    if (value !== undefined && value !== null) {\n      if (memberShape.isXmlAttribute) {\n        xml.att(name, value);\n      } else if (memberShape.flattened) {\n        serialize(xml, value, memberShape);\n      } else {\n        var element = xml.ele(name);\n        applyNamespaces(element, memberShape);\n        serialize(element, value, memberShape);\n      }\n    }\n  });\n}\n\nfunction serializeMap(xml, map, shape) {\n  var xmlKey = shape.key.queryName || shape.key.name || 'key';\n  var xmlValue = shape.value.queryName || shape.value.name || 'value';\n\n  util.each(map, function(key, value) {\n    var entry = xml.ele(shape.flattened ? shape.name : 'entry');\n    serialize(entry.ele(xmlKey), key, shape.key);\n    serialize(entry.ele(xmlValue), value, shape.value);\n  });\n}\n\nfunction serializeList(xml, list, shape) {\n  if (shape.flattened) {\n    util.arrayEach(list, function(value) {\n      var name = shape.member.queryName || shape.member.name || shape.name;\n      var element = xml.ele(name);\n      serialize(element, value, shape.member);\n    });\n  } else {\n    util.arrayEach(list, function(value) {\n      var name = shape.member.queryName || shape.member.name || 'member';\n      var element = xml.ele(name);\n      serialize(element, value, shape.member);\n    });\n  }\n}\n\nfunction serializeScalar(xml, value, shape) {\n  xml.txt(shape.toWireFormat(value));\n}\n\nfunction applyNamespaces(xml, shape) {\n  var uri, prefix = 'xmlns';\n  if (shape.xmlNamespaceUri) {\n    uri = shape.xmlNamespaceUri;\n    if (shape.xmlNamespacePrefix) prefix += ':' + shape.xmlNamespacePrefix;\n  } else if (xml.isRoot && shape.api.xmlNamespaceUri) {\n    uri = shape.api.xmlNamespaceUri;\n  }\n\n  if (uri) xml.att(prefix, uri);\n}\n\nmodule.exports = XmlBuilder;\n"]},"metadata":{},"sourceType":"script"}
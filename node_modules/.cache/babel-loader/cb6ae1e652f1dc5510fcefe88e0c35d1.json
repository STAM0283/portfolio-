{"ast":null,"code":"'use strict';\n\nvar crypto = require('crypto');\n\nvar mimelib = require('mimelib');\n\nvar punycode = require('punycode');\n/**\n * @namespace DKIM Signer module\n * @name dkimsign\n */\n\n\nmodule.exports.DKIMSign = DKIMSign;\nmodule.exports.generateDKIMHeader = generateDKIMHeader;\nmodule.exports.sha256 = sha256;\n/**\n * <p>Sign an email with provided DKIM key, uses RSA-SHA256.</p>\n *\n * @memberOf dkimsign\n * @param {String} email Full e-mail source complete with headers and body to sign\n * @param {Object} options DKIM options\n * @param {String} [options.headerFieldNames='from:to:cc:subject'] Header fields to sign\n * @param {String} options.privateKey DKMI private key\n * @param {String} options.domainName Domain name to use for signing (ie: 'domain.com')\n * @param {String} options.keySelector Selector for the DKMI public key (ie. 'dkim' if you have set up a TXT record for 'dkim._domainkey.domain.com')\n *\n * @return {String} Signed DKIM-Signature header field for prepending\n */\n\nfunction DKIMSign(email, options) {\n  options = options || {};\n  email = (email || '').toString('utf-8');\n  var match = email.match(/^\\r?\\n|(?:\\r?\\n){2}/),\n      headers = match && email.substr(0, match.index) || '',\n      body = match && email.substr(match.index + match[0].length) || email; // all listed fields from RFC4871 #5.5\n  // Some prociders do not like Message-Id, Date, Bounces-To and Return-Path\n  // fields in DKIM signed data so these are not automatcially included\n\n  var defaultFieldNames = 'From:Sender:Reply-To:Subject:To:' + 'Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:' + 'Content-Description:Resent-Date:Resent-From:Resent-Sender:' + 'Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:' + 'List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:' + 'List-Owner:List-Archive';\n  var dkim = generateDKIMHeader(options.domainName, options.keySelector, options.headerFieldNames || defaultFieldNames, headers, body),\n      canonicalizedHeaderData = DKIMCanonicalizer.relaxedHeaders(headers, options.headerFieldNames || defaultFieldNames),\n      canonicalizedDKIMHeader = DKIMCanonicalizer.relaxedHeaderLine(dkim),\n      signer,\n      signature;\n  canonicalizedHeaderData.headers += canonicalizedDKIMHeader.key + ':' + canonicalizedDKIMHeader.value;\n  signer = crypto.createSign('RSA-SHA256');\n  signer.update(canonicalizedHeaderData.headers);\n  signature = signer.sign(options.privateKey, 'base64');\n  return dkim + signature.replace(/(.{76}(?!\\r?\\n|\\r))/g, '$&\\r\\n ');\n}\n/**\n * <p>Generates a DKIM-Signature header field without the signature part ('b=' is empty)</p>\n *\n * @memberOf dkimsign\n * @private\n * @param {String} domainName Domain name to use for signing\n * @param {String} keySelector Selector for the DKMI public key\n * @param {String} headerFieldNames Header fields to sign\n * @param {String} headers E-mail headers\n * @param {String} body E-mail body\n *\n * @return {String} Mime folded DKIM-Signature string\n */\n\n\nfunction generateDKIMHeader(domainName, keySelector, headerFieldNames, headers, body) {\n  var canonicalizedBody = DKIMCanonicalizer.relaxedBody(body),\n      canonicalizedBodyHash = sha256(canonicalizedBody, 'base64'),\n      canonicalizedHeaderData = DKIMCanonicalizer.relaxedHeaders(headers, headerFieldNames),\n      dkim;\n\n  if (hasUTFChars(domainName)) {\n    domainName = punycode.toASCII(domainName);\n  }\n\n  dkim = ['v=1', 'a=rsa-sha256', 'c=relaxed/relaxed', 'd=' + domainName, 'q=dns/txt', 's=' + keySelector, 'bh=' + canonicalizedBodyHash, 'h=' + canonicalizedHeaderData.fieldNames].join('; ');\n  return mimelib.foldLine('DKIM-Signature: ' + dkim, 76) + ';\\r\\n b=';\n}\n/**\n * <p>DKIM canonicalization functions</p>\n *\n * @memberOf dkimsign\n * @private\n */\n\n\nvar DKIMCanonicalizer = {\n  /**\n   * <p>Simple body canonicalization by rfc4871 #3.4.3</p>\n   *\n   * @param {String} body E-mail body part\n   * @return {String} Canonicalized body\n   */\n  simpleBody: function (body) {\n    return (body || '').toString().replace(/(?:\\r?\\n|\\r)*$/, '\\r\\n');\n  },\n\n  /**\n   * <p>Relaxed body canonicalization by rfc4871 #3.4.4</p>\n   *\n   * @param {String} body E-mail body part\n   * @return {String} Canonicalized body\n   */\n  relaxedBody: function (body) {\n    return (body || '').toString().replace(/\\r?\\n|\\r/g, '\\n').split('\\n').map(function (line) {\n      return line.replace(/\\s*$/, ''). //rtrim\n      replace(/\\s+/g, ' '); // only single spaces\n    }).join('\\n').replace(/\\n*$/, '\\n').replace(/\\n/g, '\\r\\n');\n  },\n\n  /**\n   * <p>Relaxed headers canonicalization by rfc4871 #3.4.2 with filtering</p>\n   *\n   * @param {String} body E-mail headers part\n   * @return {String} Canonicalized headers\n   */\n  relaxedHeaders: function (headers, fieldNames) {\n    var includedFields = (fieldNames || '').toLowerCase().split(':').map(function (field) {\n      return field.trim();\n    }),\n        headerFields = {},\n        headerLines = headers.split(/\\r?\\n|\\r/),\n        line,\n        i; // join lines\n\n    for (i = headerLines.length - 1; i >= 0; i--) {\n      if (i && headerLines[i].match(/^\\s/)) {\n        headerLines[i - 1] += headerLines.splice(i, 1);\n      } else {\n        line = DKIMCanonicalizer.relaxedHeaderLine(headerLines[i]); // on multiple values, include only the first one (the one in the bottom of the list)\n\n        if (includedFields.indexOf(line.key) >= 0 && !(line.key in headerFields)) {\n          headerFields[line.key] = line.value;\n        }\n      }\n    }\n\n    headers = [];\n\n    for (i = includedFields.length - 1; i >= 0; i--) {\n      if (!headerFields[includedFields[i]]) {\n        includedFields.splice(i, 1);\n      } else {\n        headers.unshift(includedFields[i] + ':' + headerFields[includedFields[i]]);\n      }\n    }\n\n    return {\n      headers: headers.join('\\r\\n') + '\\r\\n',\n      fieldNames: includedFields.join(':')\n    };\n  },\n\n  /**\n   * <p>Relaxed header canonicalization for single header line</p>\n   *\n   * @param {String} line Single header line\n   * @return {String} Canonicalized header line\n   */\n  relaxedHeaderLine: function (line) {\n    var value = line.split(':'),\n        key = (value.shift() || '').toLowerCase().trim();\n    value = value.join(':').replace(/\\s+/g, ' ').trim();\n    return {\n      key: key,\n      value: value\n    };\n  }\n};\nmodule.exports.DKIMCanonicalizer = DKIMCanonicalizer;\n/**\n * <p>Generates a SHA-256 hash</p>\n *\n * @param {String} str String to be hashed\n * @param {String} [encoding='hex'] Output encoding\n * @return {String} SHA-256 hash in the selected output encoding\n */\n\nfunction sha256(str, encoding) {\n  var shasum = crypto.createHash('sha256');\n  shasum.update(str);\n  return shasum.digest(encoding || 'hex');\n}\n/**\n * <p>Detects if a string includes unicode symbols</p>\n *\n * @param {String} str String to be checked\n * @return {String} true, if string contains non-ascii symbols\n */\n\n\nfunction hasUTFChars(str) {\n  var rforeign = /[^\\u0000-\\u007f]/;\n  return !!rforeign.test(str);\n}","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/dkim-signer/lib/dkim.js"],"names":["crypto","require","mimelib","punycode","module","exports","DKIMSign","generateDKIMHeader","sha256","email","options","toString","match","headers","substr","index","body","length","defaultFieldNames","dkim","domainName","keySelector","headerFieldNames","canonicalizedHeaderData","DKIMCanonicalizer","relaxedHeaders","canonicalizedDKIMHeader","relaxedHeaderLine","signer","signature","key","value","createSign","update","sign","privateKey","replace","canonicalizedBody","relaxedBody","canonicalizedBodyHash","hasUTFChars","toASCII","fieldNames","join","foldLine","simpleBody","split","map","line","includedFields","toLowerCase","field","trim","headerFields","headerLines","i","splice","indexOf","unshift","shift","str","encoding","shasum","createHash","digest","rforeign","test"],"mappings":"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","sourcesContent":["'use strict';\n\nvar crypto = require('crypto');\nvar mimelib = require('mimelib');\nvar punycode = require('punycode');\n\n/**\n * @namespace DKIM Signer module\n * @name dkimsign\n */\nmodule.exports.DKIMSign = DKIMSign;\nmodule.exports.generateDKIMHeader = generateDKIMHeader;\nmodule.exports.sha256 = sha256;\n\n/**\n * <p>Sign an email with provided DKIM key, uses RSA-SHA256.</p>\n *\n * @memberOf dkimsign\n * @param {String} email Full e-mail source complete with headers and body to sign\n * @param {Object} options DKIM options\n * @param {String} [options.headerFieldNames='from:to:cc:subject'] Header fields to sign\n * @param {String} options.privateKey DKMI private key\n * @param {String} options.domainName Domain name to use for signing (ie: 'domain.com')\n * @param {String} options.keySelector Selector for the DKMI public key (ie. 'dkim' if you have set up a TXT record for 'dkim._domainkey.domain.com')\n *\n * @return {String} Signed DKIM-Signature header field for prepending\n */\nfunction DKIMSign(email, options) {\n    options = options || {};\n    email = (email || '').toString('utf-8');\n\n    var match = email.match(/^\\r?\\n|(?:\\r?\\n){2}/),\n        headers = match && email.substr(0, match.index) || '',\n        body = match && email.substr(match.index + match[0].length) || email;\n\n    // all listed fields from RFC4871 #5.5\n    // Some prociders do not like Message-Id, Date, Bounces-To and Return-Path\n    // fields in DKIM signed data so these are not automatcially included\n    var defaultFieldNames = 'From:Sender:Reply-To:Subject:To:' +\n        'Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:' +\n        'Content-Description:Resent-Date:Resent-From:Resent-Sender:' +\n        'Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:' +\n        'List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:' +\n        'List-Owner:List-Archive';\n\n    var dkim = generateDKIMHeader(options.domainName, options.keySelector, options.headerFieldNames || defaultFieldNames, headers, body),\n        canonicalizedHeaderData = DKIMCanonicalizer.relaxedHeaders(headers, options.headerFieldNames || defaultFieldNames),\n        canonicalizedDKIMHeader = DKIMCanonicalizer.relaxedHeaderLine(dkim),\n        signer, signature;\n\n    canonicalizedHeaderData.headers += canonicalizedDKIMHeader.key + ':' + canonicalizedDKIMHeader.value;\n\n    signer = crypto.createSign('RSA-SHA256');\n    signer.update(canonicalizedHeaderData.headers);\n    signature = signer.sign(options.privateKey, 'base64');\n\n    return dkim + signature.replace(/(.{76}(?!\\r?\\n|\\r))/g, '$&\\r\\n ');\n}\n\n/**\n * <p>Generates a DKIM-Signature header field without the signature part ('b=' is empty)</p>\n *\n * @memberOf dkimsign\n * @private\n * @param {String} domainName Domain name to use for signing\n * @param {String} keySelector Selector for the DKMI public key\n * @param {String} headerFieldNames Header fields to sign\n * @param {String} headers E-mail headers\n * @param {String} body E-mail body\n *\n * @return {String} Mime folded DKIM-Signature string\n */\nfunction generateDKIMHeader(domainName, keySelector, headerFieldNames, headers, body) {\n    var canonicalizedBody = DKIMCanonicalizer.relaxedBody(body),\n        canonicalizedBodyHash = sha256(canonicalizedBody, 'base64'),\n        canonicalizedHeaderData = DKIMCanonicalizer.relaxedHeaders(headers, headerFieldNames),\n        dkim;\n\n    if (hasUTFChars(domainName)) {\n        domainName = punycode.toASCII(domainName);\n    }\n\n    dkim = [\n        'v=1',\n        'a=rsa-sha256',\n        'c=relaxed/relaxed',\n        'd=' + domainName,\n        'q=dns/txt',\n        's=' + keySelector,\n        'bh=' + canonicalizedBodyHash,\n        'h=' + canonicalizedHeaderData.fieldNames\n    ].join('; ');\n\n    return mimelib.foldLine('DKIM-Signature: ' + dkim, 76) + ';\\r\\n b=';\n}\n\n/**\n * <p>DKIM canonicalization functions</p>\n *\n * @memberOf dkimsign\n * @private\n */\nvar DKIMCanonicalizer = {\n\n    /**\n     * <p>Simple body canonicalization by rfc4871 #3.4.3</p>\n     *\n     * @param {String} body E-mail body part\n     * @return {String} Canonicalized body\n     */\n    simpleBody: function(body) {\n        return (body || '').toString().replace(/(?:\\r?\\n|\\r)*$/, '\\r\\n');\n    },\n\n    /**\n     * <p>Relaxed body canonicalization by rfc4871 #3.4.4</p>\n     *\n     * @param {String} body E-mail body part\n     * @return {String} Canonicalized body\n     */\n    relaxedBody: function(body) {\n        return (body || '').toString().\n        replace(/\\r?\\n|\\r/g, '\\n').\n        split('\\n').\n        map(function(line) {\n            return line.replace(/\\s*$/, ''). //rtrim\n            replace(/\\s+/g, ' '); // only single spaces\n        }).\n        join('\\n').\n        replace(/\\n*$/, '\\n').\n        replace(/\\n/g, '\\r\\n');\n    },\n\n    /**\n     * <p>Relaxed headers canonicalization by rfc4871 #3.4.2 with filtering</p>\n     *\n     * @param {String} body E-mail headers part\n     * @return {String} Canonicalized headers\n     */\n    relaxedHeaders: function(headers, fieldNames) {\n        var includedFields = (fieldNames || '').toLowerCase().\n        split(':').\n        map(function(field) {\n            return field.trim();\n        }),\n            headerFields = {},\n            headerLines = headers.split(/\\r?\\n|\\r/),\n            line, i;\n\n        // join lines\n        for (i = headerLines.length - 1; i >= 0; i--) {\n            if (i && headerLines[i].match(/^\\s/)) {\n                headerLines[i - 1] += headerLines.splice(i, 1);\n            } else {\n                line = DKIMCanonicalizer.relaxedHeaderLine(headerLines[i]);\n\n                // on multiple values, include only the first one (the one in the bottom of the list)\n                if (includedFields.indexOf(line.key) >= 0 && !(line.key in headerFields)) {\n                    headerFields[line.key] = line.value;\n                }\n            }\n        }\n\n        headers = [];\n        for (i = includedFields.length - 1; i >= 0; i--) {\n            if (!headerFields[includedFields[i]]) {\n                includedFields.splice(i, 1);\n            } else {\n                headers.unshift(includedFields[i] + ':' + headerFields[includedFields[i]]);\n            }\n        }\n\n        return {\n            headers: headers.join('\\r\\n') + '\\r\\n',\n            fieldNames: includedFields.join(':')\n        };\n    },\n\n    /**\n     * <p>Relaxed header canonicalization for single header line</p>\n     *\n     * @param {String} line Single header line\n     * @return {String} Canonicalized header line\n     */\n    relaxedHeaderLine: function(line) {\n        var value = line.split(':'),\n            key = (value.shift() || '').toLowerCase().trim();\n\n        value = value.join(':').replace(/\\s+/g, ' ').trim();\n\n        return {\n            key: key,\n            value: value\n        };\n    }\n};\nmodule.exports.DKIMCanonicalizer = DKIMCanonicalizer;\n\n/**\n * <p>Generates a SHA-256 hash</p>\n *\n * @param {String} str String to be hashed\n * @param {String} [encoding='hex'] Output encoding\n * @return {String} SHA-256 hash in the selected output encoding\n */\nfunction sha256(str, encoding) {\n    var shasum = crypto.createHash('sha256');\n    shasum.update(str);\n    return shasum.digest(encoding || 'hex');\n}\n\n/**\n * <p>Detects if a string includes unicode symbols</p>\n *\n * @param {String} str String to be checked\n * @return {String} true, if string contains non-ascii symbols\n */\nfunction hasUTFChars(str) {\n    var rforeign = /[^\\u0000-\\u007f]/;\n    return !!rforeign.test(str);\n}"]},"metadata":{},"sourceType":"script"}
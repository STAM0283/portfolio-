{"ast":null,"code":"/**\n * Set a variable for re-use in the current context. This will over-write any value already set to the context for the given <var>varname</var>.\n *\n * @alias set\n *\n * @example\n * {% set foo = \"anything!\" %}\n * {{ foo }}\n * // => anything!\n *\n * @example\n * // index = 2;\n * {% set bar = 1 %}\n * {% set bar += index|default(3) %}\n * // => 3\n *\n * @example\n * // foods = {};\n * // food = 'chili';\n * {% set foods[food] = \"con queso\" %}\n * {{ foods.chili }}\n * // => con queso\n *\n * @example\n * // foods = { chili: 'chili con queso' }\n * {% set foods.chili = \"guatamalan insanity pepper\" %}\n * {{ foods.chili }}\n * // => guatamalan insanity pepper\n *\n * @param {literal} varname   The variable name to assign the value to.\n * @param {literal} assignement   Any valid JavaScript assignement. <code data-language=\"js\">=, +=, *=, /=, -=</code>\n * @param {*}   value     Valid variable output.\n */\nexports.compile = function (compiler, args) {\n  return args.join(' ') + ';\\n';\n};\n\nexports.parse = function (str, line, parser, types) {\n  var nameSet = '',\n      propertyName;\n  parser.on(types.VAR, function (token) {\n    if (propertyName) {\n      // Tell the parser where to find the variable\n      propertyName += '_ctx.' + token.match;\n      return;\n    }\n\n    if (!parser.out.length) {\n      nameSet += token.match;\n      return;\n    }\n\n    return true;\n  });\n  parser.on(types.BRACKETOPEN, function (token) {\n    if (!propertyName && !this.out.length) {\n      propertyName = token.match;\n      return;\n    }\n\n    return true;\n  });\n  parser.on(types.STRING, function (token) {\n    if (propertyName && !this.out.length) {\n      propertyName += token.match;\n      return;\n    }\n\n    return true;\n  });\n  parser.on(types.BRACKETCLOSE, function (token) {\n    if (propertyName && !this.out.length) {\n      nameSet += propertyName + token.match;\n      propertyName = undefined;\n      return;\n    }\n\n    return true;\n  });\n  parser.on(types.DOTKEY, function (token) {\n    if (!propertyName && !nameSet) {\n      return true;\n    }\n\n    nameSet += '.' + token.match;\n    return;\n  });\n  parser.on(types.ASSIGNMENT, function (token) {\n    if (this.out.length || !nameSet) {\n      throw new Error('Unexpected assignment \"' + token.match + '\" on line ' + line + '.');\n    }\n\n    this.out.push( // Prevent the set from spilling into global scope\n    '_ctx.' + nameSet);\n    this.out.push(token.match);\n    this.filterApplyIdx.push(this.out.length);\n  });\n  return true;\n};\n\nexports.block = true;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/swig/lib/tags/set.js"],"names":["exports","compile","compiler","args","join","parse","str","line","parser","types","nameSet","propertyName","on","VAR","token","match","out","length","BRACKETOPEN","STRING","BRACKETCLOSE","undefined","DOTKEY","ASSIGNMENT","Error","push","filterApplyIdx","block"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCAA,OAAO,CAACC,OAAR,GAAkB,UAAUC,QAAV,EAAoBC,IAApB,EAA0B;AAC1C,SAAOA,IAAI,CAACC,IAAL,CAAU,GAAV,IAAiB,KAAxB;AACD,CAFD;;AAIAJ,OAAO,CAACK,KAAR,GAAgB,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,KAA7B,EAAoC;AAClD,MAAIC,OAAO,GAAG,EAAd;AAAA,MACEC,YADF;AAGAH,EAAAA,MAAM,CAACI,EAAP,CAAUH,KAAK,CAACI,GAAhB,EAAqB,UAAUC,KAAV,EAAiB;AACpC,QAAIH,YAAJ,EAAkB;AAChB;AACAA,MAAAA,YAAY,IAAI,UAAUG,KAAK,CAACC,KAAhC;AACA;AACD;;AAED,QAAI,CAACP,MAAM,CAACQ,GAAP,CAAWC,MAAhB,EAAwB;AACtBP,MAAAA,OAAO,IAAII,KAAK,CAACC,KAAjB;AACA;AACD;;AAED,WAAO,IAAP;AACD,GAbD;AAeAP,EAAAA,MAAM,CAACI,EAAP,CAAUH,KAAK,CAACS,WAAhB,EAA6B,UAAUJ,KAAV,EAAiB;AAC5C,QAAI,CAACH,YAAD,IAAiB,CAAC,KAAKK,GAAL,CAASC,MAA/B,EAAuC;AACrCN,MAAAA,YAAY,GAAGG,KAAK,CAACC,KAArB;AACA;AACD;;AAED,WAAO,IAAP;AACD,GAPD;AASAP,EAAAA,MAAM,CAACI,EAAP,CAAUH,KAAK,CAACU,MAAhB,EAAwB,UAAUL,KAAV,EAAiB;AACvC,QAAIH,YAAY,IAAI,CAAC,KAAKK,GAAL,CAASC,MAA9B,EAAsC;AACpCN,MAAAA,YAAY,IAAIG,KAAK,CAACC,KAAtB;AACA;AACD;;AAED,WAAO,IAAP;AACD,GAPD;AASAP,EAAAA,MAAM,CAACI,EAAP,CAAUH,KAAK,CAACW,YAAhB,EAA8B,UAAUN,KAAV,EAAiB;AAC7C,QAAIH,YAAY,IAAI,CAAC,KAAKK,GAAL,CAASC,MAA9B,EAAsC;AACpCP,MAAAA,OAAO,IAAIC,YAAY,GAAGG,KAAK,CAACC,KAAhC;AACAJ,MAAAA,YAAY,GAAGU,SAAf;AACA;AACD;;AAED,WAAO,IAAP;AACD,GARD;AAUAb,EAAAA,MAAM,CAACI,EAAP,CAAUH,KAAK,CAACa,MAAhB,EAAwB,UAAUR,KAAV,EAAiB;AACvC,QAAI,CAACH,YAAD,IAAiB,CAACD,OAAtB,EAA+B;AAC7B,aAAO,IAAP;AACD;;AACDA,IAAAA,OAAO,IAAI,MAAMI,KAAK,CAACC,KAAvB;AACA;AACD,GAND;AAQAP,EAAAA,MAAM,CAACI,EAAP,CAAUH,KAAK,CAACc,UAAhB,EAA4B,UAAUT,KAAV,EAAiB;AAC3C,QAAI,KAAKE,GAAL,CAASC,MAAT,IAAmB,CAACP,OAAxB,EAAiC;AAC/B,YAAM,IAAIc,KAAJ,CAAU,4BAA4BV,KAAK,CAACC,KAAlC,GAA0C,YAA1C,GAAyDR,IAAzD,GAAgE,GAA1E,CAAN;AACD;;AAED,SAAKS,GAAL,CAASS,IAAT,EACE;AACA,cAAUf,OAFZ;AAIA,SAAKM,GAAL,CAASS,IAAT,CAAcX,KAAK,CAACC,KAApB;AACA,SAAKW,cAAL,CAAoBD,IAApB,CAAyB,KAAKT,GAAL,CAASC,MAAlC;AACD,GAXD;AAaA,SAAO,IAAP;AACD,CArED;;AAuEAjB,OAAO,CAAC2B,KAAR,GAAgB,IAAhB","sourcesContent":["/**\n * Set a variable for re-use in the current context. This will over-write any value already set to the context for the given <var>varname</var>.\n *\n * @alias set\n *\n * @example\n * {% set foo = \"anything!\" %}\n * {{ foo }}\n * // => anything!\n *\n * @example\n * // index = 2;\n * {% set bar = 1 %}\n * {% set bar += index|default(3) %}\n * // => 3\n *\n * @example\n * // foods = {};\n * // food = 'chili';\n * {% set foods[food] = \"con queso\" %}\n * {{ foods.chili }}\n * // => con queso\n *\n * @example\n * // foods = { chili: 'chili con queso' }\n * {% set foods.chili = \"guatamalan insanity pepper\" %}\n * {{ foods.chili }}\n * // => guatamalan insanity pepper\n *\n * @param {literal} varname   The variable name to assign the value to.\n * @param {literal} assignement   Any valid JavaScript assignement. <code data-language=\"js\">=, +=, *=, /=, -=</code>\n * @param {*}   value     Valid variable output.\n */\nexports.compile = function (compiler, args) {\n  return args.join(' ') + ';\\n';\n};\n\nexports.parse = function (str, line, parser, types) {\n  var nameSet = '',\n    propertyName;\n\n  parser.on(types.VAR, function (token) {\n    if (propertyName) {\n      // Tell the parser where to find the variable\n      propertyName += '_ctx.' + token.match;\n      return;\n    }\n\n    if (!parser.out.length) {\n      nameSet += token.match;\n      return;\n    }\n\n    return true;\n  });\n\n  parser.on(types.BRACKETOPEN, function (token) {\n    if (!propertyName && !this.out.length) {\n      propertyName = token.match;\n      return;\n    }\n\n    return true;\n  });\n\n  parser.on(types.STRING, function (token) {\n    if (propertyName && !this.out.length) {\n      propertyName += token.match;\n      return;\n    }\n\n    return true;\n  });\n\n  parser.on(types.BRACKETCLOSE, function (token) {\n    if (propertyName && !this.out.length) {\n      nameSet += propertyName + token.match;\n      propertyName = undefined;\n      return;\n    }\n\n    return true;\n  });\n\n  parser.on(types.DOTKEY, function (token) {\n    if (!propertyName && !nameSet) {\n      return true;\n    }\n    nameSet += '.' + token.match;\n    return;\n  });\n\n  parser.on(types.ASSIGNMENT, function (token) {\n    if (this.out.length || !nameSet) {\n      throw new Error('Unexpected assignment \"' + token.match + '\" on line ' + line + '.');\n    }\n\n    this.out.push(\n      // Prevent the set from spilling into global scope\n      '_ctx.' + nameSet\n    );\n    this.out.push(token.match);\n    this.filterApplyIdx.push(this.out.length);\n  });\n\n  return true;\n};\n\nexports.block = true;\n"]},"metadata":{},"sourceType":"script"}
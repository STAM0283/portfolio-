{"ast":null,"code":"\"use strict\";\n/*\n * This file is based on the original SES module for Nodemailer by dfellis\n* https://github.com/andris9/Nodemailer/blob/11fb3ef560b87e1c25e8bc15c2179df5647ea6f5/lib/engines/SES.js\n* and on the rewrite by andris9\n* https://github.com/andris9/Nodemailer/blob/3ac11ae9a9faf95aabd9bffb37ca702fe33105e4/lib/engines/ses.js\n*/\n// NB! Amazon SES does not allow unicode filenames on attachments!\n\nvar AWS = require('aws-sdk'); // Expose to the world\n\n\nmodule.exports = SESTransport;\n/**\n * <p>Generates a Transport object for Amazon SES with aws-sdk</p>\n *\n * <p>Possible options can be the following:</p>\n *\n * <ul>\n *     <li><b>accessKeyId</b> - AWS access key (optional)</li>\n *     <li><b>secretAccessKey</b> - AWS secret (optional)</li>\n *     <li><b>region</b> - optional region (defaults to <code>\"us-east-1\"</code>)\n * </ul>\n *\n * @constructor\n * @param {Object} optional config parameter for the AWS SES service\n */\n\nfunction SESTransport(options) {\n  var pattern = /(.*)email(.*)\\.(.*).amazonaws.com/i,\n      result = pattern.exec(options.ServiceUrl);\n  this.options = options || {};\n  this.options.accessKeyId = options.accessKeyId || options.AWSAccessKeyID;\n  this.options.secretAccessKey = options.secretAccessKey || options.AWSSecretKey;\n  this.options.sessionToken = options.sessionToken || options.AWSSecurityToken;\n  this.options.apiVersion = '2010-12-01';\n  this.options.region = options.region || result && result[3] || 'us-east-1';\n  this.ses = new AWS.SES(this.options);\n}\n/**\n * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n *\n * @param {Object} emailMessage MailComposer object\n * @param {Function} callback Callback function to run when the sending is completed\n */\n\n\nSESTransport.prototype.sendMail = function (emailMessage, callback) {\n  // SES strips this header line by itself\n  emailMessage.options.keepBcc = true;\n  this.generateMessage(emailMessage, function (err, email) {\n    if (err) {\n      return typeof callback === \"function\" && callback(err);\n    }\n\n    this.handleMessage(email, callback);\n  }.bind(this));\n};\n/**\n * <p>Compiles and sends the request to SES with e-mail data</p>\n *\n * @param {String} email Compiled raw e-mail as a string\n * @param {Function} callback Callback function to run once the message has been sent\n */\n\n\nSESTransport.prototype.handleMessage = function (email, callback) {\n  var params = {\n    RawMessage: {\n      // required\n      Data: new Buffer(email, \"utf-8\") // required\n\n    }\n  };\n  this.ses.sendRawEmail(params, this.responseHandler.bind(this, callback));\n};\n/**\n * <p>Handles the response for the HTTP request to SES</p>\n *\n * @param {Function} callback Callback function to run on end (binded)\n * @param {Object} err Error object returned from the request\n * @param {Object} data De-serialized data returned from the request\n */\n\n\nSESTransport.prototype.responseHandler = function (callback, err, data) {\n  if (err) {\n    if (!(err instanceof Error)) {\n      err = new Error('Email failed: ' + err);\n    }\n\n    return typeof callback === \"function\" && callback(err, null);\n  }\n\n  return typeof callback === \"function\" && callback(null, {\n    messageId: data && data.MessageId && data.MessageId + \"@email.amazonses.com\"\n  });\n};\n/**\n * <p>Compiles the messagecomposer object to a string.</p>\n *\n * <p>SES requires strings as parameter so the message needs to be fully composed as a string.</p>\n *\n * @param {Object} emailMessage MailComposer object\n * @param {Function} callback Callback function to run once the message has been compiled\n */\n\n\nSESTransport.prototype.generateMessage = function (emailMessage, callback) {\n  var email = \"\";\n  emailMessage.on(\"data\", function (chunk) {\n    email += (chunk || \"\").toString(\"utf-8\");\n  });\n  emailMessage.on(\"end\", function (chunk) {\n    email += (chunk || \"\").toString(\"utf-8\");\n    callback(null, email);\n  });\n  emailMessage.streamMessage();\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/express-mailer/node_modules/nodemailer/lib/engines/ses.js"],"names":["AWS","require","module","exports","SESTransport","options","pattern","result","exec","ServiceUrl","accessKeyId","AWSAccessKeyID","secretAccessKey","AWSSecretKey","sessionToken","AWSSecurityToken","apiVersion","region","ses","SES","prototype","sendMail","emailMessage","callback","keepBcc","generateMessage","err","email","handleMessage","bind","params","RawMessage","Data","Buffer","sendRawEmail","responseHandler","data","Error","messageId","MessageId","on","chunk","toString","streamMessage"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * This file is based on the original SES module for Nodemailer by dfellis\n* https://github.com/andris9/Nodemailer/blob/11fb3ef560b87e1c25e8bc15c2179df5647ea6f5/lib/engines/SES.js\n* and on the rewrite by andris9\n* https://github.com/andris9/Nodemailer/blob/3ac11ae9a9faf95aabd9bffb37ca702fe33105e4/lib/engines/ses.js\n*/\n\n// NB! Amazon SES does not allow unicode filenames on attachments!\n\nvar AWS = require('aws-sdk');\n\n// Expose to the world\nmodule.exports = SESTransport;\n\n/**\n * <p>Generates a Transport object for Amazon SES with aws-sdk</p>\n *\n * <p>Possible options can be the following:</p>\n *\n * <ul>\n *     <li><b>accessKeyId</b> - AWS access key (optional)</li>\n *     <li><b>secretAccessKey</b> - AWS secret (optional)</li>\n *     <li><b>region</b> - optional region (defaults to <code>\"us-east-1\"</code>)\n * </ul>\n *\n * @constructor\n * @param {Object} optional config parameter for the AWS SES service\n */\nfunction SESTransport(options) {\n\n    var pattern = /(.*)email(.*)\\.(.*).amazonaws.com/i,\n        result = pattern.exec(options.ServiceUrl);\n\n    this.options = options || {};\n    this.options.accessKeyId = options.accessKeyId || options.AWSAccessKeyID;\n    this.options.secretAccessKey = options.secretAccessKey || options.AWSSecretKey;\n    this.options.sessionToken = options.sessionToken || options.AWSSecurityToken;\n    this.options.apiVersion = '2010-12-01';\n    this.options.region = options.region || (result && result[3]) || 'us-east-1';\n\n    this.ses = new AWS.SES(this.options);\n}\n\n/**\n * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n *\n * @param {Object} emailMessage MailComposer object\n * @param {Function} callback Callback function to run when the sending is completed\n */\nSESTransport.prototype.sendMail = function (emailMessage, callback) {\n    // SES strips this header line by itself\n    emailMessage.options.keepBcc = true;\n\n    this.generateMessage(emailMessage, (function (err, email) {\n        if (err) {\n            return typeof callback === \"function\" && callback(err);\n        }\n        this.handleMessage(email, callback);\n    }).bind(this));\n};\n\n/**\n * <p>Compiles and sends the request to SES with e-mail data</p>\n *\n * @param {String} email Compiled raw e-mail as a string\n * @param {Function} callback Callback function to run once the message has been sent\n */\nSESTransport.prototype.handleMessage = function (email, callback) {\n    var params = {\n            RawMessage: { // required\n                Data: new Buffer(email, \"utf-8\") // required\n            }\n        };\n    this.ses.sendRawEmail(params, this.responseHandler.bind(this, callback));\n};\n\n/**\n * <p>Handles the response for the HTTP request to SES</p>\n *\n * @param {Function} callback Callback function to run on end (binded)\n * @param {Object} err Error object returned from the request\n * @param {Object} data De-serialized data returned from the request\n */\nSESTransport.prototype.responseHandler = function (callback, err, data) {\n    if (err) {\n        if (!(err instanceof Error)) {\n            err = new Error('Email failed: ' + err);\n        }\n        return typeof callback === \"function\" && callback(err, null);\n    }\n    return typeof callback === \"function\" && callback(null, {\n        messageId: data && data.MessageId && data.MessageId + \"@email.amazonses.com\"\n    });\n};\n\n/**\n * <p>Compiles the messagecomposer object to a string.</p>\n *\n * <p>SES requires strings as parameter so the message needs to be fully composed as a string.</p>\n *\n * @param {Object} emailMessage MailComposer object\n * @param {Function} callback Callback function to run once the message has been compiled\n */\n\nSESTransport.prototype.generateMessage = function (emailMessage, callback) {\n    var email = \"\";\n\n    emailMessage.on(\"data\", function (chunk) {\n        email += (chunk || \"\").toString(\"utf-8\");\n    });\n\n    emailMessage.on(\"end\", function (chunk) {\n        email += (chunk || \"\").toString(\"utf-8\");\n        callback(null, email);\n    });\n\n    emailMessage.streamMessage();\n};\n"]},"metadata":{},"sourceType":"script"}
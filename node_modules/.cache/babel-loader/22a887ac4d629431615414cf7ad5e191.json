{"ast":null,"code":"var AWS = require('./core');\n\nvar inherit = AWS.util.inherit;\n/**\n * The endpoint that a service will talk to, for example,\n * `'https://ec2.ap-southeast-1.amazonaws.com'`. If\n * you need to override an endpoint for a service, you can\n * set the endpoint on a service by passing the endpoint\n * object with the `endpoint` option key:\n *\n * ```javascript\n * var ep = new AWS.Endpoint('awsproxy.example.com');\n * var s3 = new AWS.S3({endpoint: ep});\n * s3.service.endpoint.hostname == 'awsproxy.example.com'\n * ```\n *\n * Note that if you do not specify a protocol, the protocol will\n * be selected based on your current {AWS.config} configuration.\n *\n * @!attribute protocol\n *   @return [String] the protocol (http or https) of the endpoint\n *     URL\n * @!attribute hostname\n *   @return [String] the host portion of the endpoint, e.g.,\n *     example.com\n * @!attribute host\n *   @return [String] the host portion of the endpoint including\n *     the port, e.g., example.com:80\n * @!attribute port\n *   @return [Integer] the port of the endpoint\n * @!attribute href\n *   @return [String] the full URL of the endpoint\n */\n\nAWS.Endpoint = inherit({\n  /**\n   * @overload Endpoint(endpoint)\n   *   Constructs a new endpoint given an endpoint URL. If the\n   *   URL omits a protocol (http or https), the default protocol\n   *   set in the global {AWS.config} will be used.\n   *   @param endpoint [String] the URL to construct an endpoint from\n   */\n  constructor: function Endpoint(endpoint, config) {\n    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);\n\n    if (typeof endpoint === 'undefined' || endpoint === null) {\n      throw new Error('Invalid endpoint: ' + endpoint);\n    } else if (typeof endpoint !== 'string') {\n      return AWS.util.copy(endpoint);\n    }\n\n    if (!endpoint.match(/^http/)) {\n      var useSSL = config && config.sslEnabled !== undefined ? config.sslEnabled : AWS.config.sslEnabled;\n      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;\n    }\n\n    AWS.util.update(this, AWS.util.urlParse(endpoint)); // Ensure the port property is set as an integer\n\n    if (this.port) {\n      this.port = parseInt(this.port, 10);\n    } else {\n      this.port = this.protocol === 'https:' ? 443 : 80;\n    }\n  }\n});\n/**\n * The low level HTTP request object, encapsulating all HTTP header\n * and body data sent by a service request.\n *\n * @!attribute method\n *   @return [String] the HTTP method of the request\n * @!attribute path\n *   @return [String] the path portion of the URI, e.g.,\n *     \"/list/?start=5&num=10\"\n * @!attribute headers\n *   @return [map<String,String>]\n *     a map of header keys and their respective values\n * @!attribute body\n *   @return [String] the request body payload\n * @!attribute endpoint\n *   @return [AWS.Endpoint] the endpoint for the request\n * @!attribute region\n *   @api private\n *   @return [String] the region, for signing purposes only.\n */\n\nAWS.HttpRequest = inherit({\n  /**\n   * @api private\n   */\n  constructor: function HttpRequest(endpoint, region) {\n    endpoint = new AWS.Endpoint(endpoint);\n    this.method = 'POST';\n    this.path = endpoint.path || '/';\n    this.headers = {};\n    this.body = '';\n    this.endpoint = endpoint;\n    this.region = region;\n    this.setUserAgent();\n  },\n\n  /**\n   * @api private\n   */\n  setUserAgent: function setUserAgent() {\n    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';\n    this.headers[prefix + 'User-Agent'] = AWS.util.userAgent();\n  },\n\n  /**\n   * @return [String] the part of the {path} excluding the\n   *   query string\n   */\n  pathname: function pathname() {\n    return this.path.split('?', 1)[0];\n  },\n\n  /**\n   * @return [String] the query string portion of the {path}\n   */\n  search: function search() {\n    return this.path.split('?', 2)[1] || '';\n  }\n});\n/**\n * The low level HTTP response object, encapsulating all HTTP header\n * and body data returned from the request.\n *\n * @!attribute statusCode\n *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)\n * @!attribute headers\n *   @return [map<String,String>]\n *      a map of response header keys and their respective values\n * @!attribute body\n *   @return [String] the response body payload\n */\n\nAWS.HttpResponse = inherit({\n  /**\n   * @api private\n   */\n  constructor: function HttpResponse() {\n    this.statusCode = undefined;\n    this.headers = {};\n    this.body = undefined;\n  }\n});\nAWS.HttpClient = inherit({});\n/**\n * @api private\n */\n\nAWS.HttpClient.getInstance = function getInstance() {\n  if (this.singleton === undefined) {\n    this.singleton = new this();\n  }\n\n  return this.singleton;\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/http.js"],"names":["AWS","require","inherit","util","Endpoint","constructor","endpoint","config","hideProperties","Error","copy","match","useSSL","sslEnabled","undefined","update","urlParse","port","parseInt","protocol","HttpRequest","region","method","path","headers","body","setUserAgent","prefix","isBrowser","userAgent","pathname","split","search","HttpResponse","statusCode","HttpClient","getInstance","singleton"],"mappings":"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","sourcesContent":["var AWS = require('./core');\nvar inherit = AWS.util.inherit;\n\n/**\n * The endpoint that a service will talk to, for example,\n * `'https://ec2.ap-southeast-1.amazonaws.com'`. If\n * you need to override an endpoint for a service, you can\n * set the endpoint on a service by passing the endpoint\n * object with the `endpoint` option key:\n *\n * ```javascript\n * var ep = new AWS.Endpoint('awsproxy.example.com');\n * var s3 = new AWS.S3({endpoint: ep});\n * s3.service.endpoint.hostname == 'awsproxy.example.com'\n * ```\n *\n * Note that if you do not specify a protocol, the protocol will\n * be selected based on your current {AWS.config} configuration.\n *\n * @!attribute protocol\n *   @return [String] the protocol (http or https) of the endpoint\n *     URL\n * @!attribute hostname\n *   @return [String] the host portion of the endpoint, e.g.,\n *     example.com\n * @!attribute host\n *   @return [String] the host portion of the endpoint including\n *     the port, e.g., example.com:80\n * @!attribute port\n *   @return [Integer] the port of the endpoint\n * @!attribute href\n *   @return [String] the full URL of the endpoint\n */\nAWS.Endpoint = inherit({\n\n  /**\n   * @overload Endpoint(endpoint)\n   *   Constructs a new endpoint given an endpoint URL. If the\n   *   URL omits a protocol (http or https), the default protocol\n   *   set in the global {AWS.config} will be used.\n   *   @param endpoint [String] the URL to construct an endpoint from\n   */\n  constructor: function Endpoint(endpoint, config) {\n    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);\n\n    if (typeof endpoint === 'undefined' || endpoint === null) {\n      throw new Error('Invalid endpoint: ' + endpoint);\n    } else if (typeof endpoint !== 'string') {\n      return AWS.util.copy(endpoint);\n    }\n\n    if (!endpoint.match(/^http/)) {\n      var useSSL = config && config.sslEnabled !== undefined ?\n        config.sslEnabled : AWS.config.sslEnabled;\n      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;\n    }\n\n    AWS.util.update(this, AWS.util.urlParse(endpoint));\n\n    // Ensure the port property is set as an integer\n    if (this.port) {\n      this.port = parseInt(this.port, 10);\n    } else {\n      this.port = this.protocol === 'https:' ? 443 : 80;\n    }\n  }\n\n});\n\n/**\n * The low level HTTP request object, encapsulating all HTTP header\n * and body data sent by a service request.\n *\n * @!attribute method\n *   @return [String] the HTTP method of the request\n * @!attribute path\n *   @return [String] the path portion of the URI, e.g.,\n *     \"/list/?start=5&num=10\"\n * @!attribute headers\n *   @return [map<String,String>]\n *     a map of header keys and their respective values\n * @!attribute body\n *   @return [String] the request body payload\n * @!attribute endpoint\n *   @return [AWS.Endpoint] the endpoint for the request\n * @!attribute region\n *   @api private\n *   @return [String] the region, for signing purposes only.\n */\nAWS.HttpRequest = inherit({\n\n  /**\n   * @api private\n   */\n  constructor: function HttpRequest(endpoint, region) {\n    endpoint = new AWS.Endpoint(endpoint);\n    this.method = 'POST';\n    this.path = endpoint.path || '/';\n    this.headers = {};\n    this.body = '';\n    this.endpoint = endpoint;\n    this.region = region;\n    this.setUserAgent();\n  },\n\n  /**\n   * @api private\n   */\n  setUserAgent: function setUserAgent() {\n    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';\n    this.headers[prefix + 'User-Agent'] = AWS.util.userAgent();\n  },\n\n  /**\n   * @return [String] the part of the {path} excluding the\n   *   query string\n   */\n  pathname: function pathname() {\n    return this.path.split('?', 1)[0];\n  },\n\n  /**\n   * @return [String] the query string portion of the {path}\n   */\n  search: function search() {\n    return this.path.split('?', 2)[1] || '';\n  }\n\n});\n\n/**\n * The low level HTTP response object, encapsulating all HTTP header\n * and body data returned from the request.\n *\n * @!attribute statusCode\n *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)\n * @!attribute headers\n *   @return [map<String,String>]\n *      a map of response header keys and their respective values\n * @!attribute body\n *   @return [String] the response body payload\n */\nAWS.HttpResponse = inherit({\n\n  /**\n   * @api private\n   */\n  constructor: function HttpResponse() {\n    this.statusCode = undefined;\n    this.headers = {};\n    this.body = undefined;\n  }\n});\n\n\nAWS.HttpClient = inherit({});\n\n/**\n * @api private\n */\nAWS.HttpClient.getInstance = function getInstance() {\n  if (this.singleton === undefined) {\n    this.singleton = new this();\n  }\n  return this.singleton;\n};\n"]},"metadata":{},"sourceType":"script"}
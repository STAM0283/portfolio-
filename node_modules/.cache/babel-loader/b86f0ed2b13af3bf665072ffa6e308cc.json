{"ast":null,"code":"'use strict';\n\nvar Stream = require('stream').Stream,\n    utillib = require('util'),\n    net = require('net'),\n    tls = require('tls'),\n    oslib = require('os'),\n    xoauth2 = require('xoauth2'),\n    crypto = require('crypto'),\n    fs = require('fs'); // expose to the world\n\n\nmodule.exports = function (port, host, options) {\n  var connection = new SMTPClient(port, host, options);\n\n  if (typeof setImmediate == 'function') {\n    setImmediate(connection.connect.bind(connection));\n  } else {\n    process.nextTick(connection.connect.bind(connection));\n  }\n\n  return connection;\n};\n/**\n * <p>Generates a SMTP connection object</p>\n *\n * <p>Optional options object takes the following possible properties:</p>\n * <ul>\n *     <li><b>secureConnection</b> - use SSL</li>\n *     <li><b>name</b> - the name of the client server</li>\n *     <li><b>auth</b> - authentication object <code>{user:'...', pass:'...'}</code>\n *     <li><b>ignoreTLS</b> - ignore server support for STARTTLS</li>\n *     <li><b>tls</b> - options for createCredentials</li>\n *     <li><b>debug</b> - output client and server messages to console</li>\n *     <li><b>logFile</b> - output client and server messages to file</li>\n *     <li><b>instanceId</b> - unique instance id for debugging</li>\n *     <li><b>localAddress</b> - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)</li>\n *     <li><b>greetingTimeout</b> - Time to wait in ms until greeting message is received from the server (defaults to 10000)</li>\n *     <li><b>socketTimeout</b> - Time of inactivity until the connection is closed (defaults to 1 hour)</li>\n * </ul>\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Number} [port=25] Port number to connect to\n * @param {String} [host='localhost'] Hostname to connect to\n * @param {Object} [options] Option properties\n */\n\n\nfunction SMTPClient(port, host, options) {\n  Stream.call(this);\n  this.writable = true;\n  this.readable = true;\n  this.stage = 'init';\n  this.options = options || {};\n  this.port = port || (this.options.secureConnection ? 465 : 25);\n  this.host = host || 'localhost';\n  this.options.secureConnection = !!this.options.secureConnection;\n  this.options.auth = this.options.auth || false;\n  this.options.maxConnections = this.options.maxConnections || 5;\n  this.options.enableDotEscaping = this.options.enableDotEscaping || false;\n  this._closing = false;\n\n  if (!this.options.name) {\n    // defaul hostname is machine hostname or [IP]\n    var defaultHostname = oslib.hostname && oslib.hostname() || '';\n\n    if (defaultHostname.indexOf('.') < 0) {\n      defaultHostname = '[127.0.0.1]';\n    }\n\n    if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n      defaultHostname = '[' + defaultHostname + ']';\n    }\n\n    this.options.name = defaultHostname;\n  }\n\n  this._init();\n}\n\nutillib.inherits(SMTPClient, Stream);\n/**\n * <p>Initializes instance variables</p>\n */\n\nSMTPClient.prototype._init = function () {\n  /**\n   * Defines if the current connection is secure or not. If not,\n   * STARTTLS can be used if available\n   * @private\n   */\n  this._secureMode = false;\n  /**\n   * Ignore incoming data on TLS negotiation\n   * @private\n   */\n\n  this._ignoreData = false;\n  /**\n   * Store incomplete messages coming from the server\n   * @private\n   */\n\n  this._remainder = '';\n  /**\n   * If set to true, then this object is no longer active\n   * @private\n   */\n\n  this.destroyed = false;\n  /**\n   * The socket connecting to the server\n   * @publick\n   */\n\n  this.socket = false;\n  /**\n   * Lists supported auth mechanisms\n   * @private\n   */\n\n  this._supportedAuth = [];\n  /**\n   * Currently in data transfer state\n   * @private\n   */\n\n  this._dataMode = false;\n  /**\n   * Keep track if the client sends a leading \\r\\n in data mode\n   * @private\n   */\n\n  this._lastDataBytes = new Buffer(2);\n  this._lastDataBytes[0] = 0x0D;\n  this._lastDataBytes[1] = 0x0A;\n  /**\n   * Function to run if a data chunk comes from the server\n   * @private\n   */\n\n  this._currentAction = false;\n  /**\n   * Timeout variable for waiting the greeting\n   * @private\n   */\n\n  this._greetingTimeout = false;\n  /**\n   * Timeout variable for waiting the connection to start\n   * @private\n   */\n\n  this._connectionTimeout = false;\n\n  if (this.options.ignoreTLS || this.options.secureConnection) {\n    this._secureMode = true;\n  }\n  /**\n   * XOAuth2 token generator if XOAUTH2 auth is used\n   * @private\n   */\n\n\n  this._xoauth2 = false;\n\n  if (typeof this.options.auth.XOAuth2 == 'object' && typeof this.options.auth.XOAuth2.getToken == 'function') {\n    this._xoauth2 = this.options.auth.XOAuth2;\n  } else if (typeof this.options.auth.XOAuth2 == 'object') {\n    if (!this.options.auth.XOAuth2.user && this.options.auth.user) {\n      this.options.auth.XOAuth2.user = this.options.auth.user;\n    }\n\n    this._xoauth2 = xoauth2.createXOAuth2Generator(this.options.auth.XOAuth2);\n  }\n};\n/**\n * <p>Creates a connection to a SMTP server and sets up connection\n * listener</p>\n */\n\n\nSMTPClient.prototype.connect = function () {\n  var opts = {};\n\n  if (this.options.secureConnection) {\n    if (this.options.tls) {\n      Object.keys(this.options.tls).forEach(function (key) {\n        opts[key] = this.options.tls[key];\n      }.bind(this));\n    }\n\n    if (!('rejectUnauthorized' in opts)) {\n      opts.rejectUnauthorized = !!this.options.rejectUnauthorized;\n    }\n\n    if (this.options.localAddress) {\n      opts.localAddress = this.options.localAddress;\n    }\n\n    this.socket = tls.connect(this.port, this.host, opts, this._onConnect.bind(this));\n  } else {\n    opts = {\n      port: this.port,\n      host: this.host\n    };\n\n    if (this.options.localAddress) {\n      opts.localAddress = this.options.localAddress;\n    }\n\n    this.socket = net.connect(opts, this._onConnect.bind(this));\n  }\n\n  if (this.options.connectionTimeout) {\n    this._connectionTimeout = setTimeout(function () {\n      var error = new Error('Connection timeout');\n      error.code = 'ETIMEDOUT';\n      error.errno = 'ETIMEDOUT';\n      error.stage = this.stage;\n      this.emit('error', error);\n      this.close();\n    }.bind(this), this.options.connectionTimeout);\n  }\n\n  this.socket.on('drain', this._onDrain.bind(this));\n  this.socket.on('error', this._onError.bind(this));\n};\n/**\n * <p>Upgrades the connection to TLS</p>\n *\n * @param {Function} callback Callback function to run when the connection\n *        has been secured\n */\n\n\nSMTPClient.prototype._upgradeConnection = function (callback) {\n  this._ignoreData = true;\n  this.socket.removeAllListeners('data');\n  this.socket.removeAllListeners('error');\n  var opts = {\n    socket: this.socket,\n    host: this.host,\n    rejectUnauthorized: !!this.options.rejectUnauthorized\n  };\n  Object.keys(this.options.tls || {}).forEach(function (key) {\n    opts[key] = this.options.tls[key];\n  }.bind(this));\n  this.socket = tls.connect(opts, function () {\n    this._ignoreData = false;\n    this._secureMode = true;\n    this.socket.on('data', this._onData.bind(this));\n    return callback(null, true);\n  }.bind(this));\n  this.socket.on('error', this._onError.bind(this));\n};\n/**\n * <p>Connection listener that is run when the connection to\n * the server is opened</p>\n *\n * @event\n */\n\n\nSMTPClient.prototype._onConnect = function () {\n  this.stage = 'connect';\n  clearTimeout(this._connectionTimeout);\n\n  if ('setKeepAlive' in this.socket) {\n    this.socket.setKeepAlive(true);\n  }\n\n  if ('setNoDelay' in this.socket) {\n    this.socket.setNoDelay(true);\n  }\n\n  this.socket.on('data', this._onData.bind(this));\n  this.socket.on('close', this._onClose.bind(this));\n  this.socket.on('end', this._onEnd.bind(this));\n  this.socket.setTimeout(this.options.socketTimeout || 3 * 3600 * 1000); // 1 hours\n\n  this.socket.on('timeout', this._onTimeout.bind(this));\n  this._greetingTimeout = setTimeout(function () {\n    // if still waiting for greeting, give up\n    if (this.socket && !this._destroyed && this._currentAction == this._actionGreeting) {\n      var error = new Error('Greeting never received');\n      error.code = 'ETIMEDOUT';\n      error.errno = 'ETIMEDOUT';\n      error.stage = this.stage;\n      this.emit('error', error);\n      this.close();\n    }\n  }.bind(this), this.options.greetingTimeout || 10000);\n  this._currentAction = this._actionGreeting;\n};\n/**\n * <p>Destroys the client - removes listeners etc.</p>\n */\n\n\nSMTPClient.prototype._destroy = function () {\n  if (this._destroyed) {\n    return;\n  }\n\n  this._destroyed = true;\n  this._ignoreData = true;\n  this.emit('end');\n  this.removeAllListeners(); // keep the error handler around, just in case\n\n  this.socket.on('error', this._onError.bind(this));\n};\n/**\n * <p>'data' listener for data coming from the server</p>\n *\n * @event\n * @param {Buffer} chunk Data chunk coming from the server\n */\n\n\nSMTPClient.prototype._onData = function (chunk) {\n  var str;\n\n  if (this._ignoreData || !chunk || !chunk.length) {\n    return;\n  } // Wait until end of line\n\n\n  if (chunk.readUInt8(chunk.length - 1) != 0x0A) {\n    this._remainder += chunk.toString();\n    return;\n  } else {\n    str = (this._remainder + chunk.toString()).trim();\n    this._remainder = '';\n  } // if this is a multi line reply, wait until the ending\n\n\n  if (str.match(/(?:^|\\n)\\d{3}-.+$/)) {\n    this._remainder = str + '\\r\\n';\n    return;\n  }\n\n  if (this.options.debug) {\n    console.log('SERVER' + (this.options.instanceId ? ' ' + this.options.instanceId : '') + ':\\n└──' + str.replace(/\\r?\\n/g, '\\n   '));\n  }\n\n  if (this.options.logFile) {\n    this.log('SERVER' + (this.options.instanceId ? ' ' + this.options.instanceId : '') + ':\\n└──' + str.replace(/\\r?\\n/g, '\\n   '));\n  }\n\n  if (typeof this._currentAction == 'function') {\n    this._currentAction.call(this, str);\n  }\n};\n/**\n * <p>'error' listener for the socket</p>\n *\n * @event\n * @param {Error} err Error object\n * @param {String} type Error name\n */\n\n\nSMTPClient.prototype._onError = function (err, type, data) {\n  if (type && type != 'Error') {\n    err.name = type;\n  }\n\n  if (data) {\n    err.data = data;\n  }\n\n  err.stage = this.stage;\n  this.emit('error', err);\n  this.close();\n};\n/**\n * <p>'drain' listener for the socket</p>\n *\n * @event\n */\n\n\nSMTPClient.prototype._onDrain = function () {\n  this.emit('drain');\n};\n/**\n * <p>'close' listener for the socket</p>\n *\n * @event\n */\n\n\nSMTPClient.prototype._onClose = function () {\n  if ([this._actionGreeting, this._actionIdle, this.close].indexOf(this._currentAction) < 0 && !this._destroyed) {\n    return this._onError(new Error('Connection closed unexpectedly'));\n  }\n\n  this.stage = 'close';\n\n  this._destroy();\n};\n/**\n * <p>'end' listener for the socket</p>\n *\n * @event\n */\n\n\nSMTPClient.prototype._onEnd = function () {\n  this.stage = 'end';\n\n  this._destroy();\n};\n/**\n * <p>'timeout' listener for the socket</p>\n *\n * @event\n */\n\n\nSMTPClient.prototype._onTimeout = function () {\n  this.close();\n};\n/**\n * <p>Passes data stream to socket if in data mode</p>\n *\n * @param {Buffer} chunk Chunk of data to be sent to the server\n */\n\n\nSMTPClient.prototype.write = function (chunk) {\n  // works only in data mode\n  if (!this._dataMode || this._destroyed) {\n    // this line should never be reached but if it does, then\n    // say act like everything's normal.\n    return true;\n  }\n\n  if (typeof chunk == 'string') {\n    chunk = new Buffer(chunk, 'utf-8');\n  }\n\n  if (!this.options.enableDotEscaping) {\n    if (chunk.length >= 2) {\n      this._lastDataBytes[0] = chunk[chunk.length - 2];\n      this._lastDataBytes[1] = chunk[chunk.length - 1];\n    } else if (chunk.length == 1) {\n      this._lastDataBytes[0] = this._lastDataBytes[1];\n      this._lastDataBytes[1] = chunk[0];\n    }\n  } else {\n    chunk = this._escapeDot(chunk);\n  }\n\n  if (this.options.debug) {\n    console.log('CLIENT (DATA)' + (this.options.instanceId ? ' ' + this.options.instanceId : '') + ':\\n└──' + chunk.toString().trim().replace(/\\n/g, '\\n   '));\n  }\n\n  if (this.options.logFile) {\n    this.log('CLIENT (DATA)' + (this.options.instanceId ? ' ' + this.options.instanceId : '') + ':\\n└──' + chunk.toString().trim().replace(/\\n/g, '\\n   '));\n  } // pass the chunk to the socket\n\n\n  return this.socket.write(chunk);\n};\n/**\n * <p>Indicates that a data stream for the socket is ended. Works only\n * in data mode.</p>\n *\n * @param {Buffer} [chunk] Chunk of data to be sent to the server\n */\n\n\nSMTPClient.prototype.end = function (chunk) {\n  // works only in data mode\n  if (!this._dataMode || this._destroyed) {\n    // this line should never be reached but if it does, then\n    // say act like everything's normal.\n    return true;\n  }\n\n  if (chunk && chunk.length) {\n    this.write(chunk);\n  } // redirect output from the server to _actionStream\n\n\n  this._currentAction = this._actionStream; // indicate that the stream has ended by sending a single dot on its own line\n  // if the client already closed the data with \\r\\n no need to do it again\n\n  if (this._lastDataBytes[0] == 0x0D && this._lastDataBytes[1] == 0x0A) {\n    this.socket.write(new Buffer('.\\r\\n', 'utf-8'));\n  } else if (this._lastDataBytes[1] == 0x0D) {\n    this.socket.write(new Buffer('\\n.\\r\\n'));\n  } else {\n    this.socket.write(new Buffer('\\r\\n.\\r\\n'));\n  }\n\n  this._lastDataBytes[0] = 0x0D;\n  this._lastDataBytes[1] = 0x0A; // end data mode\n\n  this._dataMode = false;\n};\n/**\n * <p>Send a command to the server, append \\r\\n</p>\n *\n * @param {String} str String to be sent to the server\n */\n\n\nSMTPClient.prototype.sendCommand = function (str) {\n  if (this._destroyed) {\n    // Connection already closed, can't send any more data\n    return;\n  }\n\n  if (this.socket.destroyed) {\n    return this.close();\n  }\n\n  if (this.options.debug) {\n    console.log('CLIENT' + (this.options.instanceId ? ' ' + this.options.instanceId : '') + ':\\n└──' + (str || '').toString().trim().replace(/\\n/g, '\\n   '));\n  }\n\n  if (this.options.logFile) {\n    this.log('CLIENT' + (this.options.instanceId ? ' ' + this.options.instanceId : '') + ':\\n└──' + (str || '').toString().trim().replace(/\\n/g, '\\n   '));\n  }\n\n  this.socket.write(new Buffer(str + '\\r\\n', 'utf-8'));\n};\n/**\n * <p>Sends QUIT</p>\n */\n\n\nSMTPClient.prototype.quit = function () {\n  this._closing = true;\n  this.sendCommand('QUIT');\n  this._currentAction = this.close;\n};\n/**\n * <p>Closes the connection to the server</p>\n */\n\n\nSMTPClient.prototype.close = function () {\n  this._closing = true;\n\n  if (this.options.debug) {\n    console.log('Closing connection to the server');\n  }\n\n  if (this.options.logFile) {\n    this.log('Closing connection to the server');\n  }\n\n  var closeMethod = 'end'; // Clear current job\n\n  this._currentAction = this._actionIdle;\n\n  if (this.stage === 'init') {\n    // Clear connection timeout timer if other than timeout error occurred\n    clearTimeout(this._connectionTimeout); // Close the socket immediately when connection timed out\n\n    closeMethod = 'destroy';\n  }\n\n  if (this.socket && this.socket.socket && this.socket.socket[closeMethod] && !this.socket.socket.destroyed) {\n    this.socket.socket[closeMethod]();\n  }\n\n  if (this.socket && this.socket[closeMethod] && !this.socket.destroyed) {\n    this.socket[closeMethod]();\n  }\n\n  this._destroy();\n};\n/**\n * <p>Initiates a new message by submitting envelope data, starting with\n * <code>MAIL FROM:</code> command</p>\n *\n * @param {Object} envelope Envelope object in the form of\n *        <code>{from:'...', to:['...']}</code>\n *        or\n *        <code>{from:{address:'...',name:'...'}, to:[address:'...',name:'...']}</code>\n */\n\n\nSMTPClient.prototype.useEnvelope = function (envelope) {\n  this._envelope = envelope || {};\n  this._envelope.from = this._envelope.from && this._envelope.from.address || this._envelope.from || 'anonymous@' + this.options.name;\n  this._envelope.to = [].concat(this._envelope.to || []).map(function (to) {\n    return to && to.address || to;\n  }); // clone the recipients array for latter manipulation\n\n  this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n  this._envelope.rcptFailed = [];\n  this._currentAction = this._actionMAIL;\n  this.sendCommand('MAIL FROM:<' + this._envelope.from + '>');\n};\n/**\n * <p>If needed starts the authentication, if not emits 'idle' to\n * indicate that this client is ready to take in an outgoing mail</p>\n */\n\n\nSMTPClient.prototype._authenticateUser = function () {\n  this.stage = 'auth';\n\n  if (!this.options.auth) {\n    // no need to authenticate, at least no data given\n    this._enterIdle();\n\n    return;\n  }\n\n  var auth;\n\n  if (this.options.auth.XOAuthToken && this._supportedAuth.indexOf('XOAUTH') >= 0) {\n    auth = 'XOAUTH';\n  } else if (this._xoauth2 && this._supportedAuth.indexOf('XOAUTH2') >= 0) {\n    auth = 'XOAUTH2';\n  } else if (this.options.authMethod) {\n    auth = this.options.authMethod.toUpperCase().trim();\n  } else {\n    // use first supported\n    auth = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n  }\n\n  switch (auth) {\n    case 'XOAUTH':\n      this._currentAction = this._actionAUTHComplete;\n\n      if (typeof this.options.auth.XOAuthToken == 'object' && typeof this.options.auth.XOAuthToken.generate == 'function') {\n        this.options.auth.XOAuthToken.generate(function (err, XOAuthToken) {\n          if (this._destroyed) {\n            // Nothing to do here anymore, connection already closed\n            return;\n          }\n\n          if (err) {\n            return this._onError(err, 'XOAuthTokenError');\n          }\n\n          this.sendCommand('AUTH XOAUTH ' + XOAuthToken);\n        }.bind(this));\n      } else {\n        this.sendCommand('AUTH XOAUTH ' + this.options.auth.XOAuthToken.toString());\n      }\n\n      return;\n\n    case 'XOAUTH2':\n      this._currentAction = this._actionAUTHComplete;\n\n      this._xoauth2.getToken(function (err, token) {\n        if (this._destroyed) {\n          // Nothing to do here anymore, connection already closed\n          return;\n        }\n\n        if (err) {\n          this._onError(err, 'XOAUTH2Error');\n\n          return;\n        }\n\n        this.sendCommand('AUTH XOAUTH2 ' + token);\n      }.bind(this));\n\n      return;\n\n    case 'LOGIN':\n      this._currentAction = this._actionAUTH_LOGIN_USER;\n      this.sendCommand('AUTH LOGIN');\n      return;\n\n    case 'PLAIN':\n      this._currentAction = this._actionAUTHComplete;\n      this.sendCommand('AUTH PLAIN ' + new Buffer( //this.options.auth.user+'\\u0000'+\n      '\\u0000' + // skip authorization identity as it causes problems with some servers\n      this.options.auth.user + '\\u0000' + this.options.auth.pass, 'utf-8').toString('base64'));\n      return;\n\n    case 'CRAM-MD5':\n      this._currentAction = this._actionAUTH_CRAM_MD5;\n      this.sendCommand('AUTH CRAM-MD5');\n      return;\n  }\n\n  this._onError(new Error('Unknown authentication method - ' + auth), 'UnknowAuthError');\n};\n/** ACTIONS **/\n\n/**\n * <p>Will be run after the connection is created and the server sends\n * a greeting. If the incoming message starts with 220 initiate\n * SMTP session by sending EHLO command</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionGreeting = function (str) {\n  this.stage = 'greeting';\n  clearTimeout(this._greetingTimeout);\n\n  if (str.substr(0, 3) != '220') {\n    this._onError(new Error('Invalid greeting from server - ' + str), false, str);\n\n    return;\n  }\n\n  this._currentAction = this._actionEHLO;\n  this.sendCommand('EHLO ' + this.options.name);\n};\n/**\n * <p>Handles server response for EHLO command. If it yielded in\n * error, try HELO instead, otherwise initiate TLS negotiation\n * if STARTTLS is supported by the server or move into the\n * authentication phase.</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionEHLO = function (str) {\n  this.stage = 'ehlo';\n\n  if (str.substr(0, 3) == '421') {\n    this._onError(new Error('Server terminates connection - ' + str), false, str);\n\n    return;\n  }\n\n  if (str.charAt(0) != '2') {\n    // Try HELO instead\n    this._currentAction = this._actionHELO;\n    this.sendCommand('HELO ' + this.options.name);\n    return;\n  } // Detect if the server supports STARTTLS\n\n\n  if (!this._secureMode && str.match(/[ \\-]STARTTLS\\r?$/mi)) {\n    this.sendCommand('STARTTLS');\n    this._currentAction = this._actionSTARTTLS;\n    return;\n  } // Detect if the server supports PLAIN auth\n\n\n  if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i)) {\n    this._supportedAuth.push('PLAIN');\n  } // Detect if the server supports LOGIN auth\n\n\n  if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i)) {\n    this._supportedAuth.push('LOGIN');\n  } // Detect if the server supports CRAM-MD5 auth\n\n\n  if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i)) {\n    this._supportedAuth.push('CRAM-MD5');\n  } // Detect if the server supports XOAUTH auth\n\n\n  if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH/i)) {\n    this._supportedAuth.push('XOAUTH');\n  } // Detect if the server supports XOAUTH2 auth\n\n\n  if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i)) {\n    this._supportedAuth.push('XOAUTH2');\n  }\n\n  this._authenticateUser.call(this);\n};\n/**\n * <p>Handles server response for HELO command. If it yielded in\n * error, emit 'error', otherwise move into the authentication phase.</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionHELO = function (str) {\n  this.stage = 'helo';\n\n  if (str.charAt(0) != '2') {\n    this._onError(new Error('Invalid response for EHLO/HELO - ' + str), false, str);\n\n    return;\n  }\n\n  this._authenticateUser.call(this);\n};\n/**\n * <p>Handles server response for STARTTLS command. If there's an error\n * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n * succeedes restart the EHLO</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionSTARTTLS = function (str) {\n  this.stage = 'starttls';\n\n  if (str.charAt(0) != '2') {\n    // Try HELO instead\n    this._currentAction = this._actionHELO;\n    this.sendCommand('HELO ' + this.options.name);\n    return;\n  }\n\n  this._upgradeConnection(function (err, secured) {\n    if (err) {\n      this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'TLSError');\n\n      return;\n    }\n\n    if (this.options.debug) {\n      console.log('Connection secured');\n    }\n\n    if (this.options.logFile) {\n      this.log('Connection secured');\n    }\n\n    if (secured) {\n      // restart session\n      this._currentAction = this._actionEHLO;\n      this.sendCommand('EHLO ' + this.options.name);\n    } else {\n      this._authenticateUser.call(this);\n    }\n  }.bind(this));\n};\n/**\n * <p>Handle the response for AUTH LOGIN command. We are expecting\n * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n * response needs to be base64 encoded username.</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionAUTH_LOGIN_USER = function (str) {\n  if (str != '334 VXNlcm5hbWU6') {\n    this._onError(new Error('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\" - ' + str), false, str);\n\n    return;\n  }\n\n  this._currentAction = this._actionAUTH_LOGIN_PASS;\n  this.sendCommand(new Buffer(this.options.auth.user + '', 'utf-8').toString('base64'));\n};\n/**\n * <p>Handle the response for AUTH CRAM-MD5 command. We are expecting\n * '334 <challenge string>'. Data to be sent as response needs to be\n * base64 decoded challenge string, MD5 hashed using the password as\n * a HMAC key, prefixed by the username and a space, and finally all\n * base64 encoded again.</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionAUTH_CRAM_MD5 = function (str) {\n  var challengeMatch = str.match(/^334\\s+(.+)$/),\n      challengeString = '';\n\n  if (!challengeMatch) {\n    this._onError(new Error('Invalid login sequence while waiting for server challenge string - ' + str), false, str);\n\n    return;\n  } else {\n    challengeString = challengeMatch[1];\n  } // Decode from base64\n\n\n  var base64decoded = new Buffer(challengeString, 'base64').toString('ascii'),\n      hmac_md5 = crypto.createHmac('md5', this.options.auth.pass);\n  hmac_md5.update(base64decoded);\n  var hex_hmac = hmac_md5.digest('hex'),\n      prepended = this.options.auth.user + ' ' + hex_hmac;\n  this._currentAction = this._actionAUTH_CRAM_MD5_PASS;\n  this.sendCommand(new Buffer(prepended).toString('base64'));\n};\n/**\n * <p>Handles the response to CRAM-MD5 authentication, if there's no error,\n * the user can be considered logged in. Emit 'idle' and start\n * waiting for a message to send</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionAUTH_CRAM_MD5_PASS = function (str) {\n  if (!str.match(/^235\\s+/)) {\n    this._onError(new Error('Invalid login sequence while waiting for \"235 go ahead\" - ' + str), false, str);\n\n    return;\n  }\n\n  this._enterIdle();\n};\n/**\n * <p>Handle the response for AUTH LOGIN command. We are expecting\n * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n * response needs to be base64 encoded password.</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionAUTH_LOGIN_PASS = function (str) {\n  if (str != '334 UGFzc3dvcmQ6') {\n    this._onError(new Error('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\" - ' + str), false, str);\n\n    return;\n  }\n\n  this._currentAction = this._actionAUTHComplete;\n  this.sendCommand(new Buffer(this.options.auth.pass + '', 'utf-8').toString('base64'));\n};\n/**\n * <p>Handles the response for authentication, if there's no error,\n * the user can be considered logged in. Emit 'idle' and start\n * waiting for a message to send</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionAUTHComplete = function (str) {\n  var response;\n\n  if (this._xoauth2 && str.substr(0, 3) == '334') {\n    try {\n      response = str.split(' ');\n      response.shift();\n      response = JSON.parse(new Buffer(response.join(' '), 'base64').toString('utf-8'));\n\n      if ((!this._xoauth2.reconnectCount || this._xoauth2.reconnectCount < 200) && ['400', '401'].indexOf(response.status) >= 0) {\n        this._xoauth2.reconnectCount = (this._xoauth2.reconnectCount || 0) + 1;\n        this._currentAction = this._actionXOAUTHRetry;\n      } else {\n        this._xoauth2.reconnectCount = 0;\n        this._currentAction = this._actionAUTHComplete;\n      }\n\n      this.sendCommand(new Buffer(0));\n      return;\n    } catch (E) {}\n  }\n\n  if (this._xoauth2) {\n    this._xoauth2.reconnectCount = 0;\n  }\n\n  if (str.charAt(0) != '2') {\n    this._onError(new Error('Invalid login - ' + str), 'AuthError', str);\n\n    return;\n  }\n\n  this._enterIdle();\n};\n/**\n * If XOAUTH2 authentication failed, try again by generating\n * new access token\n */\n\n\nSMTPClient.prototype._actionXOAUTHRetry = function () {\n  // ensure that something is listening unexpected responses\n  this._currentAction = this._actionIdle;\n\n  this._xoauth2.generateToken(function (err, token) {\n    if (this._destroyed) {\n      // Nothing to do here anymore, connection already closed\n      return;\n    }\n\n    if (err) {\n      this._onError(err, 'XOAUTH2Error');\n\n      return;\n    }\n\n    this._currentAction = this._actionAUTHComplete;\n    this.sendCommand('AUTH XOAUTH2 ' + token);\n  }.bind(this));\n};\n/**\n * <p>This function is not expected to run. If it does then there's probably\n * an error (timeout etc.)</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionIdle = function (str) {\n  this.stage = 'idle';\n\n  if (Number(str.charAt(0)) > 3) {\n    this._onError(new Error(str), false, str);\n\n    return;\n  } // this line should never get called\n\n};\n/**\n * <p>Handle response for a <code>MAIL FROM:</code> command</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionMAIL = function (str) {\n  this.stage = 'mail';\n\n  if (Number(str.charAt(0)) != '2') {\n    this._onError(new Error('Mail from command failed - ' + str), 'SenderError', str);\n\n    return;\n  }\n\n  if (!this._envelope.rcptQueue.length) {\n    this._onError(new Error('Can\\'t send mail - no recipients defined'), 'RecipientError', str);\n  } else {\n    this._envelope.curRecipient = this._envelope.rcptQueue.shift();\n    this._currentAction = this._actionRCPT;\n    this.sendCommand('RCPT TO:<' + this._envelope.curRecipient + '>' + this._getDSN());\n  }\n};\n/**\n * Emits 'idle'\n */\n\n\nSMTPClient.prototype._enterIdle = function () {\n  this._currentAction = this._actionIdle;\n  this.emit('idle'); // ready to take orders\n};\n/**\n * <p>SetsUp DSN</p>\n */\n\n\nSMTPClient.prototype._getDSN = function () {\n  var ret = '',\n      n = [],\n      dsn;\n\n  if (this.currentMessage && this.currentMessage.options && 'dsn' in this.currentMessage.options) {\n    dsn = this.currentMessage.options.dsn;\n\n    if (dsn.success) {\n      n.push('SUCCESS');\n    }\n\n    if (dsn.failure) {\n      n.push('FAILURE');\n    }\n\n    if (dsn.delay) {\n      n.push('DELAY');\n    }\n\n    if (n.length > 0) {\n      ret = ' NOTIFY=' + n.join(',') + ' ORCPT=rfc822;' + this.currentMessage._message.from;\n    }\n  }\n\n  return ret;\n};\n/**\n * <p>Handle response for a <code>RCPT TO:</code> command</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionRCPT = function (str) {\n  this.stage = 'rcpt';\n\n  if (Number(str.charAt(0)) != '2') {\n    // this is a soft error\n    this._envelope.rcptFailed.push(this._envelope.curRecipient);\n  }\n\n  if (!this._envelope.rcptQueue.length) {\n    if (this._envelope.rcptFailed.length < this._envelope.to.length) {\n      if (this._envelope.rcptFailed.length) {\n        this.emit('rcptFailed', this._envelope.rcptFailed);\n      }\n\n      this._currentAction = this._actionDATA;\n      this.sendCommand('DATA');\n    } else {\n      this._onError(new Error('Can\\'t send mail - all recipients were rejected'), 'RecipientError', str);\n\n      return;\n    }\n  } else {\n    this._envelope.curRecipient = this._envelope.rcptQueue.shift();\n    this._currentAction = this._actionRCPT;\n    this.sendCommand('RCPT TO:<' + this._envelope.curRecipient + '>');\n  }\n};\n/**\n * <p>Handle response for a <code>DATA</code> command</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionDATA = function (str) {\n  this.stage = 'data'; // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n  // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n\n  if ([2, 3].indexOf(Number(str.charAt(0))) < 0) {\n    this._onError(new Error('Data command failed - ' + str), false, str);\n\n    return;\n  } // Emit that connection is set up for streaming\n\n\n  this._dataMode = true;\n  this._currentAction = this._actionIdle;\n  this.emit('message');\n};\n/**\n * <p>Handle response for a <code>DATA</code> stream</p>\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPClient.prototype._actionStream = function (str) {\n  if (Number(str.charAt(0)) != '2') {\n    // Message failed\n    this.emit('ready', false, str);\n  } else {\n    // Message sent succesfully\n    this.emit('ready', true, str);\n  } // Waiting for new connections\n\n\n  this._currentAction = this._actionIdle;\n\n  if (typeof setImmediate == 'function') {\n    setImmediate(this._enterIdle.bind(this));\n  } else {\n    process.nextTick(this._enterIdle.bind(this));\n  }\n};\n/**\n * <p>Log debugs to given file</p>\n *\n * @param {String} str Log message\n */\n\n\nSMTPClient.prototype.log = function (str) {\n  fs.appendFile(this.options.logFile, str + '\\n', function (err) {\n    if (err) {\n      console.log('Log write failed. Data to log: ' + str);\n    }\n  });\n};\n/**\n * <p>Inserts an extra dot at the begining of a line if it starts with a dot\n * See RFC 2821 Section 4.5.2</p>\n *\n * @param {Buffer} chunk The chunk that will be send.\n */\n\n\nSMTPClient.prototype._escapeDot = function (chunk) {\n  var pos, OutBuff, i;\n  OutBuff = new Buffer(chunk.length * 2);\n  pos = 0;\n\n  for (i = 0; i < chunk.length; i++) {\n    if (this._lastDataBytes[0] == 0x0D && this._lastDataBytes[1] == 0x0A && chunk[i] == 0x2E) {\n      OutBuff[pos] = 0x2E;\n      pos += 1;\n    }\n\n    OutBuff[pos] = chunk[i];\n    pos += 1;\n    this._lastDataBytes[0] = this._lastDataBytes[1];\n    this._lastDataBytes[1] = chunk[i];\n  }\n\n  return OutBuff.slice(0, pos);\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/simplesmtp/lib/client.js"],"names":["Stream","require","utillib","net","tls","oslib","xoauth2","crypto","fs","module","exports","port","host","options","connection","SMTPClient","setImmediate","connect","bind","process","nextTick","call","writable","readable","stage","secureConnection","auth","maxConnections","enableDotEscaping","_closing","name","defaultHostname","hostname","indexOf","match","_init","inherits","prototype","_secureMode","_ignoreData","_remainder","destroyed","socket","_supportedAuth","_dataMode","_lastDataBytes","Buffer","_currentAction","_greetingTimeout","_connectionTimeout","ignoreTLS","_xoauth2","XOAuth2","getToken","user","createXOAuth2Generator","opts","Object","keys","forEach","key","rejectUnauthorized","localAddress","_onConnect","connectionTimeout","setTimeout","error","Error","code","errno","emit","close","on","_onDrain","_onError","_upgradeConnection","callback","removeAllListeners","_onData","clearTimeout","setKeepAlive","setNoDelay","_onClose","_onEnd","socketTimeout","_onTimeout","_destroyed","_actionGreeting","greetingTimeout","_destroy","chunk","str","length","readUInt8","toString","trim","debug","console","log","instanceId","replace","logFile","err","type","data","_actionIdle","write","_escapeDot","end","_actionStream","sendCommand","quit","closeMethod","useEnvelope","envelope","_envelope","from","address","to","concat","map","rcptQueue","JSON","parse","stringify","rcptFailed","_actionMAIL","_authenticateUser","_enterIdle","XOAuthToken","authMethod","toUpperCase","_actionAUTHComplete","generate","token","_actionAUTH_LOGIN_USER","pass","_actionAUTH_CRAM_MD5","substr","_actionEHLO","charAt","_actionHELO","_actionSTARTTLS","push","secured","message","_actionAUTH_LOGIN_PASS","challengeMatch","challengeString","base64decoded","hmac_md5","createHmac","update","hex_hmac","digest","prepended","_actionAUTH_CRAM_MD5_PASS","response","split","shift","join","reconnectCount","status","_actionXOAUTHRetry","E","generateToken","Number","curRecipient","_actionRCPT","_getDSN","ret","n","dsn","currentMessage","success","failure","delay","_message","_actionDATA","appendFile","pos","OutBuff","i","slice"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Stream = require('stream').Stream,\n    utillib = require('util'),\n    net = require('net'),\n    tls = require('tls'),\n    oslib = require('os'),\n    xoauth2 = require('xoauth2'),\n    crypto = require('crypto'),\n    fs = require('fs');\n\n// expose to the world\nmodule.exports = function(port, host, options) {\n    var connection = new SMTPClient(port, host, options);\n\n    if (typeof setImmediate == 'function') {\n        setImmediate(connection.connect.bind(connection));\n    } else {\n        process.nextTick(connection.connect.bind(connection));\n    }\n\n    return connection;\n};\n\n/**\n * <p>Generates a SMTP connection object</p>\n *\n * <p>Optional options object takes the following possible properties:</p>\n * <ul>\n *     <li><b>secureConnection</b> - use SSL</li>\n *     <li><b>name</b> - the name of the client server</li>\n *     <li><b>auth</b> - authentication object <code>{user:'...', pass:'...'}</code>\n *     <li><b>ignoreTLS</b> - ignore server support for STARTTLS</li>\n *     <li><b>tls</b> - options for createCredentials</li>\n *     <li><b>debug</b> - output client and server messages to console</li>\n *     <li><b>logFile</b> - output client and server messages to file</li>\n *     <li><b>instanceId</b> - unique instance id for debugging</li>\n *     <li><b>localAddress</b> - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)</li>\n *     <li><b>greetingTimeout</b> - Time to wait in ms until greeting message is received from the server (defaults to 10000)</li>\n *     <li><b>socketTimeout</b> - Time of inactivity until the connection is closed (defaults to 1 hour)</li>\n * </ul>\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Number} [port=25] Port number to connect to\n * @param {String} [host='localhost'] Hostname to connect to\n * @param {Object} [options] Option properties\n */\nfunction SMTPClient(port, host, options) {\n    Stream.call(this);\n    this.writable = true;\n    this.readable = true;\n\n    this.stage = 'init';\n\n    this.options = options || {};\n\n    this.port = port || (this.options.secureConnection ? 465 : 25);\n    this.host = host || 'localhost';\n\n    this.options.secureConnection = !! this.options.secureConnection;\n    this.options.auth = this.options.auth || false;\n    this.options.maxConnections = this.options.maxConnections || 5;\n    this.options.enableDotEscaping = this.options.enableDotEscaping || false;\n\n    this._closing = false;\n\n    if (!this.options.name) {\n        // defaul hostname is machine hostname or [IP]\n        var defaultHostname = (oslib.hostname && oslib.hostname()) || '';\n\n        if (defaultHostname.indexOf('.') < 0) {\n            defaultHostname = '[127.0.0.1]';\n        }\n        if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n            defaultHostname = '[' + defaultHostname + ']';\n        }\n\n        this.options.name = defaultHostname;\n    }\n\n    this._init();\n}\nutillib.inherits(SMTPClient, Stream);\n\n/**\n * <p>Initializes instance variables</p>\n */\nSMTPClient.prototype._init = function() {\n    /**\n     * Defines if the current connection is secure or not. If not,\n     * STARTTLS can be used if available\n     * @private\n     */\n    this._secureMode = false;\n\n    /**\n     * Ignore incoming data on TLS negotiation\n     * @private\n     */\n    this._ignoreData = false;\n\n    /**\n     * Store incomplete messages coming from the server\n     * @private\n     */\n    this._remainder = '';\n\n    /**\n     * If set to true, then this object is no longer active\n     * @private\n     */\n    this.destroyed = false;\n\n    /**\n     * The socket connecting to the server\n     * @publick\n     */\n    this.socket = false;\n\n    /**\n     * Lists supported auth mechanisms\n     * @private\n     */\n    this._supportedAuth = [];\n\n    /**\n     * Currently in data transfer state\n     * @private\n     */\n    this._dataMode = false;\n\n    /**\n     * Keep track if the client sends a leading \\r\\n in data mode\n     * @private\n     */\n    this._lastDataBytes = new Buffer(2);\n    this._lastDataBytes[0] = 0x0D;\n    this._lastDataBytes[1] = 0x0A;\n\n\n    /**\n     * Function to run if a data chunk comes from the server\n     * @private\n     */\n    this._currentAction = false;\n\n    /**\n     * Timeout variable for waiting the greeting\n     * @private\n     */\n    this._greetingTimeout = false;\n\n    /**\n     * Timeout variable for waiting the connection to start\n     * @private\n     */\n    this._connectionTimeout = false;\n\n    if (this.options.ignoreTLS || this.options.secureConnection) {\n        this._secureMode = true;\n    }\n\n    /**\n     * XOAuth2 token generator if XOAUTH2 auth is used\n     * @private\n     */\n    this._xoauth2 = false;\n\n    if (typeof this.options.auth.XOAuth2 == 'object' && typeof this.options.auth.XOAuth2.getToken == 'function') {\n        this._xoauth2 = this.options.auth.XOAuth2;\n    } else if (typeof this.options.auth.XOAuth2 == 'object') {\n        if (!this.options.auth.XOAuth2.user && this.options.auth.user) {\n            this.options.auth.XOAuth2.user = this.options.auth.user;\n        }\n        this._xoauth2 = xoauth2.createXOAuth2Generator(this.options.auth.XOAuth2);\n    }\n};\n\n/**\n * <p>Creates a connection to a SMTP server and sets up connection\n * listener</p>\n */\nSMTPClient.prototype.connect = function() {\n    var opts = {};\n    if (this.options.secureConnection) {\n        if (this.options.tls) {\n            Object.keys(this.options.tls).forEach((function(key) {\n                opts[key] = this.options.tls[key];\n            }).bind(this));\n        }\n\n        if (!('rejectUnauthorized' in opts)) {\n            opts.rejectUnauthorized = !! this.options.rejectUnauthorized;\n        }\n\n        if (this.options.localAddress) {\n            opts.localAddress = this.options.localAddress;\n        }\n\n        this.socket = tls.connect(this.port, this.host, opts, this._onConnect.bind(this));\n    } else {\n        opts = {\n            port: this.port,\n            host: this.host\n        };\n        if (this.options.localAddress) {\n            opts.localAddress = this.options.localAddress;\n        }\n        this.socket = net.connect(opts, this._onConnect.bind(this));\n    }\n\n    if (this.options.connectionTimeout) {\n        this._connectionTimeout = setTimeout((function() {\n            var error = new Error('Connection timeout');\n            error.code = 'ETIMEDOUT';\n            error.errno = 'ETIMEDOUT';\n            error.stage = this.stage;\n            this.emit('error', error);\n            this.close();\n        }).bind(this), this.options.connectionTimeout);\n    }\n\n    this.socket.on('drain', this._onDrain.bind(this));\n\n    this.socket.on('error', this._onError.bind(this));\n};\n\n/**\n * <p>Upgrades the connection to TLS</p>\n *\n * @param {Function} callback Callback function to run when the connection\n *        has been secured\n */\nSMTPClient.prototype._upgradeConnection = function(callback) {\n    this._ignoreData = true;\n    this.socket.removeAllListeners('data');\n    this.socket.removeAllListeners('error');\n\n    var opts = {\n        socket: this.socket,\n        host: this.host,\n        rejectUnauthorized: !! this.options.rejectUnauthorized\n    };\n\n    Object.keys(this.options.tls || {}).forEach((function(key) {\n        opts[key] = this.options.tls[key];\n    }).bind(this));\n\n    this.socket = tls.connect(opts, (function() {\n        this._ignoreData = false;\n        this._secureMode = true;\n        this.socket.on('data', this._onData.bind(this));\n\n        return callback(null, true);\n    }).bind(this));\n    this.socket.on('error', this._onError.bind(this));\n};\n\n/**\n * <p>Connection listener that is run when the connection to\n * the server is opened</p>\n *\n * @event\n */\nSMTPClient.prototype._onConnect = function() {\n    this.stage = 'connect';\n\n    clearTimeout(this._connectionTimeout);\n\n    if ('setKeepAlive' in this.socket) {\n        this.socket.setKeepAlive(true);\n    }\n\n    if ('setNoDelay' in this.socket) {\n        this.socket.setNoDelay(true);\n    }\n\n    this.socket.on('data', this._onData.bind(this));\n    this.socket.on('close', this._onClose.bind(this));\n    this.socket.on('end', this._onEnd.bind(this));\n\n    this.socket.setTimeout(this.options.socketTimeout || (3 * 3600 * 1000)); // 1 hours\n    this.socket.on('timeout', this._onTimeout.bind(this));\n\n    this._greetingTimeout = setTimeout((function() {\n        // if still waiting for greeting, give up\n        if (this.socket && !this._destroyed && this._currentAction == this._actionGreeting) {\n            var error = new Error('Greeting never received');\n            error.code = 'ETIMEDOUT';\n            error.errno = 'ETIMEDOUT';\n            error.stage = this.stage;\n            this.emit('error', error);\n            this.close();\n        }\n    }).bind(this), this.options.greetingTimeout || 10000);\n\n    this._currentAction = this._actionGreeting;\n};\n\n/**\n * <p>Destroys the client - removes listeners etc.</p>\n */\nSMTPClient.prototype._destroy = function() {\n    if (this._destroyed) {\n        return;\n    }\n    this._destroyed = true;\n    this._ignoreData = true;\n    this.emit('end');\n    this.removeAllListeners();\n    // keep the error handler around, just in case\n    this.socket.on('error', this._onError.bind(this));\n};\n\n/**\n * <p>'data' listener for data coming from the server</p>\n *\n * @event\n * @param {Buffer} chunk Data chunk coming from the server\n */\nSMTPClient.prototype._onData = function(chunk) {\n    var str;\n\n    if (this._ignoreData || !chunk || !chunk.length) {\n        return;\n    }\n\n    // Wait until end of line\n    if (chunk.readUInt8(chunk.length - 1) != 0x0A) {\n        this._remainder += chunk.toString();\n        return;\n    } else {\n        str = (this._remainder + chunk.toString()).trim();\n        this._remainder = '';\n    }\n\n    // if this is a multi line reply, wait until the ending\n    if (str.match(/(?:^|\\n)\\d{3}-.+$/)) {\n        this._remainder = str + '\\r\\n';\n        return;\n    }\n\n    if (this.options.debug) {\n        console.log('SERVER' + (this.options.instanceId ? ' ' +\n            this.options.instanceId : '') + ':\\n└──' + str.replace(/\\r?\\n/g, '\\n   '));\n    }\n    if (this.options.logFile) {\n        this.log('SERVER' + (this.options.instanceId ? ' ' +\n            this.options.instanceId : '') + ':\\n└──' + str.replace(/\\r?\\n/g, '\\n   '));\n    }\n\n    if (typeof this._currentAction == 'function') {\n        this._currentAction.call(this, str);\n    }\n};\n\n/**\n * <p>'error' listener for the socket</p>\n *\n * @event\n * @param {Error} err Error object\n * @param {String} type Error name\n */\nSMTPClient.prototype._onError = function(err, type, data) {\n    if (type && type != 'Error') {\n        err.name = type;\n    }\n    if (data) {\n        err.data = data;\n    }\n    err.stage = this.stage;\n    this.emit('error', err);\n    this.close();\n};\n\n/**\n * <p>'drain' listener for the socket</p>\n *\n * @event\n */\nSMTPClient.prototype._onDrain = function() {\n    this.emit('drain');\n};\n\n\n/**\n * <p>'close' listener for the socket</p>\n *\n * @event\n */\nSMTPClient.prototype._onClose = function() {\n    if ([this._actionGreeting, this._actionIdle, this.close].indexOf(this._currentAction) < 0 && !this._destroyed) {\n        return this._onError(new Error('Connection closed unexpectedly'));\n    }\n\n    this.stage = 'close';\n\n    this._destroy();\n};\n\n/**\n * <p>'end' listener for the socket</p>\n *\n * @event\n */\nSMTPClient.prototype._onEnd = function() {\n    this.stage = 'end';\n\n    this._destroy();\n};\n\n/**\n * <p>'timeout' listener for the socket</p>\n *\n * @event\n */\nSMTPClient.prototype._onTimeout = function() {\n    this.close();\n};\n\n/**\n * <p>Passes data stream to socket if in data mode</p>\n *\n * @param {Buffer} chunk Chunk of data to be sent to the server\n */\nSMTPClient.prototype.write = function(chunk) {\n    // works only in data mode\n    if (!this._dataMode || this._destroyed) {\n        // this line should never be reached but if it does, then\n        // say act like everything's normal.\n        return true;\n    }\n\n    if (typeof chunk == 'string') {\n        chunk = new Buffer(chunk, 'utf-8');\n    }\n\n    if (!this.options.enableDotEscaping) {\n        if (chunk.length >= 2) {\n            this._lastDataBytes[0] = chunk[chunk.length - 2];\n            this._lastDataBytes[1] = chunk[chunk.length - 1];\n        } else if (chunk.length == 1) {\n            this._lastDataBytes[0] = this._lastDataBytes[1];\n            this._lastDataBytes[1] = chunk[0];\n        }\n    } else {\n        chunk = this._escapeDot(chunk);\n    }\n\n    if (this.options.debug) {\n        console.log('CLIENT (DATA)' + (this.options.instanceId ? ' ' +\n            this.options.instanceId : '') + ':\\n└──' + chunk.toString().trim().replace(/\\n/g, '\\n   '));\n    }\n    if (this.options.logFile) {\n        this.log('CLIENT (DATA)' + (this.options.instanceId ? ' ' +\n            this.options.instanceId : '') + ':\\n└──' + chunk.toString().trim().replace(/\\n/g, '\\n   '));\n    }\n\n    // pass the chunk to the socket\n    return this.socket.write(chunk);\n};\n\n/**\n * <p>Indicates that a data stream for the socket is ended. Works only\n * in data mode.</p>\n *\n * @param {Buffer} [chunk] Chunk of data to be sent to the server\n */\nSMTPClient.prototype.end = function(chunk) {\n    // works only in data mode\n    if (!this._dataMode || this._destroyed) {\n        // this line should never be reached but if it does, then\n        // say act like everything's normal.\n        return true;\n    }\n\n    if (chunk && chunk.length) {\n        this.write(chunk);\n    }\n\n    // redirect output from the server to _actionStream\n    this._currentAction = this._actionStream;\n\n    // indicate that the stream has ended by sending a single dot on its own line\n    // if the client already closed the data with \\r\\n no need to do it again\n    if (this._lastDataBytes[0] == 0x0D && this._lastDataBytes[1] == 0x0A) {\n        this.socket.write(new Buffer('.\\r\\n', 'utf-8'));\n    } else if (this._lastDataBytes[1] == 0x0D) {\n        this.socket.write(new Buffer('\\n.\\r\\n'));\n    } else {\n        this.socket.write(new Buffer('\\r\\n.\\r\\n'));\n    }\n    this._lastDataBytes[0] = 0x0D;\n    this._lastDataBytes[1] = 0x0A;\n\n\n    // end data mode\n    this._dataMode = false;\n};\n\n/**\n * <p>Send a command to the server, append \\r\\n</p>\n *\n * @param {String} str String to be sent to the server\n */\nSMTPClient.prototype.sendCommand = function(str) {\n    if (this._destroyed) {\n        // Connection already closed, can't send any more data\n        return;\n    }\n    if (this.socket.destroyed) {\n        return this.close();\n    }\n    if (this.options.debug) {\n        console.log('CLIENT' + (this.options.instanceId ? ' ' +\n            this.options.instanceId : '') + ':\\n└──' + (str || '').toString().trim().replace(/\\n/g, '\\n   '));\n    }\n    if (this.options.logFile) {\n        this.log('CLIENT' + (this.options.instanceId ? ' ' +\n            this.options.instanceId : '') + ':\\n└──' + (str || '').toString().trim().replace(/\\n/g, '\\n   '));\n    }\n    this.socket.write(new Buffer(str + '\\r\\n', 'utf-8'));\n};\n\n/**\n * <p>Sends QUIT</p>\n */\nSMTPClient.prototype.quit = function() {\n    this._closing = true;\n    this.sendCommand('QUIT');\n    this._currentAction = this.close;\n};\n\n/**\n * <p>Closes the connection to the server</p>\n */\nSMTPClient.prototype.close = function() {\n    this._closing = true;\n\n    if (this.options.debug) {\n        console.log('Closing connection to the server');\n    }\n\n    if (this.options.logFile) {\n        this.log('Closing connection to the server');\n    }\n\n    var closeMethod = 'end';\n\n    // Clear current job\n    this._currentAction = this._actionIdle;\n\n    if (this.stage === 'init') {\n        // Clear connection timeout timer if other than timeout error occurred\n        clearTimeout(this._connectionTimeout);\n        // Close the socket immediately when connection timed out\n        closeMethod = 'destroy';\n    }\n\n    if (this.socket && this.socket.socket && this.socket.socket[closeMethod] && !this.socket.socket.destroyed) {\n        this.socket.socket[closeMethod]();\n    }\n    if (this.socket && this.socket[closeMethod] && !this.socket.destroyed) {\n        this.socket[closeMethod]();\n    }\n    this._destroy();\n};\n\n/**\n * <p>Initiates a new message by submitting envelope data, starting with\n * <code>MAIL FROM:</code> command</p>\n *\n * @param {Object} envelope Envelope object in the form of\n *        <code>{from:'...', to:['...']}</code>\n *        or\n *        <code>{from:{address:'...',name:'...'}, to:[address:'...',name:'...']}</code>\n */\nSMTPClient.prototype.useEnvelope = function(envelope) {\n    this._envelope = envelope || {};\n    this._envelope.from = this._envelope.from && this._envelope.from.address || this._envelope.from || ('anonymous@' + this.options.name);\n\n    this._envelope.to = [].concat(this._envelope.to || []).map(function(to) {\n        return to && to.address || to;\n    });\n\n    // clone the recipients array for latter manipulation\n    this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n    this._envelope.rcptFailed = [];\n\n    this._currentAction = this._actionMAIL;\n    this.sendCommand('MAIL FROM:<' + (this._envelope.from) + '>');\n};\n\n/**\n * <p>If needed starts the authentication, if not emits 'idle' to\n * indicate that this client is ready to take in an outgoing mail</p>\n */\nSMTPClient.prototype._authenticateUser = function() {\n    this.stage = 'auth';\n\n    if (!this.options.auth) {\n        // no need to authenticate, at least no data given\n        this._enterIdle();\n        return;\n    }\n\n    var auth;\n    if (this.options.auth.XOAuthToken && this._supportedAuth.indexOf('XOAUTH') >= 0) {\n        auth = 'XOAUTH';\n    } else if (this._xoauth2 && this._supportedAuth.indexOf('XOAUTH2') >= 0) {\n        auth = 'XOAUTH2';\n    } else if (this.options.authMethod) {\n        auth = this.options.authMethod.toUpperCase().trim();\n    } else {\n        // use first supported\n        auth = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n    }\n\n    switch (auth) {\n        case 'XOAUTH':\n            this._currentAction = this._actionAUTHComplete;\n\n            if (typeof this.options.auth.XOAuthToken == 'object' &&\n                typeof this.options.auth.XOAuthToken.generate == 'function') {\n                this.options.auth.XOAuthToken.generate((function(err, XOAuthToken) {\n                    if (this._destroyed) {\n                        // Nothing to do here anymore, connection already closed\n                        return;\n                    }\n                    if (err) {\n                        return this._onError(err, 'XOAuthTokenError');\n                    }\n                    this.sendCommand('AUTH XOAUTH ' + XOAuthToken);\n                }).bind(this));\n            } else {\n                this.sendCommand('AUTH XOAUTH ' + this.options.auth.XOAuthToken.toString());\n            }\n            return;\n        case 'XOAUTH2':\n            this._currentAction = this._actionAUTHComplete;\n            this._xoauth2.getToken((function(err, token) {\n                if (this._destroyed) {\n                    // Nothing to do here anymore, connection already closed\n                    return;\n                }\n                if (err) {\n                    this._onError(err, 'XOAUTH2Error');\n                    return;\n                }\n                this.sendCommand('AUTH XOAUTH2 ' + token);\n            }).bind(this));\n            return;\n        case 'LOGIN':\n            this._currentAction = this._actionAUTH_LOGIN_USER;\n            this.sendCommand('AUTH LOGIN');\n            return;\n        case 'PLAIN':\n            this._currentAction = this._actionAUTHComplete;\n            this.sendCommand('AUTH PLAIN ' + new Buffer(\n                //this.options.auth.user+'\\u0000'+\n                '\\u0000' + // skip authorization identity as it causes problems with some servers\n                this.options.auth.user + '\\u0000' +\n                this.options.auth.pass, 'utf-8').toString('base64'));\n            return;\n        case 'CRAM-MD5':\n            this._currentAction = this._actionAUTH_CRAM_MD5;\n            this.sendCommand('AUTH CRAM-MD5');\n            return;\n    }\n\n    this._onError(new Error('Unknown authentication method - ' + auth), 'UnknowAuthError');\n};\n\n/** ACTIONS **/\n\n/**\n * <p>Will be run after the connection is created and the server sends\n * a greeting. If the incoming message starts with 220 initiate\n * SMTP session by sending EHLO command</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionGreeting = function(str) {\n    this.stage = 'greeting';\n\n    clearTimeout(this._greetingTimeout);\n\n    if (str.substr(0, 3) != '220') {\n        this._onError(new Error('Invalid greeting from server - ' + str), false, str);\n        return;\n    }\n\n    this._currentAction = this._actionEHLO;\n    this.sendCommand('EHLO ' + this.options.name);\n};\n\n/**\n * <p>Handles server response for EHLO command. If it yielded in\n * error, try HELO instead, otherwise initiate TLS negotiation\n * if STARTTLS is supported by the server or move into the\n * authentication phase.</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionEHLO = function(str) {\n    this.stage = 'ehlo';\n\n    if (str.substr(0, 3) == '421') {\n        this._onError(new Error('Server terminates connection - ' + str), false, str);\n        return;\n    }\n\n    if (str.charAt(0) != '2') {\n        // Try HELO instead\n        this._currentAction = this._actionHELO;\n        this.sendCommand('HELO ' + this.options.name);\n        return;\n    }\n\n    // Detect if the server supports STARTTLS\n    if (!this._secureMode && str.match(/[ \\-]STARTTLS\\r?$/mi)) {\n        this.sendCommand('STARTTLS');\n        this._currentAction = this._actionSTARTTLS;\n        return;\n    }\n\n    // Detect if the server supports PLAIN auth\n    if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i)) {\n        this._supportedAuth.push('PLAIN');\n    }\n\n    // Detect if the server supports LOGIN auth\n    if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i)) {\n        this._supportedAuth.push('LOGIN');\n    }\n\n    // Detect if the server supports CRAM-MD5 auth\n    if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i)) {\n        this._supportedAuth.push('CRAM-MD5');\n    }\n\n    // Detect if the server supports XOAUTH auth\n    if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH/i)) {\n        this._supportedAuth.push('XOAUTH');\n    }\n\n    // Detect if the server supports XOAUTH2 auth\n    if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i)) {\n        this._supportedAuth.push('XOAUTH2');\n    }\n\n    this._authenticateUser.call(this);\n};\n\n/**\n * <p>Handles server response for HELO command. If it yielded in\n * error, emit 'error', otherwise move into the authentication phase.</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionHELO = function(str) {\n    this.stage = 'helo';\n\n    if (str.charAt(0) != '2') {\n        this._onError(new Error('Invalid response for EHLO/HELO - ' + str), false, str);\n        return;\n    }\n    this._authenticateUser.call(this);\n};\n\n/**\n * <p>Handles server response for STARTTLS command. If there's an error\n * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n * succeedes restart the EHLO</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionSTARTTLS = function(str) {\n    this.stage = 'starttls';\n\n    if (str.charAt(0) != '2') {\n        // Try HELO instead\n        this._currentAction = this._actionHELO;\n        this.sendCommand('HELO ' + this.options.name);\n        return;\n    }\n\n    this._upgradeConnection((function(err, secured) {\n        if (err) {\n            this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'TLSError');\n            return;\n        }\n        if (this.options.debug) {\n            console.log('Connection secured');\n        }\n        if (this.options.logFile) {\n            this.log('Connection secured');\n        }\n\n        if (secured) {\n            // restart session\n            this._currentAction = this._actionEHLO;\n            this.sendCommand('EHLO ' + this.options.name);\n        } else {\n            this._authenticateUser.call(this);\n        }\n    }).bind(this));\n};\n\n/**\n * <p>Handle the response for AUTH LOGIN command. We are expecting\n * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n * response needs to be base64 encoded username.</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionAUTH_LOGIN_USER = function(str) {\n    if (str != '334 VXNlcm5hbWU6') {\n        this._onError(new Error('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\" - ' + str), false, str);\n        return;\n    }\n    this._currentAction = this._actionAUTH_LOGIN_PASS;\n    this.sendCommand(new Buffer(\n        this.options.auth.user + '', 'utf-8').toString('base64'));\n};\n\n/**\n * <p>Handle the response for AUTH CRAM-MD5 command. We are expecting\n * '334 <challenge string>'. Data to be sent as response needs to be\n * base64 decoded challenge string, MD5 hashed using the password as\n * a HMAC key, prefixed by the username and a space, and finally all\n * base64 encoded again.</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionAUTH_CRAM_MD5 = function(str) {\n    var challengeMatch = str.match(/^334\\s+(.+)$/),\n        challengeString = '';\n\n    if (!challengeMatch) {\n        this._onError(new Error('Invalid login sequence while waiting for server challenge string - ' + str), false, str);\n        return;\n    } else {\n        challengeString = challengeMatch[1];\n    }\n\n    // Decode from base64\n    var base64decoded = new Buffer(challengeString, 'base64').toString('ascii'),\n        hmac_md5 = crypto.createHmac('md5', this.options.auth.pass);\n    hmac_md5.update(base64decoded);\n    var hex_hmac = hmac_md5.digest('hex'),\n        prepended = this.options.auth.user + ' ' + hex_hmac;\n\n    this._currentAction = this._actionAUTH_CRAM_MD5_PASS;\n\n    this.sendCommand(new Buffer(prepended).toString('base64'));\n};\n\n/**\n * <p>Handles the response to CRAM-MD5 authentication, if there's no error,\n * the user can be considered logged in. Emit 'idle' and start\n * waiting for a message to send</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionAUTH_CRAM_MD5_PASS = function(str) {\n    if (!str.match(/^235\\s+/)) {\n        this._onError(new Error('Invalid login sequence while waiting for \"235 go ahead\" - ' + str), false, str);\n        return;\n    }\n    this._enterIdle();\n};\n\n/**\n * <p>Handle the response for AUTH LOGIN command. We are expecting\n * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n * response needs to be base64 encoded password.</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionAUTH_LOGIN_PASS = function(str) {\n    if (str != '334 UGFzc3dvcmQ6') {\n        this._onError(new Error('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\" - ' + str), false, str);\n        return;\n    }\n    this._currentAction = this._actionAUTHComplete;\n    this.sendCommand(new Buffer(this.options.auth.pass + '', 'utf-8').toString('base64'));\n};\n\n/**\n * <p>Handles the response for authentication, if there's no error,\n * the user can be considered logged in. Emit 'idle' and start\n * waiting for a message to send</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionAUTHComplete = function(str) {\n    var response;\n\n    if (this._xoauth2 && str.substr(0, 3) == '334') {\n        try {\n            response = str.split(' ');\n            response.shift();\n            response = JSON.parse(new Buffer(response.join(' '), 'base64').toString('utf-8'));\n\n            if ((!this._xoauth2.reconnectCount || this._xoauth2.reconnectCount < 200) && ['400', '401'].indexOf(response.status) >= 0) {\n                this._xoauth2.reconnectCount = (this._xoauth2.reconnectCount || 0) + 1;\n                this._currentAction = this._actionXOAUTHRetry;\n            } else {\n                this._xoauth2.reconnectCount = 0;\n                this._currentAction = this._actionAUTHComplete;\n            }\n            this.sendCommand(new Buffer(0));\n            return;\n\n        } catch (E) {}\n    }\n\n    if(this._xoauth2){\n        this._xoauth2.reconnectCount = 0;\n    }\n\n    if (str.charAt(0) != '2') {\n        this._onError(new Error('Invalid login - ' + str), 'AuthError', str);\n        return;\n    }\n\n    this._enterIdle();\n};\n\n/**\n * If XOAUTH2 authentication failed, try again by generating\n * new access token\n */\nSMTPClient.prototype._actionXOAUTHRetry = function() {\n\n    // ensure that something is listening unexpected responses\n    this._currentAction = this._actionIdle;\n\n    this._xoauth2.generateToken((function(err, token) {\n        if (this._destroyed) {\n            // Nothing to do here anymore, connection already closed\n            return;\n        }\n        if (err) {\n            this._onError(err, 'XOAUTH2Error');\n            return;\n        }\n        this._currentAction = this._actionAUTHComplete;\n        this.sendCommand('AUTH XOAUTH2 ' + token);\n    }).bind(this));\n};\n\n/**\n * <p>This function is not expected to run. If it does then there's probably\n * an error (timeout etc.)</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionIdle = function(str) {\n    this.stage = 'idle';\n\n    if (Number(str.charAt(0)) > 3) {\n        this._onError(new Error(str), false, str);\n        return;\n    }\n\n    // this line should never get called\n};\n\n/**\n * <p>Handle response for a <code>MAIL FROM:</code> command</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionMAIL = function(str) {\n    this.stage = 'mail';\n\n    if (Number(str.charAt(0)) != '2') {\n        this._onError(new Error('Mail from command failed - ' + str), 'SenderError', str);\n        return;\n    }\n\n    if (!this._envelope.rcptQueue.length) {\n        this._onError(new Error('Can\\'t send mail - no recipients defined'), 'RecipientError', str);\n    } else {\n        this._envelope.curRecipient = this._envelope.rcptQueue.shift();\n        this._currentAction = this._actionRCPT;\n        this.sendCommand('RCPT TO:<' + this._envelope.curRecipient + '>' + this._getDSN());\n    }\n};\n\n/**\n * Emits 'idle'\n */\nSMTPClient.prototype._enterIdle = function() {\n    this._currentAction = this._actionIdle;\n    this.emit('idle'); // ready to take orders\n};\n\n/**\n * <p>SetsUp DSN</p>\n */\nSMTPClient.prototype._getDSN = function() {\n    var ret = '',\n        n = [],\n        dsn;\n\n    if (this.currentMessage && this.currentMessage.options && 'dsn' in this.currentMessage.options) {\n        dsn = this.currentMessage.options.dsn;\n\n        if (dsn.success) {\n            n.push('SUCCESS');\n        }\n\n        if (dsn.failure) {\n            n.push('FAILURE');\n        }\n\n        if (dsn.delay) {\n            n.push('DELAY');\n        }\n\n        if (n.length > 0) {\n            ret = ' NOTIFY=' + n.join(',') + ' ORCPT=rfc822;' + this.currentMessage._message.from;\n        }\n    }\n\n    return ret;\n};\n\n/**\n * <p>Handle response for a <code>RCPT TO:</code> command</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionRCPT = function(str) {\n    this.stage = 'rcpt';\n\n    if (Number(str.charAt(0)) != '2') {\n        // this is a soft error\n        this._envelope.rcptFailed.push(this._envelope.curRecipient);\n    }\n\n    if (!this._envelope.rcptQueue.length) {\n        if (this._envelope.rcptFailed.length < this._envelope.to.length) {\n            if (this._envelope.rcptFailed.length) {\n                this.emit('rcptFailed', this._envelope.rcptFailed);\n            }\n            this._currentAction = this._actionDATA;\n            this.sendCommand('DATA');\n        } else {\n            this._onError(new Error('Can\\'t send mail - all recipients were rejected'), 'RecipientError', str);\n            return;\n        }\n    } else {\n        this._envelope.curRecipient = this._envelope.rcptQueue.shift();\n        this._currentAction = this._actionRCPT;\n        this.sendCommand('RCPT TO:<' + this._envelope.curRecipient + '>');\n    }\n};\n\n/**\n * <p>Handle response for a <code>DATA</code> command</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionDATA = function(str) {\n    this.stage = 'data';\n\n    // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n    // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n    if ([2, 3].indexOf(Number(str.charAt(0))) < 0) {\n        this._onError(new Error('Data command failed - ' + str), false, str);\n        return;\n    }\n\n    // Emit that connection is set up for streaming\n    this._dataMode = true;\n    this._currentAction = this._actionIdle;\n    this.emit('message');\n};\n\n/**\n * <p>Handle response for a <code>DATA</code> stream</p>\n *\n * @param {String} str Message from the server\n */\nSMTPClient.prototype._actionStream = function(str) {\n    if (Number(str.charAt(0)) != '2') {\n        // Message failed\n        this.emit('ready', false, str);\n    } else {\n        // Message sent succesfully\n        this.emit('ready', true, str);\n    }\n\n    // Waiting for new connections\n    this._currentAction = this._actionIdle;\n\n    if (typeof setImmediate == 'function') {\n        setImmediate(this._enterIdle.bind(this));\n    } else {\n        process.nextTick(this._enterIdle.bind(this));\n    }\n};\n\n/**\n * <p>Log debugs to given file</p>\n *\n * @param {String} str Log message\n */\nSMTPClient.prototype.log = function(str) {\n    fs.appendFile(this.options.logFile, str + '\\n', function(err) {\n        if (err) {\n            console.log('Log write failed. Data to log: ' + str);\n        }\n    });\n};\n\n/**\n * <p>Inserts an extra dot at the begining of a line if it starts with a dot\n * See RFC 2821 Section 4.5.2</p>\n *\n * @param {Buffer} chunk The chunk that will be send.\n */\nSMTPClient.prototype._escapeDot = function(chunk) {\n    var pos, OutBuff, i;\n    OutBuff = new Buffer(chunk.length * 2);\n    pos = 0;\n\n    for (i = 0; i < chunk.length; i++) {\n        if (this._lastDataBytes[0] == 0x0D && this._lastDataBytes[1] == 0x0A && chunk[i] == 0x2E) {\n            OutBuff[pos] = 0x2E;\n            pos += 1;\n        }\n        OutBuff[pos] = chunk[i];\n        pos += 1;\n        this._lastDataBytes[0] = this._lastDataBytes[1];\n        this._lastDataBytes[1] = chunk[i];\n    }\n\n    return OutBuff.slice(0, pos);\n};"]},"metadata":{},"sourceType":"script"}
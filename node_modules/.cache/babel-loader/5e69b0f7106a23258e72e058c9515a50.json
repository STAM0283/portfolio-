{"ast":null,"code":"var Stream = require(\"stream\").Stream,\n    utillib = require(\"util\"),\n    querystring = require(\"querystring\"),\n    http = require(\"http\"),\n    https = require(\"https\"),\n    urllib = require(\"url\");\n/**\n * Wrapper for new XOAuth2Generator.\n *\n * Usage:\n *\n *     var xoauthgen = createXOAuth2Generator({});\n *     xoauthgen.getToken(function(err, xoauthtoken){\n *         socket.send(\"AUTH XOAUTH2 \" + xoauthtoken);\n *     });\n *\n * @param {Object} options See XOAuth2Generator for details\n * @return {Object}\n */\n\n\nmodule.exports.createXOAuth2Generator = function (options) {\n  return new XOAuth2Generator(options);\n};\n/**\n * XOAUTH2 access_token generator for Gmail.\n * Create client ID for web applications in Google API console to use it.\n * See Offline Access for receiving the needed refreshToken for an user\n * https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n *\n * @constructor\n * @param {Object} options Client information for token generation\n * @param {String} options.user         (Required) User e-mail address\n * @param {String} options.clientId     (Required) Client ID value\n * @param {String} options.clientSecret (Required) Client secret value\n * @param {String} options.refreshToken (Required) Refresh token for an user\n * @param {String} options.accessUrl    (Optional) Endpoint for token generation, defaults to \"https://accounts.google.com/o/oauth2/token\"\n * @param {String} options.accessToken  (Optional) An existing valid accessToken\n * @param {int}    options.timeout      (Optional) A timestamp in milliseconds after 1.1.1970 when the given accessToken expires\n */\n\n\nfunction XOAuth2Generator(options) {\n  Stream.call(this);\n  this.options = options || {};\n  this.options.accessUrl = this.options.accessUrl || \"https://accounts.google.com/o/oauth2/token\";\n  this.token = this.options.accessToken && this.buildXOAuth2Token(this.options.accessToken) || false;\n  this.accessToken = this.token && this.options.accessToken || false;\n  this.timeout = this.options.timeout && Date.now() + ((Number(this.options.timeout) || 0) - 1) * 1000 || 0;\n}\n\nutillib.inherits(XOAuth2Generator, Stream);\n/**\n * Returns or generates (if previous has expired) a XOAuth2 token\n *\n * @param {Function} callback Callback function with error object and token string\n */\n\nXOAuth2Generator.prototype.getToken = function (callback) {\n  if (this.token && (!this.timeout || this.timeout > Date.now())) {\n    return callback(null, this.token, this.accessToken);\n  }\n\n  this.generateToken(callback);\n};\n/**\n * Updates token values\n *\n * @param {String} accessToken New access token\n * @param {Number} timeout Access token lifetime in seconds\n *\n * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: Timestamp in seconds after 1.1.1970 }\n */\n\n\nXOAuth2Generator.prototype.updateToken = function (accessToken, timeout) {\n  this.token = this.buildXOAuth2Token(accessToken);\n  this.accessToken = accessToken;\n  this.timeout = timeout && Date.now() + ((Number(timeout) || 0) - 1) * 1000 || 0;\n  this.emit(\"token\", {\n    user: this.options.user,\n    accessToken: accessToken || \"\",\n    timeout: Math.floor(this.timeout / 1000)\n  });\n};\n/**\n * Generates a new XOAuth2 token with the credentials provided at initialization\n *\n * @param {Function} callback Callback function with error object and token string\n */\n\n\nXOAuth2Generator.prototype.generateToken = function (callback) {\n  var urlOptions = {\n    client_id: this.options.clientId || \"\",\n    client_secret: this.options.clientSecret || \"\",\n    refresh_token: this.options.refreshToken,\n    grant_type: \"refresh_token\"\n  },\n      payload = querystring.stringify(urlOptions);\n  postRequest(this.options.accessUrl, payload, function (error, response, body) {\n    var data;\n\n    if (error) {\n      return callback(error);\n    }\n\n    try {\n      data = JSON.parse(body.toString());\n    } catch (E) {\n      return callback(E);\n    }\n\n    if (!data || typeof data != \"object\") {\n      return callback(new Error(\"Invalid authentication response\"));\n    }\n\n    if (data.error) {\n      return callback(new Error(data.error));\n    }\n\n    if (data.access_token) {\n      this.updateToken(data.access_token, data.expires_in);\n      return callback(null, this.token, this.accessToken);\n    }\n\n    return callback(new Error(\"No access token\"));\n  }.bind(this));\n};\n/**\n * Converts an access_token and user id into a base64 encoded XOAuth2 token\n *\n * @param {String} accessToken Access token string\n * @return {String} Base64 encoded token for IMAP or SMTP login\n */\n\n\nXOAuth2Generator.prototype.buildXOAuth2Token = function (accessToken) {\n  var authData = [\"user=\" + (this.options.user || \"\"), \"auth=Bearer \" + accessToken, \"\", \"\"];\n  return new Buffer(authData.join(\"\\x01\"), \"utf-8\").toString(\"base64\");\n};\n\nfunction postRequest(url, payload, callback) {\n  var options = urllib.parse(url),\n      finished = false;\n  options.method = \"POST\";\n  var req = (options.protocol == \"https:\" ? https : http).request(options, function (res) {\n    var data = [];\n    res.on('data', function (chunk) {\n      data.push(chunk);\n    });\n    res.on(\"end\", function () {\n      if (finished) {\n        return;\n      }\n\n      finished = true;\n      return callback(null, res, Buffer.concat(data));\n    });\n    res.on(\"error\", function (err) {\n      if (finished) {\n        return;\n      }\n\n      finished = true;\n      callback(err);\n    });\n  });\n  req.on(\"error\", function (err) {\n    if (finished) {\n      return;\n    }\n\n    finished = true;\n    callback(err);\n  });\n\n  if (payload) {\n    req.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    req.setHeader(\"Content-Length\", typeof payload == \"string\" ? Buffer.byteLength(payload) : payload.length);\n  }\n\n  req.write(payload);\n  req.end();\n}","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/xoauth2/index.js"],"names":["Stream","require","utillib","querystring","http","https","urllib","module","exports","createXOAuth2Generator","options","XOAuth2Generator","call","accessUrl","token","accessToken","buildXOAuth2Token","timeout","Date","now","Number","inherits","prototype","getToken","callback","generateToken","updateToken","emit","user","Math","floor","urlOptions","client_id","clientId","client_secret","clientSecret","refresh_token","refreshToken","grant_type","payload","stringify","postRequest","error","response","body","data","JSON","parse","toString","E","Error","access_token","expires_in","bind","authData","Buffer","join","url","finished","method","req","protocol","request","res","on","chunk","push","concat","err","setHeader","byteLength","length","write","end"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,MAA/B;AAAA,IACIE,OAAO,GAAGD,OAAO,CAAC,MAAD,CADrB;AAAA,IAEIE,WAAW,GAAGF,OAAO,CAAC,aAAD,CAFzB;AAAA,IAGIG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAHlB;AAAA,IAIII,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAJnB;AAAA,IAKIK,MAAM,GAAGL,OAAO,CAAC,KAAD,CALpB;AAOA;;;;;;;;;;;;;;;AAaAM,MAAM,CAACC,OAAP,CAAeC,sBAAf,GAAwC,UAASC,OAAT,EAAiB;AACrD,SAAO,IAAIC,gBAAJ,CAAqBD,OAArB,CAAP;AACH,CAFD;AAIA;;;;;;;;;;;;;;;;;;AAgBA,SAASC,gBAAT,CAA0BD,OAA1B,EAAkC;AAC9BV,EAAAA,MAAM,CAACY,IAAP,CAAY,IAAZ;AACA,OAAKF,OAAL,GAAeA,OAAO,IAAI,EAA1B;AAEA,OAAKA,OAAL,CAAaG,SAAb,GAAyB,KAAKH,OAAL,CAAaG,SAAb,IAA0B,4CAAnD;AAEA,OAAKC,KAAL,GAAa,KAAKJ,OAAL,CAAaK,WAAb,IAA4B,KAAKC,iBAAL,CAAuB,KAAKN,OAAL,CAAaK,WAApC,CAA5B,IAAgF,KAA7F;AACA,OAAKA,WAAL,GAAmB,KAAKD,KAAL,IAAc,KAAKJ,OAAL,CAAaK,WAA3B,IAA0C,KAA7D;AAEA,OAAKE,OAAL,GAAe,KAAKP,OAAL,CAAaO,OAAb,IAAwBC,IAAI,CAACC,GAAL,KAAa,CAAC,CAACC,MAAM,CAAC,KAAKV,OAAL,CAAaO,OAAd,CAAN,IAAgC,CAAjC,IAAsC,CAAvC,IAA4C,IAAjF,IAAyF,CAAxG;AACH;;AACDf,OAAO,CAACmB,QAAR,CAAiBV,gBAAjB,EAAmCX,MAAnC;AAEA;;;;;;AAKAW,gBAAgB,CAACW,SAAjB,CAA2BC,QAA3B,GAAsC,UAASC,QAAT,EAAkB;AACpD,MAAG,KAAKV,KAAL,KAAe,CAAC,KAAKG,OAAN,IAAiB,KAAKA,OAAL,GAAeC,IAAI,CAACC,GAAL,EAA/C,CAAH,EAA8D;AAC1D,WAAOK,QAAQ,CAAC,IAAD,EAAO,KAAKV,KAAZ,EAAmB,KAAKC,WAAxB,CAAf;AACH;;AACD,OAAKU,aAAL,CAAmBD,QAAnB;AACH,CALD;AAOA;;;;;;;;;;AAQAb,gBAAgB,CAACW,SAAjB,CAA2BI,WAA3B,GAAyC,UAASX,WAAT,EAAsBE,OAAtB,EAA8B;AACnE,OAAKH,KAAL,GAAa,KAAKE,iBAAL,CAAuBD,WAAvB,CAAb;AACA,OAAKA,WAAL,GAAmBA,WAAnB;AACA,OAAKE,OAAL,GAAeA,OAAO,IAAIC,IAAI,CAACC,GAAL,KAAa,CAAC,CAACC,MAAM,CAACH,OAAD,CAAN,IAAmB,CAApB,IAAyB,CAA1B,IAA+B,IAAvD,IAA+D,CAA9E;AAEA,OAAKU,IAAL,CAAU,OAAV,EAAmB;AACfC,IAAAA,IAAI,EAAE,KAAKlB,OAAL,CAAakB,IADJ;AAEfb,IAAAA,WAAW,EAAEA,WAAW,IAAI,EAFb;AAGfE,IAAAA,OAAO,EAAEY,IAAI,CAACC,KAAL,CAAW,KAAKb,OAAL,GAAa,IAAxB;AAHM,GAAnB;AAKH,CAVD;AAYA;;;;;;;AAKAN,gBAAgB,CAACW,SAAjB,CAA2BG,aAA3B,GAA2C,UAASD,QAAT,EAAkB;AACzD,MAAIO,UAAU,GAAG;AACTC,IAAAA,SAAS,EAAE,KAAKtB,OAAL,CAAauB,QAAb,IAAyB,EAD3B;AAETC,IAAAA,aAAa,EAAE,KAAKxB,OAAL,CAAayB,YAAb,IAA6B,EAFnC;AAGTC,IAAAA,aAAa,EAAE,KAAK1B,OAAL,CAAa2B,YAHnB;AAITC,IAAAA,UAAU,EAAE;AAJH,GAAjB;AAAA,MAMIC,OAAO,GAAGpC,WAAW,CAACqC,SAAZ,CAAsBT,UAAtB,CANd;AAQIU,EAAAA,WAAW,CAAC,KAAK/B,OAAL,CAAaG,SAAd,EAAyB0B,OAAzB,EAAmC,UAASG,KAAT,EAAgBC,QAAhB,EAA0BC,IAA1B,EAA+B;AACzE,QAAIC,IAAJ;;AAEA,QAAGH,KAAH,EAAS;AACL,aAAOlB,QAAQ,CAACkB,KAAD,CAAf;AACH;;AACD,QAAG;AACCG,MAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,QAAL,EAAX,CAAP;AACH,KAFD,CAEC,OAAMC,CAAN,EAAQ;AACL,aAAOzB,QAAQ,CAACyB,CAAD,CAAf;AACH;;AAED,QAAG,CAACJ,IAAD,IAAS,OAAOA,IAAP,IAAe,QAA3B,EAAoC;AAChC,aAAOrB,QAAQ,CAAC,IAAI0B,KAAJ,CAAU,iCAAV,CAAD,CAAf;AACH;;AAED,QAAGL,IAAI,CAACH,KAAR,EAAc;AACV,aAAOlB,QAAQ,CAAC,IAAI0B,KAAJ,CAAUL,IAAI,CAACH,KAAf,CAAD,CAAf;AACH;;AAED,QAAGG,IAAI,CAACM,YAAR,EAAqB;AACjB,WAAKzB,WAAL,CAAiBmB,IAAI,CAACM,YAAtB,EAAoCN,IAAI,CAACO,UAAzC;AACA,aAAO5B,QAAQ,CAAC,IAAD,EAAO,KAAKV,KAAZ,EAAmB,KAAKC,WAAxB,CAAf;AACH;;AAED,WAAOS,QAAQ,CAAC,IAAI0B,KAAJ,CAAU,iBAAV,CAAD,CAAf;AACH,GA1B4C,CA0B1CG,IA1B0C,CA0BrC,IA1BqC,CAAlC,CAAX;AA2BP,CApCD;AAsCA;;;;;;;;AAMA1C,gBAAgB,CAACW,SAAjB,CAA2BN,iBAA3B,GAA+C,UAASD,WAAT,EAAqB;AAChE,MAAIuC,QAAQ,GAAG,CACX,WAAW,KAAK5C,OAAL,CAAakB,IAAb,IAAqB,EAAhC,CADW,EAEX,iBAAiBb,WAFN,EAGX,EAHW,EAIX,EAJW,CAAf;AAKA,SAAO,IAAIwC,MAAJ,CAAWD,QAAQ,CAACE,IAAT,CAAc,MAAd,CAAX,EAAkC,OAAlC,EAA2CR,QAA3C,CAAoD,QAApD,CAAP;AACH,CAPD;;AAUA,SAASP,WAAT,CAAqBgB,GAArB,EAA0BlB,OAA1B,EAAmCf,QAAnC,EAA4C;AACxC,MAAId,OAAO,GAAGJ,MAAM,CAACyC,KAAP,CAAaU,GAAb,CAAd;AAAA,MACIC,QAAQ,GAAG,KADf;AAGAhD,EAAAA,OAAO,CAACiD,MAAR,GAAiB,MAAjB;AAEA,MAAIC,GAAG,GAAG,CAAClD,OAAO,CAACmD,QAAR,IAAkB,QAAlB,GAA2BxD,KAA3B,GAAiCD,IAAlC,EAAwC0D,OAAxC,CAAgDpD,OAAhD,EAAyD,UAASqD,GAAT,EAAc;AAC7E,QAAIlB,IAAI,GAAG,EAAX;AAEAkB,IAAAA,GAAG,CAACC,EAAJ,CAAO,MAAP,EAAe,UAAUC,KAAV,EAAiB;AAC5BpB,MAAAA,IAAI,CAACqB,IAAL,CAAUD,KAAV;AACH,KAFD;AAIAF,IAAAA,GAAG,CAACC,EAAJ,CAAO,KAAP,EAAc,YAAU;AACpB,UAAGN,QAAH,EAAY;AAAC;AAAQ;;AACrBA,MAAAA,QAAQ,GAAG,IAAX;AACA,aAAOlC,QAAQ,CAAC,IAAD,EAAOuC,GAAP,EAAYR,MAAM,CAACY,MAAP,CAActB,IAAd,CAAZ,CAAf;AACH,KAJD;AAMAkB,IAAAA,GAAG,CAACC,EAAJ,CAAO,OAAP,EAAgB,UAASI,GAAT,EAAc;AAC1B,UAAGV,QAAH,EAAY;AAAC;AAAQ;;AACrBA,MAAAA,QAAQ,GAAG,IAAX;AACAlC,MAAAA,QAAQ,CAAC4C,GAAD,CAAR;AACH,KAJD;AAKH,GAlBS,CAAV;AAoBAR,EAAAA,GAAG,CAACI,EAAJ,CAAO,OAAP,EAAgB,UAASI,GAAT,EAAc;AAC1B,QAAGV,QAAH,EAAY;AAAC;AAAQ;;AACrBA,IAAAA,QAAQ,GAAG,IAAX;AACAlC,IAAAA,QAAQ,CAAC4C,GAAD,CAAR;AACH,GAJD;;AAMA,MAAG7B,OAAH,EAAW;AACPqB,IAAAA,GAAG,CAACS,SAAJ,CAAc,cAAd,EAA8B,mCAA9B;AACAT,IAAAA,GAAG,CAACS,SAAJ,CAAc,gBAAd,EAAgC,OAAO9B,OAAP,IAAkB,QAAlB,GAA6BgB,MAAM,CAACe,UAAP,CAAkB/B,OAAlB,CAA7B,GAA0DA,OAAO,CAACgC,MAAlG;AACH;;AAEDX,EAAAA,GAAG,CAACY,KAAJ,CAAUjC,OAAV;AACAqB,EAAAA,GAAG,CAACa,GAAJ;AAEH","sourcesContent":["var Stream = require(\"stream\").Stream,\n    utillib = require(\"util\"),\n    querystring = require(\"querystring\"),\n    http = require(\"http\"),\n    https = require(\"https\"),\n    urllib = require(\"url\");\n\n/**\n * Wrapper for new XOAuth2Generator.\n *\n * Usage:\n *\n *     var xoauthgen = createXOAuth2Generator({});\n *     xoauthgen.getToken(function(err, xoauthtoken){\n *         socket.send(\"AUTH XOAUTH2 \" + xoauthtoken);\n *     });\n *\n * @param {Object} options See XOAuth2Generator for details\n * @return {Object}\n */\nmodule.exports.createXOAuth2Generator = function(options){\n    return new XOAuth2Generator(options);\n};\n\n/**\n * XOAUTH2 access_token generator for Gmail.\n * Create client ID for web applications in Google API console to use it.\n * See Offline Access for receiving the needed refreshToken for an user\n * https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n *\n * @constructor\n * @param {Object} options Client information for token generation\n * @param {String} options.user         (Required) User e-mail address\n * @param {String} options.clientId     (Required) Client ID value\n * @param {String} options.clientSecret (Required) Client secret value\n * @param {String} options.refreshToken (Required) Refresh token for an user\n * @param {String} options.accessUrl    (Optional) Endpoint for token generation, defaults to \"https://accounts.google.com/o/oauth2/token\"\n * @param {String} options.accessToken  (Optional) An existing valid accessToken\n * @param {int}    options.timeout      (Optional) A timestamp in milliseconds after 1.1.1970 when the given accessToken expires\n */\nfunction XOAuth2Generator(options){\n    Stream.call(this);\n    this.options = options || {};\n\n    this.options.accessUrl = this.options.accessUrl || \"https://accounts.google.com/o/oauth2/token\";\n\n    this.token = this.options.accessToken && this.buildXOAuth2Token(this.options.accessToken) || false;\n    this.accessToken = this.token && this.options.accessToken || false;\n\n    this.timeout = this.options.timeout && Date.now() + ((Number(this.options.timeout) || 0) - 1) * 1000 || 0;\n}\nutillib.inherits(XOAuth2Generator, Stream);\n\n/**\n * Returns or generates (if previous has expired) a XOAuth2 token\n *\n * @param {Function} callback Callback function with error object and token string\n */\nXOAuth2Generator.prototype.getToken = function(callback){\n    if(this.token && (!this.timeout || this.timeout > Date.now())){\n        return callback(null, this.token, this.accessToken);\n    }\n    this.generateToken(callback);\n};\n\n/**\n * Updates token values\n *\n * @param {String} accessToken New access token\n * @param {Number} timeout Access token lifetime in seconds\n *\n * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: Timestamp in seconds after 1.1.1970 }\n */\nXOAuth2Generator.prototype.updateToken = function(accessToken, timeout){\n    this.token = this.buildXOAuth2Token(accessToken);\n    this.accessToken = accessToken;\n    this.timeout = timeout && Date.now() + ((Number(timeout) || 0) - 1) * 1000 || 0;\n\n    this.emit(\"token\", {\n        user: this.options.user,\n        accessToken: accessToken || \"\",\n        timeout: Math.floor(this.timeout/1000)\n    });\n};\n\n/**\n * Generates a new XOAuth2 token with the credentials provided at initialization\n *\n * @param {Function} callback Callback function with error object and token string\n */\nXOAuth2Generator.prototype.generateToken = function(callback){\n    var urlOptions = {\n            client_id: this.options.clientId || \"\",\n            client_secret: this.options.clientSecret || \"\",\n            refresh_token: this.options.refreshToken,\n            grant_type: \"refresh_token\"\n        },\n        payload = querystring.stringify(urlOptions);\n\n        postRequest(this.options.accessUrl, payload, (function(error, response, body){\n            var data;\n\n            if(error){\n                return callback(error);\n            }\n            try{\n                data = JSON.parse(body.toString());\n            }catch(E){\n                return callback(E);\n            }\n\n            if(!data || typeof data != \"object\"){\n                return callback(new Error(\"Invalid authentication response\"));\n            }\n\n            if(data.error){\n                return callback(new Error(data.error));\n            }\n\n            if(data.access_token){\n                this.updateToken(data.access_token, data.expires_in);\n                return callback(null, this.token, this.accessToken);\n            }\n\n            return callback(new Error(\"No access token\"));\n        }).bind(this));\n};\n\n/**\n * Converts an access_token and user id into a base64 encoded XOAuth2 token\n *\n * @param {String} accessToken Access token string\n * @return {String} Base64 encoded token for IMAP or SMTP login\n */\nXOAuth2Generator.prototype.buildXOAuth2Token = function(accessToken){\n    var authData = [\n        \"user=\" + (this.options.user || \"\"),\n        \"auth=Bearer \" + accessToken,\n        \"\",\n        \"\"];\n    return new Buffer(authData.join(\"\\x01\"), \"utf-8\").toString(\"base64\");\n};\n\n\nfunction postRequest(url, payload, callback){\n    var options = urllib.parse(url),\n        finished = false;\n\n    options.method = \"POST\";\n\n    var req = (options.protocol==\"https:\"?https:http).request(options, function(res) {\n        var data = [];\n\n        res.on('data', function (chunk) {\n            data.push(chunk);\n        });\n\n        res.on(\"end\", function(){\n            if(finished){return;}\n            finished = true\n            return callback(null, res, Buffer.concat(data));\n        });\n\n        res.on(\"error\", function(err) {\n            if(finished){return;}\n            finished = true\n            callback(err);\n        });\n    });\n\n    req.on(\"error\", function(err) {\n        if(finished){return;}\n        finished = true\n        callback(err);\n    });\n\n    if(payload){\n        req.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        req.setHeader(\"Content-Length\", typeof payload == \"string\" ? Buffer.byteLength(payload) : payload.length);\n    }\n\n    req.write(payload);\n    req.end();\n\n}\n"]},"metadata":{},"sourceType":"script"}
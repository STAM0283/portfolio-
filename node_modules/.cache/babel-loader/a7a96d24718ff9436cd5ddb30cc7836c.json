{"ast":null,"code":"var AWS = require('./core');\n\nrequire('./credentials');\n\nrequire('./credentials/credential_provider_chain');\n/**\n * The main configuration class used by all service objects to set\n * the region, credentials, and other options for requests.\n *\n * By default, credentials and region settings are left unconfigured.\n * This should be configured by the application before using any\n * AWS service APIs.\n *\n * In order to set global configuration options, properties should\n * be assigned to the global {AWS.config} object.\n *\n * @see AWS.config\n *\n * @!attribute credentials\n *   @return [AWS.Credentials] the AWS credentials to sign requests with.\n *\n * @!attribute region\n *   @example Set the global region setting to us-west-2\n *     AWS.config.update({region: 'us-west-2'});\n *   @return [AWS.Credentials] The region to send service requests to.\n *   @see http://docs.amazonwebservices.com/general/latest/gr/rande.html\n *     A list of available endpoints for each AWS service\n *\n * @!attribute maxRetries\n *   @return [Integer] the maximum amount of retries to perform for a\n *     service request. By default this value is calculated by the specific\n *     service object that the request is being made to.\n *\n * @!attribute maxRedirects\n *   @return [Integer] the maximum amount of redirects to follow for a\n *     service request. Defaults to 10.\n *\n * @!attribute paramValidation\n *   @return [Boolean] whether input parameters should be validated against\n *     the operation description before sending the request. Defaults to true.\n *\n * @!attribute computeChecksums\n *   @return [Boolean] whether to compute checksums for payload bodies when\n *     the service accepts it (currently supported in S3 only).\n *\n * @!attribute convertResponseTypes\n *   @return [Boolean] whether types are converted when parsing response data.\n *     Currently only supported for JSON based services. Turning this off may\n *     improve performance on large response payloads. Defaults to `true`.\n *\n * @!attribute sslEnabled\n *   @return [Boolean] whether SSL is enabled for requests\n *\n * @!attribute s3ForcePathStyle\n *   @return [Boolean] whether to force path style URLs for S3 objects\n *\n * @!attribute httpOptions\n *   @return [map] A set of options to pass to the low-level HTTP request.\n *     Currently supported options are:\n *\n *     * **proxy** [String] &mdash; the URL to proxy requests through\n *     * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform\n *       HTTP requests with. Used for connection pooling. Defaults to the global\n *       agent (`http.globalAgent`) for non-SSL connections. Note that for\n *       SSL connections, a special Agent object is used in order to enable\n *       peer certificate verification. This feature is only supported in the\n *       Node.js environment.\n *     * **timeout** [Integer] &mdash; The number of milliseconds to wait before\n *       giving up on a connection attempt. Defaults to no timeout.\n *     * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous\n *       HTTP requests. Used in the browser environment only. Set to false to\n *       send requests synchronously. Defaults to true (async on).\n * @!attribute logger\n *   @return [#write,#log] an object that responds to .write() (like a stream)\n *     or .log() (like the console object) in order to log information about\n *     requests\n *\n * @!attribute signatureVersion\n *   @return [String] the signature version to sign requests with (overriding\n *     the API configuration). Possible values are: 'v2', 'v3', 'v4'.\n */\n\n\nAWS.Config = AWS.util.inherit({\n  /**\n   * Creates a new configuration object. This is the object that passes\n   * option data along to service requests, including credentials, security,\n   * region information, and some service specific settings.\n   *\n   * @example Creating a new configuration object with credentials and region\n   *   var config = new AWS.Config({\n   *     accessKeyId: 'AKID', secretAccessKey: 'SECRET', region: 'us-west-2'\n   *   });\n   * @option options accessKeyId [String] your AWS access key ID.\n   * @option options secretAccessKey [String] your AWS secret access key.\n   * @option options sessionToken [AWS.Credentials] the optional AWS\n   *   session token to sign requests with.\n   * @option options credentials [AWS.Credentials] the AWS credentials\n   *   to sign requests with. You can either specify this object, or\n   *   specify the accessKeyId and secretAccessKey options directly.\n   * @option options credentialProvider [AWS.CredentialProviderChain] the\n   *   provider chain used to resolve credentials if no static `credentials`\n   *   property is set.\n   * @option options region [String] the region to send service requests to.\n   *   See {region} for more information.\n   * @option options maxRetries [Integer] the maximum amount of retries to\n   *   attempt with a request. See {maxRetries} for more information.\n   * @option options maxRedirects [Integer] the maximum amount of redirects to\n   *   follow with a request. See {maxRedirects} for more information.\n   * @option options sslEnabled [Boolean] whether to enable SSL for\n   *   requests.\n   * @option options paramValidation [Boolean] whether parameter validation\n   *   is on.\n   * @option options computeChecksums [Boolean] whether to compute checksums\n   *   for payload bodies when the service accepts it (currently supported\n   *   in S3 only)\n   * @option options convertResponseTypes [Boolean] whether types are converted\n   *     when parsing response data. Currently only supported for JSON based\n   *     services. Turning this off may improve performance on large response\n   *     payloads. Defaults to `true`.\n   * @option options s3ForcePathStyle [Boolean] whether to force path\n   *   style URLs for S3 objects.\n   * @option options httpOptions [map] A set of options to pass to the low-level\n   *   HTTP request. Currently supported options are:\n   *\n   *   * **proxy** [String] &mdash; the URL to proxy requests through\n   *   * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform\n   *     HTTP requests with. Used for connection pooling. Defaults to the global\n   *     agent (`http.globalAgent`) for non-SSL connections. Note that for\n   *     SSL connections, a special Agent object is used in order to enable\n   *     peer certificate verification. This feature is only available in the\n   *     Node.js environment.\n   *   * **timeout** [Integer] &mdash; Sets the socket to timeout after timeout\n   *     milliseconds of inactivity on the socket. Defaults to no timeout.\n   *   * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous\n   *     HTTP requests. Used in the browser environment only. Set to false to\n   *     send requests synchronously. Defaults to true (async on).\n   * @option options apiVersion [String, Date] a String in YYYY-MM-DD format\n   *   (or a date) that represents the latest possible API version that can be\n   *   used in all services (unless overridden by `apiVersions`). Specify\n   *   'latest' to use the latest possible version.\n   * @option options apiVersions [map<String, String|Date>] a map of service\n   *   identifiers (the lowercase service class name) with the API version to\n   *   use when instantiating a service. Specify 'latest' for each individual\n   *   that can use the latest available version.\n   * @option options logger [#write,#log] an object that responds to .write()\n   *   (like a stream) or .log() (like the console object) in order to log\n   *   information about requests\n   * @option options signatureVersion [String] the signature version to sign\n   *   requests with (overriding the API configuration). Possible values are:\n   *   'v2', 'v3', 'v4'.\n   */\n  constructor: function Config(options) {\n    if (options === undefined) options = {};\n    options = this.extractCredentials(options);\n    AWS.util.each.call(this, this.keys, function (key, value) {\n      this.set(key, options[key], value);\n    });\n  },\n\n  /**\n   * @overload update(options, allowUnknownKeys = false)\n   *   Updates the current configuration object with new options.\n   *\n   *   @example Update maxRetries property of a configuration object\n   *     config.update({maxRetries: 10});\n   *   @param [Object] options a map of option keys and values.\n   *   @param [Boolean] allowUnknownKeys whether unknown keys can be set on\n   *     the configuration object. Defaults to `false`.\n   *   @see constructor\n   */\n  update: function update(options, allowUnknownKeys) {\n    allowUnknownKeys = allowUnknownKeys || false;\n    options = this.extractCredentials(options);\n    AWS.util.each.call(this, options, function (key, value) {\n      if (allowUnknownKeys || this.keys.hasOwnProperty(key)) this[key] = value;\n    });\n  },\n\n  /**\n   * Loads credentials from the configuration object. This is used internally\n   * by the SDK to ensure that refreshable {Credentials} objects are properly\n   * refreshed and loaded when sending a request. If you want to ensure that\n   * your credentials are loaded prior to a request, you can use this method\n   * directly to provide accurate credential data stored in the object.\n   *\n   * @note If you configure the SDK with static or environment credentials,\n   *   the credential data should already be present in {credentials} attribute.\n   *   This method is primarily necessary to load credentials from asynchronous\n   *   sources, or sources that can refresh credentials periodically.\n   * @example Getting your access key\n   *   AWS.config.getCredentials(function(err) {\n   *     if (err) console.log(err.stack); // credentials not loaded\n   *     else console.log(\"Access Key:\", AWS.config.credentials.accessKeyId);\n   *   })\n   * @callback callback function(err)\n   *   Called when the {credentials} have been properly set on the configuration\n   *   object.\n   *\n   *   @param err [Error] if this is set, credentials were not successfuly\n   *     loaded and this error provides information why.\n   * @see credentials\n   * @see Credentials\n   */\n  getCredentials: function getCredentials(callback) {\n    var self = this;\n\n    function finish(err) {\n      callback(err, err ? null : self.credentials);\n    }\n\n    function credError(msg, err) {\n      return new AWS.util.error(err || new Error(), {\n        code: 'CredentialsError',\n        message: msg\n      });\n    }\n\n    function getAsyncCredentials() {\n      self.credentials.get(function (err) {\n        if (err) {\n          var msg = 'Could not load credentials from ' + self.credentials.constructor.name;\n          err = credError(msg, err);\n        }\n\n        finish(err);\n      });\n    }\n\n    function getStaticCredentials() {\n      var err = null;\n\n      if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {\n        err = credError('Missing credentials');\n      }\n\n      finish(err);\n    }\n\n    if (self.credentials) {\n      if (typeof self.credentials.get === 'function') {\n        getAsyncCredentials();\n      } else {\n        // static credentials\n        getStaticCredentials();\n      }\n    } else if (self.credentialProvider) {\n      self.credentialProvider.resolve(function (err, creds) {\n        if (err) {\n          err = credError('Could not load credentials from any providers', err);\n        }\n\n        self.credentials = creds;\n        finish(err);\n      });\n    } else {\n      finish(credError('No credentials to load'));\n    }\n  },\n\n  /**\n   * Loads configuration data from a JSON file into this config object.\n   * @note Loading configuration will reset all existing configuration\n   *   on the object.\n   * @!macro nobrowser\n   * @param path [String] the path to load configuration from\n   * @return [AWS.Config] the same configuration object\n   */\n  loadFromPath: function loadFromPath(path) {\n    this.clear();\n    var options = JSON.parse(AWS.util.readFileSync(path));\n    var fileSystemCreds = new AWS.FileSystemCredentials(path);\n    var chain = new AWS.CredentialProviderChain();\n    chain.providers.unshift(fileSystemCreds);\n    chain.resolve(function (err, creds) {\n      if (err) throw err;else options.credentials = creds;\n    });\n    this.constructor(options);\n    return this;\n  },\n\n  /**\n   * Clears configuration data on this object\n   *\n   * @api private\n   */\n  clear: function clear() {\n    /*jshint forin:false */\n    AWS.util.each.call(this, this.keys, function (key) {\n      delete this[key];\n    }); // reset credential provider\n\n    this.set('credentials', undefined);\n    this.set('credentialProvider', undefined);\n  },\n\n  /**\n   * Sets a property on the configuration object, allowing for a\n   * default value\n   * @api private\n   */\n  set: function set(property, value, defaultValue) {\n    if (value === undefined) {\n      if (defaultValue === undefined) {\n        defaultValue = this.keys[property];\n      }\n\n      if (typeof defaultValue === 'function') {\n        this[property] = defaultValue.call(this);\n      } else {\n        this[property] = defaultValue;\n      }\n    } else {\n      this[property] = value;\n    }\n  },\n\n  /**\n   * All of the keys with their default values.\n   *\n   * @constant\n   * @api private\n   */\n  keys: {\n    credentials: null,\n    credentialProvider: null,\n    region: null,\n    logger: null,\n    apiVersions: {},\n    apiVersion: null,\n    endpoint: undefined,\n    httpOptions: {},\n    maxRetries: undefined,\n    maxRedirects: 10,\n    paramValidation: true,\n    sslEnabled: true,\n    s3ForcePathStyle: false,\n    computeChecksums: true,\n    convertResponseTypes: true,\n    dynamoDbCrc32: true,\n    signatureVersion: null\n  },\n\n  /**\n   * Extracts accessKeyId, secretAccessKey and sessionToken\n   * from a configuration hash.\n   *\n   * @api private\n   */\n  extractCredentials: function extractCredentials(options) {\n    if (options.accessKeyId && options.secretAccessKey) {\n      options = AWS.util.copy(options);\n      options.credentials = new AWS.Credentials(options);\n    }\n\n    return options;\n  }\n});\n/**\n * @return [AWS.Config] The global configuration object singleton instance\n * @readonly\n * @see AWS.Config\n */\n\nAWS.config = new AWS.Config();","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/config.js"],"names":["AWS","require","Config","util","inherit","constructor","options","undefined","extractCredentials","each","call","keys","key","value","set","update","allowUnknownKeys","hasOwnProperty","getCredentials","callback","self","finish","err","credentials","credError","msg","error","Error","code","message","getAsyncCredentials","get","name","getStaticCredentials","accessKeyId","secretAccessKey","credentialProvider","resolve","creds","loadFromPath","path","clear","JSON","parse","readFileSync","fileSystemCreds","FileSystemCredentials","chain","CredentialProviderChain","providers","unshift","property","defaultValue","region","logger","apiVersions","apiVersion","endpoint","httpOptions","maxRetries","maxRedirects","paramValidation","sslEnabled","s3ForcePathStyle","computeChecksums","convertResponseTypes","dynamoDbCrc32","signatureVersion","copy","Credentials","config"],"mappings":"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","sourcesContent":["var AWS = require('./core');\nrequire('./credentials');\nrequire('./credentials/credential_provider_chain');\n\n/**\n * The main configuration class used by all service objects to set\n * the region, credentials, and other options for requests.\n *\n * By default, credentials and region settings are left unconfigured.\n * This should be configured by the application before using any\n * AWS service APIs.\n *\n * In order to set global configuration options, properties should\n * be assigned to the global {AWS.config} object.\n *\n * @see AWS.config\n *\n * @!attribute credentials\n *   @return [AWS.Credentials] the AWS credentials to sign requests with.\n *\n * @!attribute region\n *   @example Set the global region setting to us-west-2\n *     AWS.config.update({region: 'us-west-2'});\n *   @return [AWS.Credentials] The region to send service requests to.\n *   @see http://docs.amazonwebservices.com/general/latest/gr/rande.html\n *     A list of available endpoints for each AWS service\n *\n * @!attribute maxRetries\n *   @return [Integer] the maximum amount of retries to perform for a\n *     service request. By default this value is calculated by the specific\n *     service object that the request is being made to.\n *\n * @!attribute maxRedirects\n *   @return [Integer] the maximum amount of redirects to follow for a\n *     service request. Defaults to 10.\n *\n * @!attribute paramValidation\n *   @return [Boolean] whether input parameters should be validated against\n *     the operation description before sending the request. Defaults to true.\n *\n * @!attribute computeChecksums\n *   @return [Boolean] whether to compute checksums for payload bodies when\n *     the service accepts it (currently supported in S3 only).\n *\n * @!attribute convertResponseTypes\n *   @return [Boolean] whether types are converted when parsing response data.\n *     Currently only supported for JSON based services. Turning this off may\n *     improve performance on large response payloads. Defaults to `true`.\n *\n * @!attribute sslEnabled\n *   @return [Boolean] whether SSL is enabled for requests\n *\n * @!attribute s3ForcePathStyle\n *   @return [Boolean] whether to force path style URLs for S3 objects\n *\n * @!attribute httpOptions\n *   @return [map] A set of options to pass to the low-level HTTP request.\n *     Currently supported options are:\n *\n *     * **proxy** [String] &mdash; the URL to proxy requests through\n *     * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform\n *       HTTP requests with. Used for connection pooling. Defaults to the global\n *       agent (`http.globalAgent`) for non-SSL connections. Note that for\n *       SSL connections, a special Agent object is used in order to enable\n *       peer certificate verification. This feature is only supported in the\n *       Node.js environment.\n *     * **timeout** [Integer] &mdash; The number of milliseconds to wait before\n *       giving up on a connection attempt. Defaults to no timeout.\n *     * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous\n *       HTTP requests. Used in the browser environment only. Set to false to\n *       send requests synchronously. Defaults to true (async on).\n * @!attribute logger\n *   @return [#write,#log] an object that responds to .write() (like a stream)\n *     or .log() (like the console object) in order to log information about\n *     requests\n *\n * @!attribute signatureVersion\n *   @return [String] the signature version to sign requests with (overriding\n *     the API configuration). Possible values are: 'v2', 'v3', 'v4'.\n */\nAWS.Config = AWS.util.inherit({\n\n  /**\n   * Creates a new configuration object. This is the object that passes\n   * option data along to service requests, including credentials, security,\n   * region information, and some service specific settings.\n   *\n   * @example Creating a new configuration object with credentials and region\n   *   var config = new AWS.Config({\n   *     accessKeyId: 'AKID', secretAccessKey: 'SECRET', region: 'us-west-2'\n   *   });\n   * @option options accessKeyId [String] your AWS access key ID.\n   * @option options secretAccessKey [String] your AWS secret access key.\n   * @option options sessionToken [AWS.Credentials] the optional AWS\n   *   session token to sign requests with.\n   * @option options credentials [AWS.Credentials] the AWS credentials\n   *   to sign requests with. You can either specify this object, or\n   *   specify the accessKeyId and secretAccessKey options directly.\n   * @option options credentialProvider [AWS.CredentialProviderChain] the\n   *   provider chain used to resolve credentials if no static `credentials`\n   *   property is set.\n   * @option options region [String] the region to send service requests to.\n   *   See {region} for more information.\n   * @option options maxRetries [Integer] the maximum amount of retries to\n   *   attempt with a request. See {maxRetries} for more information.\n   * @option options maxRedirects [Integer] the maximum amount of redirects to\n   *   follow with a request. See {maxRedirects} for more information.\n   * @option options sslEnabled [Boolean] whether to enable SSL for\n   *   requests.\n   * @option options paramValidation [Boolean] whether parameter validation\n   *   is on.\n   * @option options computeChecksums [Boolean] whether to compute checksums\n   *   for payload bodies when the service accepts it (currently supported\n   *   in S3 only)\n   * @option options convertResponseTypes [Boolean] whether types are converted\n   *     when parsing response data. Currently only supported for JSON based\n   *     services. Turning this off may improve performance on large response\n   *     payloads. Defaults to `true`.\n   * @option options s3ForcePathStyle [Boolean] whether to force path\n   *   style URLs for S3 objects.\n   * @option options httpOptions [map] A set of options to pass to the low-level\n   *   HTTP request. Currently supported options are:\n   *\n   *   * **proxy** [String] &mdash; the URL to proxy requests through\n   *   * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform\n   *     HTTP requests with. Used for connection pooling. Defaults to the global\n   *     agent (`http.globalAgent`) for non-SSL connections. Note that for\n   *     SSL connections, a special Agent object is used in order to enable\n   *     peer certificate verification. This feature is only available in the\n   *     Node.js environment.\n   *   * **timeout** [Integer] &mdash; Sets the socket to timeout after timeout\n   *     milliseconds of inactivity on the socket. Defaults to no timeout.\n   *   * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous\n   *     HTTP requests. Used in the browser environment only. Set to false to\n   *     send requests synchronously. Defaults to true (async on).\n   * @option options apiVersion [String, Date] a String in YYYY-MM-DD format\n   *   (or a date) that represents the latest possible API version that can be\n   *   used in all services (unless overridden by `apiVersions`). Specify\n   *   'latest' to use the latest possible version.\n   * @option options apiVersions [map<String, String|Date>] a map of service\n   *   identifiers (the lowercase service class name) with the API version to\n   *   use when instantiating a service. Specify 'latest' for each individual\n   *   that can use the latest available version.\n   * @option options logger [#write,#log] an object that responds to .write()\n   *   (like a stream) or .log() (like the console object) in order to log\n   *   information about requests\n   * @option options signatureVersion [String] the signature version to sign\n   *   requests with (overriding the API configuration). Possible values are:\n   *   'v2', 'v3', 'v4'.\n   */\n  constructor: function Config(options) {\n    if (options === undefined) options = {};\n    options = this.extractCredentials(options);\n\n    AWS.util.each.call(this, this.keys, function (key, value) {\n      this.set(key, options[key], value);\n    });\n  },\n\n  /**\n   * @overload update(options, allowUnknownKeys = false)\n   *   Updates the current configuration object with new options.\n   *\n   *   @example Update maxRetries property of a configuration object\n   *     config.update({maxRetries: 10});\n   *   @param [Object] options a map of option keys and values.\n   *   @param [Boolean] allowUnknownKeys whether unknown keys can be set on\n   *     the configuration object. Defaults to `false`.\n   *   @see constructor\n   */\n  update: function update(options, allowUnknownKeys) {\n    allowUnknownKeys = allowUnknownKeys || false;\n    options = this.extractCredentials(options);\n    AWS.util.each.call(this, options, function (key, value) {\n      if (allowUnknownKeys || this.keys.hasOwnProperty(key)) this[key] = value;\n    });\n  },\n\n  /**\n   * Loads credentials from the configuration object. This is used internally\n   * by the SDK to ensure that refreshable {Credentials} objects are properly\n   * refreshed and loaded when sending a request. If you want to ensure that\n   * your credentials are loaded prior to a request, you can use this method\n   * directly to provide accurate credential data stored in the object.\n   *\n   * @note If you configure the SDK with static or environment credentials,\n   *   the credential data should already be present in {credentials} attribute.\n   *   This method is primarily necessary to load credentials from asynchronous\n   *   sources, or sources that can refresh credentials periodically.\n   * @example Getting your access key\n   *   AWS.config.getCredentials(function(err) {\n   *     if (err) console.log(err.stack); // credentials not loaded\n   *     else console.log(\"Access Key:\", AWS.config.credentials.accessKeyId);\n   *   })\n   * @callback callback function(err)\n   *   Called when the {credentials} have been properly set on the configuration\n   *   object.\n   *\n   *   @param err [Error] if this is set, credentials were not successfuly\n   *     loaded and this error provides information why.\n   * @see credentials\n   * @see Credentials\n   */\n  getCredentials: function getCredentials(callback) {\n    var self = this;\n\n    function finish(err) {\n      callback(err, err ? null : self.credentials);\n    }\n\n    function credError(msg, err) {\n      return new AWS.util.error(err || new Error(), {\n        code: 'CredentialsError', message: msg\n      });\n    }\n\n    function getAsyncCredentials() {\n      self.credentials.get(function(err) {\n        if (err) {\n          var msg = 'Could not load credentials from ' +\n            self.credentials.constructor.name;\n          err = credError(msg, err);\n        }\n        finish(err);\n      });\n    }\n\n    function getStaticCredentials() {\n      var err = null;\n      if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {\n        err = credError('Missing credentials');\n      }\n      finish(err);\n    }\n\n    if (self.credentials) {\n      if (typeof self.credentials.get === 'function') {\n        getAsyncCredentials();\n      } else { // static credentials\n        getStaticCredentials();\n      }\n    } else if (self.credentialProvider) {\n      self.credentialProvider.resolve(function(err, creds) {\n        if (err) {\n          err = credError('Could not load credentials from any providers', err);\n        }\n        self.credentials = creds;\n        finish(err);\n      });\n    } else {\n      finish(credError('No credentials to load'));\n    }\n  },\n\n  /**\n   * Loads configuration data from a JSON file into this config object.\n   * @note Loading configuration will reset all existing configuration\n   *   on the object.\n   * @!macro nobrowser\n   * @param path [String] the path to load configuration from\n   * @return [AWS.Config] the same configuration object\n   */\n  loadFromPath: function loadFromPath(path) {\n    this.clear();\n\n    var options = JSON.parse(AWS.util.readFileSync(path));\n    var fileSystemCreds = new AWS.FileSystemCredentials(path);\n    var chain = new AWS.CredentialProviderChain();\n    chain.providers.unshift(fileSystemCreds);\n    chain.resolve(function (err, creds) {\n      if (err) throw err;\n      else options.credentials = creds;\n    });\n\n    this.constructor(options);\n\n    return this;\n  },\n\n  /**\n   * Clears configuration data on this object\n   *\n   * @api private\n   */\n  clear: function clear() {\n    /*jshint forin:false */\n    AWS.util.each.call(this, this.keys, function (key) {\n      delete this[key];\n    });\n\n    // reset credential provider\n    this.set('credentials', undefined);\n    this.set('credentialProvider', undefined);\n  },\n\n  /**\n   * Sets a property on the configuration object, allowing for a\n   * default value\n   * @api private\n   */\n  set: function set(property, value, defaultValue) {\n    if (value === undefined) {\n      if (defaultValue === undefined) {\n        defaultValue = this.keys[property];\n      }\n      if (typeof defaultValue === 'function') {\n        this[property] = defaultValue.call(this);\n      } else {\n        this[property] = defaultValue;\n      }\n    } else {\n      this[property] = value;\n    }\n  },\n\n  /**\n   * All of the keys with their default values.\n   *\n   * @constant\n   * @api private\n   */\n  keys: {\n    credentials: null,\n    credentialProvider: null,\n    region: null,\n    logger: null,\n    apiVersions: {},\n    apiVersion: null,\n    endpoint: undefined,\n    httpOptions: {},\n    maxRetries: undefined,\n    maxRedirects: 10,\n    paramValidation: true,\n    sslEnabled: true,\n    s3ForcePathStyle: false,\n    computeChecksums: true,\n    convertResponseTypes: true,\n    dynamoDbCrc32: true,\n    signatureVersion: null\n  },\n\n  /**\n   * Extracts accessKeyId, secretAccessKey and sessionToken\n   * from a configuration hash.\n   *\n   * @api private\n   */\n  extractCredentials: function extractCredentials(options) {\n    if (options.accessKeyId && options.secretAccessKey) {\n      options = AWS.util.copy(options);\n      options.credentials = new AWS.Credentials(options);\n    }\n    return options;\n  }\n});\n\n/**\n * @return [AWS.Config] The global configuration object singleton instance\n * @readonly\n * @see AWS.Config\n */\nAWS.config = new AWS.Config();\n"]},"metadata":{},"sourceType":"script"}
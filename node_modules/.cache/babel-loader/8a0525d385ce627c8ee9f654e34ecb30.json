{"ast":null,"code":"var AWS = require('../core');\n\nvar util = require('../util');\n\nvar QueryParamSerializer = require('../query/query_param_serializer');\n\nvar Shape = require('../model/shape');\n\nfunction buildRequest(req) {\n  var operation = req.service.api.operations[req.operation];\n  var httpRequest = req.httpRequest;\n  httpRequest.headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';\n  httpRequest.params = {\n    Version: req.service.api.apiVersion,\n    Action: operation.name\n  }; // convert the request parameters into a list of query params,\n  // e.g. Deeply.NestedParam.0.Name=value\n\n  var builder = new QueryParamSerializer();\n  builder.serialize(req.params, operation.input, function (name, value) {\n    httpRequest.params[name] = value;\n  });\n  httpRequest.body = util.queryParamsToString(httpRequest.params);\n}\n\nfunction extractError(resp) {\n  var data,\n      body = resp.httpResponse.body.toString();\n\n  if (body.match('<UnknownOperationException')) {\n    data = {\n      Code: 'UnknownOperation',\n      Message: 'Unknown operation ' + resp.request.operation\n    };\n  } else {\n    data = new AWS.XML.Parser().parse(body);\n  }\n\n  if (data.Errors) data = data.Errors;\n  if (data.Error) data = data.Error;\n\n  if (data.Code) {\n    resp.error = util.error(new Error(), {\n      code: data.Code,\n      message: data.Message\n    });\n  } else {\n    resp.error = util.error(new Error(), {\n      code: resp.httpResponse.statusCode,\n      message: null\n    });\n  }\n}\n\nfunction extractData(resp) {\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var shape = operation.output || {};\n  var origRules = shape;\n\n  if (origRules.resultWrapper) {\n    var tmp = Shape.create({\n      type: 'structure'\n    });\n    tmp.members[origRules.resultWrapper] = shape;\n    tmp.memberNames = [origRules.resultWrapper];\n    util.property(shape, 'name', shape.resultWrapper);\n    shape = tmp;\n  }\n\n  var parser = new AWS.XML.Parser();\n  var data = parser.parse(resp.httpResponse.body.toString(), shape);\n\n  if (origRules.resultWrapper) {\n    if (data[origRules.resultWrapper]) {\n      util.update(data, data[origRules.resultWrapper]);\n      delete data[origRules.resultWrapper];\n    }\n  }\n\n  resp.data = data;\n}\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/protocol/query.js"],"names":["AWS","require","util","QueryParamSerializer","Shape","buildRequest","req","operation","service","api","operations","httpRequest","headers","params","Version","apiVersion","Action","name","builder","serialize","input","value","body","queryParamsToString","extractError","resp","data","httpResponse","toString","match","Code","Message","request","XML","Parser","parse","Errors","Error","error","code","message","statusCode","extractData","shape","output","origRules","resultWrapper","tmp","create","type","members","memberNames","property","parser","update","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('../core');\nvar util = require('../util');\nvar QueryParamSerializer = require('../query/query_param_serializer');\nvar Shape = require('../model/shape');\n\nfunction buildRequest(req) {\n  var operation = req.service.api.operations[req.operation];\n  var httpRequest = req.httpRequest;\n  httpRequest.headers['Content-Type'] =\n    'application/x-www-form-urlencoded; charset=utf-8';\n  httpRequest.params = {\n    Version: req.service.api.apiVersion,\n    Action: operation.name\n  };\n\n  // convert the request parameters into a list of query params,\n  // e.g. Deeply.NestedParam.0.Name=value\n  var builder = new QueryParamSerializer();\n  builder.serialize(req.params, operation.input, function(name, value) {\n    httpRequest.params[name] = value;\n  });\n  httpRequest.body = util.queryParamsToString(httpRequest.params);\n}\n\nfunction extractError(resp) {\n  var data, body = resp.httpResponse.body.toString();\n  if (body.match('<UnknownOperationException')) {\n    data = {\n      Code: 'UnknownOperation',\n      Message: 'Unknown operation ' + resp.request.operation\n    };\n  } else {\n    data = new AWS.XML.Parser().parse(body);\n  }\n\n  if (data.Errors) data = data.Errors;\n  if (data.Error) data = data.Error;\n  if (data.Code) {\n    resp.error = util.error(new Error(), {\n      code: data.Code,\n      message: data.Message\n    });\n  } else {\n    resp.error = util.error(new Error(), {\n      code: resp.httpResponse.statusCode,\n      message: null\n    });\n  }\n}\n\nfunction extractData(resp) {\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var shape = operation.output || {};\n  var origRules = shape;\n\n  if (origRules.resultWrapper) {\n    var tmp = Shape.create({type: 'structure'});\n    tmp.members[origRules.resultWrapper] = shape;\n    tmp.memberNames = [origRules.resultWrapper];\n    util.property(shape, 'name', shape.resultWrapper);\n    shape = tmp;\n  }\n\n  var parser = new AWS.XML.Parser();\n  var data = parser.parse(resp.httpResponse.body.toString(), shape);\n\n  if (origRules.resultWrapper) {\n    if (data[origRules.resultWrapper]) {\n      util.update(data, data[origRules.resultWrapper]);\n      delete data[origRules.resultWrapper];\n    }\n  }\n\n  resp.data = data;\n}\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"]},"metadata":{},"sourceType":"script"}
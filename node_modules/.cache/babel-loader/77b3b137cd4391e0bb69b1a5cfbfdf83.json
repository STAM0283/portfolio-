{"ast":null,"code":"var AWS = require('../core');\n/**\n * Represents temporary credentials retrieved from {AWS.STS}. Without any\n * extra parameters, credentials will be fetched from the\n * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\n * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\n * role instead.\n *\n * To setup temporary credentials, configure a set of master credentials\n * using the standard credentials providers (environment, EC2 instance metadata,\n * or from the filesystem), then set the global credentials to a new\n * temporary credentials object:\n *\n * ```javascript\n * // Note that environment credentials are loaded by default,\n * // the following line is shown for clarity:\n * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');\n *\n * // Now set temporary credentials seeded from the master credentials\n * AWS.config.credentials = new AWS.TemporaryCredentials();\n *\n * // subsequent requests will now use temporary credentials from AWS STS.\n * new AWS.S3().listBucket(function(err, data) { ... });\n * ```\n *\n * @!attribute masterCredentials\n *   @return [AWS.Credentials] the master (non-temporary) credentials used to\n *     get and refresh temporary credentials from AWS STS.\n * @note (see constructor)\n */\n\n\nAWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new temporary credentials object.\n   *\n   * @note In order to create temporary credentials, you first need to have\n   *   \"master\" credentials configured in {AWS.Config.credentials}. These\n   *   master credentials are necessary to retrieve the temporary credentials,\n   *   as well as refresh the credentials when they expire.\n   * @param params [map] a map of options that are passed to the\n   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\n   *   If a `RoleArn` parameter is passed in, credentials will be based on the\n   *   IAM role.\n   * @example Creating a new credenials object for generic temporary credentials\n   *   AWS.config.credentials = new AWS.TemporaryCredentials();\n   * @example Creating a new credentials object for an IAM role\n   *   AWS.config.credentials = new AWS.TemporaryCredentials({\n   *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',\n   *   });\n   * @see AWS.STS.assumeRole\n   * @see AWS.STS.getSessionToken\n   */\n  constructor: function TemporaryCredentials(params) {\n    AWS.Credentials.call(this);\n    this.loadMasterCredentials();\n    this.service = new AWS.STS();\n    this.expired = true;\n    this.params = params || {};\n\n    if (this.params.RoleArn) {\n      this.params.RoleSessionName = this.params.RoleSessionName || 'temporary-credentials';\n    }\n  },\n\n  /**\n   * Refreshes credentials using {AWS.STS.assumeRole} or\n   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\n   * to the credentials {constructor}.\n   *\n   * @callback callback function(err)\n   *   Called when the STS service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    var self = this;\n    if (!callback) callback = function (err) {\n      if (err) throw err;\n    };\n    self.service.config.credentials = self.masterCredentials;\n    var operation = self.params.RoleArn ? self.service.assumeRole : self.service.getSessionToken;\n    operation.call(self.service, self.params, function (err, data) {\n      if (!err) {\n        self.service.credentialsFrom(data, self);\n      }\n\n      callback(err);\n    });\n  },\n\n  /**\n   * @api private\n   */\n  loadMasterCredentials: function loadMasterCredentials() {\n    this.masterCredentials = AWS.config.credentials;\n\n    while (this.masterCredentials.masterCredentials) {\n      this.masterCredentials = this.masterCredentials.masterCredentials;\n    }\n  }\n});","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/credentials/temporary_credentials.js"],"names":["AWS","require","TemporaryCredentials","util","inherit","Credentials","constructor","params","call","loadMasterCredentials","service","STS","expired","RoleArn","RoleSessionName","refresh","callback","self","err","config","credentials","masterCredentials","operation","assumeRole","getSessionToken","data","credentialsFrom"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BAD,GAAG,CAACE,oBAAJ,GAA2BF,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBJ,GAAG,CAACK,WAArB,EAAkC;AAC3D;;;;;;;;;;;;;;;;;;;;AAoBAC,EAAAA,WAAW,EAAE,SAASJ,oBAAT,CAA8BK,MAA9B,EAAsC;AACjDP,IAAAA,GAAG,CAACK,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB;AACA,SAAKC,qBAAL;AACA,SAAKC,OAAL,GAAe,IAAIV,GAAG,CAACW,GAAR,EAAf;AACA,SAAKC,OAAL,GAAe,IAAf;AAEA,SAAKL,MAAL,GAAcA,MAAM,IAAI,EAAxB;;AACA,QAAI,KAAKA,MAAL,CAAYM,OAAhB,EAAyB;AACvB,WAAKN,MAAL,CAAYO,eAAZ,GACE,KAAKP,MAAL,CAAYO,eAAZ,IAA+B,uBADjC;AAED;AACF,GAhC0D;;AAkC3D;;;;;;;;;;;;;AAaAC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,QAAIC,IAAI,GAAG,IAAX;AACA,QAAI,CAACD,QAAL,EAAeA,QAAQ,GAAG,UAASE,GAAT,EAAc;AAAE,UAAIA,GAAJ,EAAS,MAAMA,GAAN;AAAY,KAAhD;AAEfD,IAAAA,IAAI,CAACP,OAAL,CAAaS,MAAb,CAAoBC,WAApB,GAAkCH,IAAI,CAACI,iBAAvC;AACA,QAAIC,SAAS,GAAGL,IAAI,CAACV,MAAL,CAAYM,OAAZ,GACdI,IAAI,CAACP,OAAL,CAAaa,UADC,GACYN,IAAI,CAACP,OAAL,CAAac,eADzC;AAEAF,IAAAA,SAAS,CAACd,IAAV,CAAeS,IAAI,CAACP,OAApB,EAA6BO,IAAI,CAACV,MAAlC,EAA0C,UAAUW,GAAV,EAAeO,IAAf,EAAqB;AAC7D,UAAI,CAACP,GAAL,EAAU;AACRD,QAAAA,IAAI,CAACP,OAAL,CAAagB,eAAb,CAA6BD,IAA7B,EAAmCR,IAAnC;AACD;;AACDD,MAAAA,QAAQ,CAACE,GAAD,CAAR;AACD,KALD;AAMD,GA5D0D;;AA8D3D;;;AAGAT,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,GAAiC;AACtD,SAAKY,iBAAL,GAAyBrB,GAAG,CAACmB,MAAJ,CAAWC,WAApC;;AACA,WAAO,KAAKC,iBAAL,CAAuBA,iBAA9B,EAAiD;AAC/C,WAAKA,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBA,iBAAhD;AACD;AACF;AAtE0D,CAAlC,CAA3B","sourcesContent":["var AWS = require('../core');\n\n/**\n * Represents temporary credentials retrieved from {AWS.STS}. Without any\n * extra parameters, credentials will be fetched from the\n * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\n * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\n * role instead.\n *\n * To setup temporary credentials, configure a set of master credentials\n * using the standard credentials providers (environment, EC2 instance metadata,\n * or from the filesystem), then set the global credentials to a new\n * temporary credentials object:\n *\n * ```javascript\n * // Note that environment credentials are loaded by default,\n * // the following line is shown for clarity:\n * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');\n *\n * // Now set temporary credentials seeded from the master credentials\n * AWS.config.credentials = new AWS.TemporaryCredentials();\n *\n * // subsequent requests will now use temporary credentials from AWS STS.\n * new AWS.S3().listBucket(function(err, data) { ... });\n * ```\n *\n * @!attribute masterCredentials\n *   @return [AWS.Credentials] the master (non-temporary) credentials used to\n *     get and refresh temporary credentials from AWS STS.\n * @note (see constructor)\n */\nAWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new temporary credentials object.\n   *\n   * @note In order to create temporary credentials, you first need to have\n   *   \"master\" credentials configured in {AWS.Config.credentials}. These\n   *   master credentials are necessary to retrieve the temporary credentials,\n   *   as well as refresh the credentials when they expire.\n   * @param params [map] a map of options that are passed to the\n   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\n   *   If a `RoleArn` parameter is passed in, credentials will be based on the\n   *   IAM role.\n   * @example Creating a new credenials object for generic temporary credentials\n   *   AWS.config.credentials = new AWS.TemporaryCredentials();\n   * @example Creating a new credentials object for an IAM role\n   *   AWS.config.credentials = new AWS.TemporaryCredentials({\n   *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',\n   *   });\n   * @see AWS.STS.assumeRole\n   * @see AWS.STS.getSessionToken\n   */\n  constructor: function TemporaryCredentials(params) {\n    AWS.Credentials.call(this);\n    this.loadMasterCredentials();\n    this.service = new AWS.STS();\n    this.expired = true;\n\n    this.params = params || {};\n    if (this.params.RoleArn) {\n      this.params.RoleSessionName =\n        this.params.RoleSessionName || 'temporary-credentials';\n    }\n  },\n\n  /**\n   * Refreshes credentials using {AWS.STS.assumeRole} or\n   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\n   * to the credentials {constructor}.\n   *\n   * @callback callback function(err)\n   *   Called when the STS service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    var self = this;\n    if (!callback) callback = function(err) { if (err) throw err; };\n\n    self.service.config.credentials = self.masterCredentials;\n    var operation = self.params.RoleArn ?\n      self.service.assumeRole : self.service.getSessionToken;\n    operation.call(self.service, self.params, function (err, data) {\n      if (!err) {\n        self.service.credentialsFrom(data, self);\n      }\n      callback(err);\n    });\n  },\n\n  /**\n   * @api private\n   */\n  loadMasterCredentials: function loadMasterCredentials() {\n    this.masterCredentials = AWS.config.credentials;\n    while (this.masterCredentials.masterCredentials) {\n      this.masterCredentials = this.masterCredentials.masterCredentials;\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}
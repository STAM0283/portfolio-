{"ast":null,"code":"var AWS = require('./core');\n\nrequire('./http');\n\nvar inherit = AWS.util.inherit;\n/**\n * Represents a metadata service available on EC2 instances. Using the\n * {request} method, you can receieve metadata about any available resource\n * on the metadata service.\n *\n * @!attribute [r] httpOptions\n *   @return [map] a map of options to pass to the underlying HTTP request\n * @!macro nobrowser\n */\n\nAWS.MetadataService = inherit({\n  /**\n   * @return [String] the hostname of the instance metadata service\n   */\n  host: '169.254.169.254',\n\n  /**\n   * @!ignore\n   */\n\n  /**\n   * Options\n   */\n  httpOptions: {\n    timeout: 1000\n  },\n\n  /**\n   * Creates a new MetadataService object with a given set of options.\n   *\n   * @option options host [String] the hostname of the instance metadata\n   *   service\n   * @option options httpOptions [map] a map of options to pass to the\n   *   underlying HTTP request\n   */\n  constructor: function MetadataService(options) {\n    AWS.util.update(this, options);\n  },\n\n  /**\n   * Sends a request to the instance metadata service for a given resource.\n   *\n   * @param path [String] the path of the resource to get\n   * @callback callback function(err, data)\n   *   Called when a response is available from the service.\n   *   @param err [Error, null] if an error occurred, this value will be set\n   *   @param data [String, null] if the request was successful, the body of\n   *     the response\n   */\n  request: function request(path, callback) {\n    path = path || '/';\n    var data = '';\n    var http = AWS.HttpClient.getInstance();\n    var httpRequest = new AWS.HttpRequest('http://' + this.host + path);\n    httpRequest.method = 'GET';\n    http.handleRequest(httpRequest, this.httpOptions, function (httpResponse) {\n      httpResponse.on('data', function (chunk) {\n        data += chunk.toString();\n      });\n      httpResponse.on('end', function () {\n        callback(null, data);\n      });\n    }, callback);\n  },\n\n  /**\n   * Loads a set of credentials stored in the instance metadata service\n   *\n   * @api private\n   * @callback callback function(err, credentials)\n   *   Called when credentials are loaded from the resource\n   *   @param err [Error] if an error occurred, this value will be set\n   *   @param credentials [Object] the raw JSON object containing all\n   *     metadata from the credentials resource\n   */\n  loadCredentials: function loadCredentials(callback) {\n    var self = this;\n    var basePath = '/latest/meta-data/iam/security-credentials/';\n    self.request(basePath, function (err, roleName) {\n      if (err) callback(err);else {\n        roleName = roleName.split('\\n')[0]; // grab first (and only) role\n\n        self.request(basePath + roleName, function (credErr, credData) {\n          if (credErr) callback(credErr);else {\n            try {\n              var credentials = JSON.parse(credData);\n              callback(null, credentials);\n            } catch (parseError) {\n              callback(parseError);\n            }\n          }\n        });\n      }\n    });\n  }\n});\nmodule.exports = AWS.MetadataService;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/metadata_service.js"],"names":["AWS","require","inherit","util","MetadataService","host","httpOptions","timeout","constructor","options","update","request","path","callback","data","http","HttpClient","getInstance","httpRequest","HttpRequest","method","handleRequest","httpResponse","on","chunk","toString","loadCredentials","self","basePath","err","roleName","split","credErr","credData","credentials","JSON","parse","parseError","module","exports"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACAA,OAAO,CAAC,QAAD,CAAP;;AACA,IAAIC,OAAO,GAAGF,GAAG,CAACG,IAAJ,CAASD,OAAvB;AAEA;;;;;;;;;;AASAF,GAAG,CAACI,eAAJ,GAAsBF,OAAO,CAAC;AAC5B;;;AAGAG,EAAAA,IAAI,EAAE,iBAJsB;;AAM5B;;;;AAIA;;;AAGAC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAbe;;AAe5B;;;;;;;;AAQAC,EAAAA,WAAW,EAAE,SAASJ,eAAT,CAAyBK,OAAzB,EAAkC;AAC7CT,IAAAA,GAAG,CAACG,IAAJ,CAASO,MAAT,CAAgB,IAAhB,EAAsBD,OAAtB;AACD,GAzB2B;;AA2B5B;;;;;;;;;;AAUAE,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,IAAjB,EAAuBC,QAAvB,EAAiC;AACxCD,IAAAA,IAAI,GAAGA,IAAI,IAAI,GAAf;AAEA,QAAIE,IAAI,GAAG,EAAX;AACA,QAAIC,IAAI,GAAGf,GAAG,CAACgB,UAAJ,CAAeC,WAAf,EAAX;AACA,QAAIC,WAAW,GAAG,IAAIlB,GAAG,CAACmB,WAAR,CAAoB,YAAY,KAAKd,IAAjB,GAAwBO,IAA5C,CAAlB;AACAM,IAAAA,WAAW,CAACE,MAAZ,GAAqB,KAArB;AAEAL,IAAAA,IAAI,CAACM,aAAL,CAAmBH,WAAnB,EAAgC,KAAKZ,WAArC,EAAkD,UAASgB,YAAT,EAAuB;AACvEA,MAAAA,YAAY,CAACC,EAAb,CAAgB,MAAhB,EAAwB,UAASC,KAAT,EAAgB;AAAEV,QAAAA,IAAI,IAAIU,KAAK,CAACC,QAAN,EAAR;AAA2B,OAArE;AACAH,MAAAA,YAAY,CAACC,EAAb,CAAgB,KAAhB,EAAuB,YAAW;AAAEV,QAAAA,QAAQ,CAAC,IAAD,EAAOC,IAAP,CAAR;AAAuB,OAA3D;AACD,KAHD,EAGGD,QAHH;AAID,GAjD2B;;AAmD5B;;;;;;;;;;AAUAa,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBb,QAAzB,EAAmC;AAClD,QAAIc,IAAI,GAAG,IAAX;AACA,QAAIC,QAAQ,GAAG,6CAAf;AACAD,IAAAA,IAAI,CAAChB,OAAL,CAAaiB,QAAb,EAAuB,UAAUC,GAAV,EAAeC,QAAf,EAAyB;AAC9C,UAAID,GAAJ,EAAShB,QAAQ,CAACgB,GAAD,CAAR,CAAT,KACK;AACHC,QAAAA,QAAQ,GAAGA,QAAQ,CAACC,KAAT,CAAe,IAAf,EAAqB,CAArB,CAAX,CADG,CACiC;;AACpCJ,QAAAA,IAAI,CAAChB,OAAL,CAAaiB,QAAQ,GAAGE,QAAxB,EAAkC,UAAUE,OAAV,EAAmBC,QAAnB,EAA6B;AAC7D,cAAID,OAAJ,EAAanB,QAAQ,CAACmB,OAAD,CAAR,CAAb,KACK;AACH,gBAAI;AACF,kBAAIE,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAlB;AACApB,cAAAA,QAAQ,CAAC,IAAD,EAAOqB,WAAP,CAAR;AACD,aAHD,CAGE,OAAOG,UAAP,EAAmB;AACnBxB,cAAAA,QAAQ,CAACwB,UAAD,CAAR;AACD;AACF;AACF,SAVD;AAWD;AACF,KAhBD;AAiBD;AAjF2B,CAAD,CAA7B;AAoFAC,MAAM,CAACC,OAAP,GAAiBvC,GAAG,CAACI,eAArB","sourcesContent":["var AWS = require('./core');\nrequire('./http');\nvar inherit = AWS.util.inherit;\n\n/**\n * Represents a metadata service available on EC2 instances. Using the\n * {request} method, you can receieve metadata about any available resource\n * on the metadata service.\n *\n * @!attribute [r] httpOptions\n *   @return [map] a map of options to pass to the underlying HTTP request\n * @!macro nobrowser\n */\nAWS.MetadataService = inherit({\n  /**\n   * @return [String] the hostname of the instance metadata service\n   */\n  host: '169.254.169.254',\n\n  /**\n   * @!ignore\n   */\n\n  /**\n   * Options\n   */\n  httpOptions: { timeout: 1000 },\n\n  /**\n   * Creates a new MetadataService object with a given set of options.\n   *\n   * @option options host [String] the hostname of the instance metadata\n   *   service\n   * @option options httpOptions [map] a map of options to pass to the\n   *   underlying HTTP request\n   */\n  constructor: function MetadataService(options) {\n    AWS.util.update(this, options);\n  },\n\n  /**\n   * Sends a request to the instance metadata service for a given resource.\n   *\n   * @param path [String] the path of the resource to get\n   * @callback callback function(err, data)\n   *   Called when a response is available from the service.\n   *   @param err [Error, null] if an error occurred, this value will be set\n   *   @param data [String, null] if the request was successful, the body of\n   *     the response\n   */\n  request: function request(path, callback) {\n    path = path || '/';\n\n    var data = '';\n    var http = AWS.HttpClient.getInstance();\n    var httpRequest = new AWS.HttpRequest('http://' + this.host + path);\n    httpRequest.method = 'GET';\n\n    http.handleRequest(httpRequest, this.httpOptions, function(httpResponse) {\n      httpResponse.on('data', function(chunk) { data += chunk.toString(); });\n      httpResponse.on('end', function() { callback(null, data); });\n    }, callback);\n  },\n\n  /**\n   * Loads a set of credentials stored in the instance metadata service\n   *\n   * @api private\n   * @callback callback function(err, credentials)\n   *   Called when credentials are loaded from the resource\n   *   @param err [Error] if an error occurred, this value will be set\n   *   @param credentials [Object] the raw JSON object containing all\n   *     metadata from the credentials resource\n   */\n  loadCredentials: function loadCredentials(callback) {\n    var self = this;\n    var basePath = '/latest/meta-data/iam/security-credentials/';\n    self.request(basePath, function (err, roleName) {\n      if (err) callback(err);\n      else {\n        roleName = roleName.split('\\n')[0]; // grab first (and only) role\n        self.request(basePath + roleName, function (credErr, credData) {\n          if (credErr) callback(credErr);\n          else {\n            try {\n              var credentials = JSON.parse(credData);\n              callback(null, credentials);\n            } catch (parseError) {\n              callback(parseError);\n            }\n          }\n        });\n      }\n    });\n  }\n});\n\nmodule.exports = AWS.MetadataService;\n"]},"metadata":{},"sourceType":"script"}
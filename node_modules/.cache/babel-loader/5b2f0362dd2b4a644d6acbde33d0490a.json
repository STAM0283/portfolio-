{"ast":null,"code":"var ignore = 'ignore',\n    missing = 'missing',\n    only = 'only';\n/**\n * Includes a template partial in place. The template is rendered within the current locals variable context.\n *\n * @alias include\n *\n * @example\n * // food = 'burritos';\n * // drink = 'lemonade';\n * {% include \"./partial.html\" %}\n * // => I like burritos and lemonade.\n *\n * @example\n * // my_obj = { food: 'tacos', drink: 'horchata' };\n * {% include \"./partial.html\" with my_obj only %}\n * // => I like tacos and horchata.\n *\n * @example\n * {% include \"/this/file/does/not/exist\" ignore missing %}\n * // => (Nothing! empty string)\n *\n * @param {string|var}  file      The path, relative to the template root, to render into the current context.\n * @param {literal}     [with]    Literally, \"with\".\n * @param {object}      [context] Local variable key-value object context to provide to the included file.\n * @param {literal}     [only]    Restricts to <strong>only</strong> passing the <code>with context</code> as local variables–the included template will not be aware of any other local variables in the parent template. For best performance, usage of this option is recommended if possible.\n * @param {literal}     [ignore missing] Will output empty string if not found instead of throwing an error.\n */\n\nexports.compile = function (compiler, args) {\n  var file = args.shift(),\n      onlyIdx = args.indexOf(only),\n      onlyCtx = onlyIdx !== -1 ? args.splice(onlyIdx, 1) : false,\n      parentFile = (args.pop() || '').replace(/\\\\/g, '\\\\\\\\'),\n      ignore = args[args.length - 1] === missing ? args.pop() : false,\n      w = args.join('');\n  return (ignore ? '  try {\\n' : '') + '_output += _swig.compileFile(' + file + ', {' + 'resolveFrom: \"' + parentFile + '\"' + '})(' + (onlyCtx && w ? w : !w ? '_ctx' : '_utils.extend({}, _ctx, ' + w + ')') + ');\\n' + (ignore ? '} catch (e) {}\\n' : '');\n};\n\nexports.parse = function (str, line, parser, types, stack, opts) {\n  var file, w;\n  parser.on(types.STRING, function (token) {\n    if (!file) {\n      file = token.match;\n      this.out.push(file);\n      return;\n    }\n\n    return true;\n  });\n  parser.on(types.VAR, function (token) {\n    if (!file) {\n      file = token.match;\n      return true;\n    }\n\n    if (!w && token.match === 'with') {\n      w = true;\n      return;\n    }\n\n    if (w && token.match === only && this.prevToken.match !== 'with') {\n      this.out.push(token.match);\n      return;\n    }\n\n    if (token.match === ignore) {\n      return false;\n    }\n\n    if (token.match === missing) {\n      if (this.prevToken.match !== ignore) {\n        throw new Error('Unexpected token \"' + missing + '\" on line ' + line + '.');\n      }\n\n      this.out.push(token.match);\n      return false;\n    }\n\n    if (this.prevToken.match === ignore) {\n      throw new Error('Expected \"' + missing + '\" on line ' + line + ' but found \"' + token.match + '\".');\n    }\n\n    return true;\n  });\n  parser.on('end', function () {\n    this.out.push(opts.filename || null);\n  });\n  return true;\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/swig/lib/tags/include.js"],"names":["ignore","missing","only","exports","compile","compiler","args","file","shift","onlyIdx","indexOf","onlyCtx","splice","parentFile","pop","replace","length","w","join","parse","str","line","parser","types","stack","opts","on","STRING","token","match","out","push","VAR","prevToken","Error","filename"],"mappings":"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","sourcesContent":["var ignore = 'ignore',\n  missing = 'missing',\n  only = 'only';\n\n/**\n * Includes a template partial in place. The template is rendered within the current locals variable context.\n *\n * @alias include\n *\n * @example\n * // food = 'burritos';\n * // drink = 'lemonade';\n * {% include \"./partial.html\" %}\n * // => I like burritos and lemonade.\n *\n * @example\n * // my_obj = { food: 'tacos', drink: 'horchata' };\n * {% include \"./partial.html\" with my_obj only %}\n * // => I like tacos and horchata.\n *\n * @example\n * {% include \"/this/file/does/not/exist\" ignore missing %}\n * // => (Nothing! empty string)\n *\n * @param {string|var}  file      The path, relative to the template root, to render into the current context.\n * @param {literal}     [with]    Literally, \"with\".\n * @param {object}      [context] Local variable key-value object context to provide to the included file.\n * @param {literal}     [only]    Restricts to <strong>only</strong> passing the <code>with context</code> as local variables–the included template will not be aware of any other local variables in the parent template. For best performance, usage of this option is recommended if possible.\n * @param {literal}     [ignore missing] Will output empty string if not found instead of throwing an error.\n */\nexports.compile = function (compiler, args) {\n  var file = args.shift(),\n    onlyIdx = args.indexOf(only),\n    onlyCtx = onlyIdx !== -1 ? args.splice(onlyIdx, 1) : false,\n    parentFile = (args.pop() || '').replace(/\\\\/g, '\\\\\\\\'),\n    ignore = args[args.length - 1] === missing ? (args.pop()) : false,\n    w = args.join('');\n\n  return (ignore ? '  try {\\n' : '') +\n    '_output += _swig.compileFile(' + file + ', {' +\n    'resolveFrom: \"' + parentFile + '\"' +\n    '})(' +\n    ((onlyCtx && w) ? w : (!w ? '_ctx' : '_utils.extend({}, _ctx, ' + w + ')')) +\n    ');\\n' +\n    (ignore ? '} catch (e) {}\\n' : '');\n};\n\nexports.parse = function (str, line, parser, types, stack, opts) {\n  var file, w;\n  parser.on(types.STRING, function (token) {\n    if (!file) {\n      file = token.match;\n      this.out.push(file);\n      return;\n    }\n\n    return true;\n  });\n\n  parser.on(types.VAR, function (token) {\n    if (!file) {\n      file = token.match;\n      return true;\n    }\n\n    if (!w && token.match === 'with') {\n      w = true;\n      return;\n    }\n\n    if (w && token.match === only && this.prevToken.match !== 'with') {\n      this.out.push(token.match);\n      return;\n    }\n\n    if (token.match === ignore) {\n      return false;\n    }\n\n    if (token.match === missing) {\n      if (this.prevToken.match !== ignore) {\n        throw new Error('Unexpected token \"' + missing + '\" on line ' + line + '.');\n      }\n      this.out.push(token.match);\n      return false;\n    }\n\n    if (this.prevToken.match === ignore) {\n      throw new Error('Expected \"' + missing + '\" on line ' + line + ' but found \"' + token.match + '\".');\n    }\n\n    return true;\n  });\n\n  parser.on('end', function () {\n    this.out.push(opts.filename || null);\n  });\n\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}
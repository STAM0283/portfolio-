{"ast":null,"code":"/**\n * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You\n * may not use this file except in compliance with the License. A copy of\n * the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\nvar AWS = require('./core');\n\nvar inherit = AWS.util.inherit;\n/**\n * @api private\n */\n\nAWS.ResourceWaiter = inherit({\n  /**\n   * Waits for a given state on a service object\n   * @param service [Service] the service object to wait on\n   * @param state [String] the state (defined in waiter configuration) to wait\n   *   for.\n   * @example Create a waiter for running EC2 instances\n   *   var ec2 = new AWS.EC2;\n   *   var waiter = new AWS.ResourceWaiter(ec2, 'instanceRunning');\n   */\n  constructor: function constructor(service, state) {\n    this.service = service;\n    this.state = state;\n\n    if (typeof this.state === 'object') {\n      AWS.util.each.call(this, this.state, function (key, value) {\n        this.state = key;\n        this.expectedValue = value;\n      });\n    }\n\n    this.loadWaiterConfig(this.state);\n\n    if (!this.expectedValue) {\n      this.expectedValue = this.config.successValue;\n    }\n  },\n  service: null,\n  state: null,\n  expectedValue: null,\n  config: null,\n  waitDone: false,\n  Listeners: {\n    retry: new AWS.SequentialExecutor().addNamedListeners(function (add) {\n      add('RETRY_CHECK', 'retry', function (resp) {\n        var waiter = resp.request._waiter;\n\n        if (resp.error && resp.error.code === 'ResourceNotReady') {\n          resp.error.retryDelay = waiter.config.interval * 1000;\n        }\n      });\n    }),\n    output: new AWS.SequentialExecutor().addNamedListeners(function (add) {\n      add('CHECK_OUT_ERROR', 'extractError', function CHECK_OUT_ERROR(resp) {\n        if (resp.error) {\n          resp.request._waiter.setError(resp, true);\n        }\n      });\n      add('CHECK_OUTPUT', 'extractData', function CHECK_OUTPUT(resp) {\n        var waiter = resp.request._waiter;\n        var success = waiter.checkSuccess(resp);\n\n        if (!success) {\n          waiter.setError(resp, success === null ? false : true);\n        } else {\n          resp.error = null;\n        }\n      });\n    }),\n    error: new AWS.SequentialExecutor().addNamedListeners(function (add) {\n      add('CHECK_ERROR', 'extractError', function CHECK_ERROR(resp) {\n        var waiter = resp.request._waiter;\n        var success = waiter.checkError(resp);\n\n        if (!success) {\n          waiter.setError(resp, success === null ? false : true);\n        } else {\n          resp.error = null;\n          resp.request.removeAllListeners('extractData');\n        }\n      });\n      add('CHECK_ERR_OUTPUT', 'extractData', function CHECK_ERR_OUTPUT(resp) {\n        resp.request._waiter.setError(resp, true);\n      });\n    })\n  },\n\n  /**\n   * @return [AWS.Request]\n   */\n  wait: function wait(params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = undefined;\n    }\n\n    var request = this.service.makeRequest(this.config.operation, params);\n    var listeners = this.Listeners[this.config.successType];\n    request._waiter = this;\n    request.response.maxRetries = this.config.maxAttempts;\n    request.addListeners(this.Listeners.retry);\n    if (listeners) request.addListeners(listeners);\n    if (callback) request.send(callback);\n    return request;\n  },\n  setError: function setError(resp, retryable) {\n    resp.data = null;\n    resp.error = AWS.util.error(resp.error || new Error(), {\n      code: 'ResourceNotReady',\n      message: 'Resource is not in the state ' + this.state,\n      retryable: retryable\n    });\n  },\n\n  /**\n   * Checks if the terminal expected success state has been met\n   * @return [Boolean]\n   */\n  checkSuccess: function checkSuccess(resp) {\n    if (!this.config.successPath) {\n      return resp.httpResponse.statusCode < 300;\n    }\n\n    var r = AWS.util.jamespath.find(this.config.successPath, resp.data);\n\n    if (this.config.failureValue && this.config.failureValue.indexOf(r) >= 0) {\n      return null; // fast fail\n    }\n\n    if (this.expectedValue) {\n      return r === this.expectedValue;\n    } else {\n      return r ? true : false;\n    }\n  },\n\n  /**\n   * Checks if the terminal expected error state has been met\n   * @return [Boolean]\n   */\n  checkError: function checkError(resp) {\n    return resp.httpResponse.statusCode === this.config.successValue;\n  },\n\n  /**\n   * Loads waiter configuration from API configuration and deals with inherited\n   * properties.\n   *\n   * @api private\n   */\n  loadWaiterConfig: function loadWaiterConfig(state, noException) {\n    if (!this.service.api.waiters[state]) {\n      if (noException) return;\n      throw new AWS.util.error(new Error(), {\n        code: 'StateNotFoundError',\n        message: 'State ' + state + ' not found.'\n      });\n    }\n\n    this.config = this.service.api.waiters[state];\n    var config = this.config; // inherit acceptor data\n\n    (function () {\n      // anonymous function to avoid max complexity count\n      config.successType = config.successType || config.acceptorType;\n      config.successPath = config.successPath || config.acceptorPath;\n      config.successValue = config.successValue || config.acceptorValue;\n      config.failureType = config.failureType || config.acceptorType;\n      config.failurePath = config.failurePath || config.acceptorPath;\n      config.failureValue = config.failureValue || config.acceptorValue;\n    })();\n  }\n});","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/resource_waiter.js"],"names":["AWS","require","inherit","util","ResourceWaiter","constructor","service","state","each","call","key","value","expectedValue","loadWaiterConfig","config","successValue","waitDone","Listeners","retry","SequentialExecutor","addNamedListeners","add","resp","waiter","request","_waiter","error","code","retryDelay","interval","output","CHECK_OUT_ERROR","setError","CHECK_OUTPUT","success","checkSuccess","CHECK_ERROR","checkError","removeAllListeners","CHECK_ERR_OUTPUT","wait","params","callback","undefined","makeRequest","operation","listeners","successType","response","maxRetries","maxAttempts","addListeners","send","retryable","data","Error","message","successPath","httpResponse","statusCode","r","jamespath","find","failureValue","indexOf","noException","api","waiters","acceptorType","acceptorPath","acceptorValue","failureType","failurePath"],"mappings":"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","sourcesContent":["/**\n * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You\n * may not use this file except in compliance with the License. A copy of\n * the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n\nvar AWS = require('./core');\nvar inherit = AWS.util.inherit;\n\n/**\n * @api private\n */\nAWS.ResourceWaiter = inherit({\n  /**\n   * Waits for a given state on a service object\n   * @param service [Service] the service object to wait on\n   * @param state [String] the state (defined in waiter configuration) to wait\n   *   for.\n   * @example Create a waiter for running EC2 instances\n   *   var ec2 = new AWS.EC2;\n   *   var waiter = new AWS.ResourceWaiter(ec2, 'instanceRunning');\n   */\n  constructor: function constructor(service, state) {\n    this.service = service;\n    this.state = state;\n\n    if (typeof this.state === 'object') {\n      AWS.util.each.call(this, this.state, function (key, value) {\n        this.state = key;\n        this.expectedValue = value;\n      });\n    }\n\n    this.loadWaiterConfig(this.state);\n    if (!this.expectedValue) {\n      this.expectedValue = this.config.successValue;\n    }\n  },\n\n  service: null,\n\n  state: null,\n\n  expectedValue: null,\n\n  config: null,\n\n  waitDone: false,\n\n  Listeners: {\n    retry: new AWS.SequentialExecutor().addNamedListeners(function(add) {\n      add('RETRY_CHECK', 'retry', function(resp) {\n        var waiter = resp.request._waiter;\n        if (resp.error && resp.error.code === 'ResourceNotReady') {\n          resp.error.retryDelay = waiter.config.interval * 1000;\n        }\n      });\n    }),\n\n    output: new AWS.SequentialExecutor().addNamedListeners(function(add) {\n      add('CHECK_OUT_ERROR', 'extractError', function CHECK_OUT_ERROR(resp) {\n        if (resp.error) {\n          resp.request._waiter.setError(resp, true);\n        }\n      });\n\n      add('CHECK_OUTPUT', 'extractData', function CHECK_OUTPUT(resp) {\n        var waiter = resp.request._waiter;\n        var success = waiter.checkSuccess(resp);\n        if (!success) {\n          waiter.setError(resp, success === null ? false : true);\n        } else {\n          resp.error = null;\n        }\n      });\n    }),\n\n    error: new AWS.SequentialExecutor().addNamedListeners(function(add) {\n      add('CHECK_ERROR', 'extractError', function CHECK_ERROR(resp) {\n        var waiter = resp.request._waiter;\n        var success = waiter.checkError(resp);\n        if (!success) {\n          waiter.setError(resp, success === null ? false : true);\n        } else {\n          resp.error = null;\n          resp.request.removeAllListeners('extractData');\n        }\n      });\n\n      add('CHECK_ERR_OUTPUT', 'extractData', function CHECK_ERR_OUTPUT(resp) {\n        resp.request._waiter.setError(resp, true);\n      });\n    })\n  },\n\n  /**\n   * @return [AWS.Request]\n   */\n  wait: function wait(params, callback) {\n    if (typeof params === 'function') {\n      callback = params; params = undefined;\n    }\n\n    var request = this.service.makeRequest(this.config.operation, params);\n    var listeners = this.Listeners[this.config.successType];\n    request._waiter = this;\n    request.response.maxRetries = this.config.maxAttempts;\n    request.addListeners(this.Listeners.retry);\n    if (listeners) request.addListeners(listeners);\n\n    if (callback) request.send(callback);\n    return request;\n  },\n\n  setError: function setError(resp, retryable) {\n    resp.data = null;\n    resp.error = AWS.util.error(resp.error || new Error(), {\n      code: 'ResourceNotReady',\n      message: 'Resource is not in the state ' + this.state,\n      retryable: retryable\n    });\n  },\n\n  /**\n   * Checks if the terminal expected success state has been met\n   * @return [Boolean]\n   */\n  checkSuccess: function checkSuccess(resp) {\n    if (!this.config.successPath) {\n      return resp.httpResponse.statusCode < 300;\n    }\n\n    var r = AWS.util.jamespath.find(this.config.successPath, resp.data);\n\n    if (this.config.failureValue &&\n        this.config.failureValue.indexOf(r) >= 0) {\n      return null; // fast fail\n    }\n\n    if (this.expectedValue) {\n      return r === this.expectedValue;\n    } else {\n      return r ? true : false;\n    }\n  },\n\n  /**\n   * Checks if the terminal expected error state has been met\n   * @return [Boolean]\n   */\n  checkError: function checkError(resp) {\n    return resp.httpResponse.statusCode === this.config.successValue;\n  },\n\n  /**\n   * Loads waiter configuration from API configuration and deals with inherited\n   * properties.\n   *\n   * @api private\n   */\n  loadWaiterConfig: function loadWaiterConfig(state, noException) {\n    if (!this.service.api.waiters[state]) {\n      if (noException) return;\n      throw new AWS.util.error(new Error(), {\n        code: 'StateNotFoundError',\n        message: 'State ' + state + ' not found.'\n      });\n    }\n\n    this.config = this.service.api.waiters[state];\n    var config = this.config;\n\n    // inherit acceptor data\n    (function () { // anonymous function to avoid max complexity count\n      config.successType = config.successType || config.acceptorType;\n      config.successPath = config.successPath || config.acceptorPath;\n      config.successValue = config.successValue || config.acceptorValue;\n      config.failureType = config.failureType || config.acceptorType;\n      config.failurePath = config.failurePath || config.acceptorPath;\n      config.failureValue = config.failureValue || config.acceptorValue;\n    })();\n  }\n});\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var AWS = require('../core');\n/**\n * Represents credentials from the environment.\n *\n * By default, this class will look for the matching environment variables\n * prefixed by a given {envPrefix}. The un-prefixed environment variable names\n * for each credential value is listed below:\n *\n * ```javascript\n * accessKeyId: ACCESS_KEY_ID\n * secretAccessKey: SECRET_ACCESS_KEY\n * sessionToken: SESSION_TOKEN\n * ```\n *\n * With the default prefix of 'AWS', the environment variables would be:\n *\n *     AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN\n *\n * @!attribute envPrefix\n *   @readonly\n *   @return [String] the prefix for the environment variable names excluding\n *     the separating underscore ('_').\n */\n\n\nAWS.EnvironmentCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new EnvironmentCredentials class with a given variable\n   * prefix {envPrefix}. For example, to load credentials using the 'AWS'\n   * prefix:\n   *\n   * ```javascript\n   * var creds = new AWS.EnvironmentCredentials('AWS');\n   * creds.accessKeyId == 'AKID' // from AWS_ACCESS_KEY_ID env var\n   * ```\n   *\n   * @param envPrefix [String] the prefix to use (e.g., 'AWS') for environment\n   *   variables. Do not include the separating underscore.\n   */\n  constructor: function EnvironmentCredentials(envPrefix) {\n    AWS.Credentials.call(this);\n    this.envPrefix = envPrefix;\n    this.get(function () {});\n  },\n\n  /**\n   * Loads credentials from the environment using the prefixed\n   * environment variables.\n   *\n   * @callback callback function(err)\n   *   Called when the instance metadata service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    if (!callback) callback = function (err) {\n      if (err) throw err;\n    };\n\n    if (process === undefined) {\n      callback(new Error('No process info available'));\n      return;\n    }\n\n    var keys = ['ACCESS_KEY_ID', 'SECRET_ACCESS_KEY', 'SESSION_TOKEN'];\n    var values = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      var prefix = '';\n      if (this.envPrefix) prefix = this.envPrefix + '_';\n      values[i] = process.env[prefix + keys[i]];\n\n      if (!values[i] && keys[i] !== 'SESSION_TOKEN') {\n        callback(new Error('Variable ' + prefix + keys[i] + ' not set.'));\n        return;\n      }\n    }\n\n    this.expired = false;\n    AWS.Credentials.apply(this, values);\n    callback();\n  }\n});","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/credentials/environment_credentials.js"],"names":["AWS","require","EnvironmentCredentials","util","inherit","Credentials","constructor","envPrefix","call","get","refresh","callback","err","process","undefined","Error","keys","values","i","length","prefix","env","expired","apply"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAsBAD,GAAG,CAACE,sBAAJ,GAA6BF,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBJ,GAAG,CAACK,WAArB,EAAkC;AAE7D;;;;;;;;;;;;;AAaAC,EAAAA,WAAW,EAAE,SAASJ,sBAAT,CAAgCK,SAAhC,EAA2C;AACtDP,IAAAA,GAAG,CAACK,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKE,GAAL,CAAS,YAAW,CAAE,CAAtB;AACD,GAnB4D;;AAqB7D;;;;;;;;;;;;AAYAC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,QAAI,CAACA,QAAL,EAAeA,QAAQ,GAAG,UAASC,GAAT,EAAc;AAAE,UAAIA,GAAJ,EAAS,MAAMA,GAAN;AAAY,KAAhD;;AAEf,QAAIC,OAAO,KAAKC,SAAhB,EAA2B;AACzBH,MAAAA,QAAQ,CAAC,IAAII,KAAJ,CAAU,2BAAV,CAAD,CAAR;AACA;AACD;;AAED,QAAIC,IAAI,GAAG,CAAC,eAAD,EAAkB,mBAAlB,EAAuC,eAAvC,CAAX;AACA,QAAIC,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAIE,MAAM,GAAG,EAAb;AACA,UAAI,KAAKb,SAAT,EAAoBa,MAAM,GAAG,KAAKb,SAAL,GAAiB,GAA1B;AACpBU,MAAAA,MAAM,CAACC,CAAD,CAAN,GAAYL,OAAO,CAACQ,GAAR,CAAYD,MAAM,GAAGJ,IAAI,CAACE,CAAD,CAAzB,CAAZ;;AACA,UAAI,CAACD,MAAM,CAACC,CAAD,CAAP,IAAcF,IAAI,CAACE,CAAD,CAAJ,KAAY,eAA9B,EAA+C;AAC7CP,QAAAA,QAAQ,CAAC,IAAII,KAAJ,CAAU,cAAcK,MAAd,GAAuBJ,IAAI,CAACE,CAAD,CAA3B,GAAiC,WAA3C,CAAD,CAAR;AACA;AACD;AACF;;AAED,SAAKI,OAAL,GAAe,KAAf;AACAtB,IAAAA,GAAG,CAACK,WAAJ,CAAgBkB,KAAhB,CAAsB,IAAtB,EAA4BN,MAA5B;AACAN,IAAAA,QAAQ;AACT;AAzD4D,CAAlC,CAA7B","sourcesContent":["var AWS = require('../core');\n\n/**\n * Represents credentials from the environment.\n *\n * By default, this class will look for the matching environment variables\n * prefixed by a given {envPrefix}. The un-prefixed environment variable names\n * for each credential value is listed below:\n *\n * ```javascript\n * accessKeyId: ACCESS_KEY_ID\n * secretAccessKey: SECRET_ACCESS_KEY\n * sessionToken: SESSION_TOKEN\n * ```\n *\n * With the default prefix of 'AWS', the environment variables would be:\n *\n *     AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN\n *\n * @!attribute envPrefix\n *   @readonly\n *   @return [String] the prefix for the environment variable names excluding\n *     the separating underscore ('_').\n */\nAWS.EnvironmentCredentials = AWS.util.inherit(AWS.Credentials, {\n\n  /**\n   * Creates a new EnvironmentCredentials class with a given variable\n   * prefix {envPrefix}. For example, to load credentials using the 'AWS'\n   * prefix:\n   *\n   * ```javascript\n   * var creds = new AWS.EnvironmentCredentials('AWS');\n   * creds.accessKeyId == 'AKID' // from AWS_ACCESS_KEY_ID env var\n   * ```\n   *\n   * @param envPrefix [String] the prefix to use (e.g., 'AWS') for environment\n   *   variables. Do not include the separating underscore.\n   */\n  constructor: function EnvironmentCredentials(envPrefix) {\n    AWS.Credentials.call(this);\n    this.envPrefix = envPrefix;\n    this.get(function() {});\n  },\n\n  /**\n   * Loads credentials from the environment using the prefixed\n   * environment variables.\n   *\n   * @callback callback function(err)\n   *   Called when the instance metadata service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    if (!callback) callback = function(err) { if (err) throw err; };\n\n    if (process === undefined) {\n      callback(new Error('No process info available'));\n      return;\n    }\n\n    var keys = ['ACCESS_KEY_ID', 'SECRET_ACCESS_KEY', 'SESSION_TOKEN'];\n    var values = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      var prefix = '';\n      if (this.envPrefix) prefix = this.envPrefix + '_';\n      values[i] = process.env[prefix + keys[i]];\n      if (!values[i] && keys[i] !== 'SESSION_TOKEN') {\n        callback(new Error('Variable ' + prefix + keys[i] + ' not set.'));\n        return;\n      }\n    }\n\n    this.expired = false;\n    AWS.Credentials.apply(this, values);\n    callback();\n  }\n\n});\n"]},"metadata":{},"sourceType":"script"}
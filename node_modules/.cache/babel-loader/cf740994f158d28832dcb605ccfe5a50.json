{"ast":null,"code":"var AWS = require('../core');\n/**\n * Represents credentials from a JSON file on disk.\n * If the credentials expire, the SDK can {refresh} the credentials\n * from the file.\n *\n * The format of the file should be similar to the options passed to\n * {AWS.Config}:\n *\n * ```javascript\n * {accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'optional'}\n * ```\n *\n * @example Loading credentials from disk\n *   var creds = new AWS.FileSystemCredentials('./configuration.json');\n *   creds.accessKeyId == 'AKID'\n *\n * @!attribute filename\n *   @readonly\n *   @return [String] the path to the JSON file on disk containing the\n *     credentials.\n * @!macro nobrowser\n */\n\n\nAWS.FileSystemCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * @overload AWS.FileSystemCredentials(filename)\n   *   Creates a new FileSystemCredentials object from a filename\n   *\n   *   @param filename [String] the path on disk to the JSON file to load.\n   */\n  constructor: function FileSystemCredentials(filename) {\n    AWS.Credentials.call(this);\n    this.filename = filename;\n    this.get(function () {});\n  },\n\n  /**\n   * Loads the credentials from the {filename} on disk.\n   *\n   * @callback callback function(err)\n   *   Called when the instance metadata service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    if (!callback) callback = function (err) {\n      if (err) throw err;\n    };\n\n    try {\n      var creds = JSON.parse(AWS.util.readFileSync(this.filename));\n      AWS.Credentials.call(this, creds);\n\n      if (!this.accessKeyId || !this.secretAccessKey) {\n        throw new Error('Credentials not set in ' + this.filename);\n      }\n\n      this.expired = false;\n      callback();\n    } catch (err) {\n      callback(err);\n    }\n  }\n});","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/credentials/file_system_credentials.js"],"names":["AWS","require","FileSystemCredentials","util","inherit","Credentials","constructor","filename","call","get","refresh","callback","err","creds","JSON","parse","readFileSync","accessKeyId","secretAccessKey","Error","expired"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAsBAD,GAAG,CAACE,qBAAJ,GAA4BF,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBJ,GAAG,CAACK,WAArB,EAAkC;AAE5D;;;;;;AAMAC,EAAAA,WAAW,EAAE,SAASJ,qBAAT,CAA+BK,QAA/B,EAAyC;AACpDP,IAAAA,GAAG,CAACK,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKE,GAAL,CAAS,YAAW,CAAE,CAAtB;AACD,GAZ2D;;AAc5D;;;;;;;;;;;AAWAC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,QAAI,CAACA,QAAL,EAAeA,QAAQ,GAAG,UAASC,GAAT,EAAc;AAAE,UAAIA,GAAJ,EAAS,MAAMA,GAAN;AAAY,KAAhD;;AACf,QAAI;AACF,UAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWf,GAAG,CAACG,IAAJ,CAASa,YAAT,CAAsB,KAAKT,QAA3B,CAAX,CAAZ;AACAP,MAAAA,GAAG,CAACK,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB,EAA2BK,KAA3B;;AACA,UAAI,CAAC,KAAKI,WAAN,IAAqB,CAAC,KAAKC,eAA/B,EAAgD;AAC9C,cAAM,IAAIC,KAAJ,CAAU,4BAA4B,KAAKZ,QAA3C,CAAN;AACD;;AACD,WAAKa,OAAL,GAAe,KAAf;AACAT,MAAAA,QAAQ;AACT,KARD,CAQE,OAAOC,GAAP,EAAY;AACZD,MAAAA,QAAQ,CAACC,GAAD,CAAR;AACD;AACF;AAtC2D,CAAlC,CAA5B","sourcesContent":["var AWS = require('../core');\n\n/**\n * Represents credentials from a JSON file on disk.\n * If the credentials expire, the SDK can {refresh} the credentials\n * from the file.\n *\n * The format of the file should be similar to the options passed to\n * {AWS.Config}:\n *\n * ```javascript\n * {accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'optional'}\n * ```\n *\n * @example Loading credentials from disk\n *   var creds = new AWS.FileSystemCredentials('./configuration.json');\n *   creds.accessKeyId == 'AKID'\n *\n * @!attribute filename\n *   @readonly\n *   @return [String] the path to the JSON file on disk containing the\n *     credentials.\n * @!macro nobrowser\n */\nAWS.FileSystemCredentials = AWS.util.inherit(AWS.Credentials, {\n\n  /**\n   * @overload AWS.FileSystemCredentials(filename)\n   *   Creates a new FileSystemCredentials object from a filename\n   *\n   *   @param filename [String] the path on disk to the JSON file to load.\n   */\n  constructor: function FileSystemCredentials(filename) {\n    AWS.Credentials.call(this);\n    this.filename = filename;\n    this.get(function() {});\n  },\n\n  /**\n   * Loads the credentials from the {filename} on disk.\n   *\n   * @callback callback function(err)\n   *   Called when the instance metadata service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    if (!callback) callback = function(err) { if (err) throw err; };\n    try {\n      var creds = JSON.parse(AWS.util.readFileSync(this.filename));\n      AWS.Credentials.call(this, creds);\n      if (!this.accessKeyId || !this.secretAccessKey) {\n        throw new Error('Credentials not set in ' + this.filename);\n      }\n      this.expired = false;\n      callback();\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n});\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar createQueue = require('./queue'),\n    simplesmtp = require('simplesmtp'),\n    dns = require('dns'),\n    net = require('net'),\n    os = require('os'),\n    packageData = require('../package.json'),\n    EventEmitter = require('events').EventEmitter;\n\nmodule.exports = function (options) {\n  var mailer = new DirectMailer(options);\n  mailer.version = packageData.version;\n  return mailer;\n};\n/**\n * Creates a new DirectMailer instance. Provides method 'send' to queue\n * outgoing e-mails. The queue is processed in the background.\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */\n\n\nfunction DirectMailer(options) {\n  this._options = options || {};\n  this._queue = createQueue();\n  this._started = false;\n  this._lastId = 0;\n} // Adds a dynamic property 'length'\n\n\nObject.defineProperty(DirectMailer.prototype, 'length', {\n  get: function () {\n    return this._queue._instantQueue.length + this._queue._sortedQueue.length;\n  }\n});\n/**\n * Adds an outgoing message to the queue. Recipient addresses are sorted\n * by the receiving domain and for every domain, a copy of the message is queued.\n *\n * If input is deemed invalid, an error is thrown, so be ready to catch these\n * when calling directmail.send(...)\n *\n * @param {Object} options E-mail options\n * @param {String} options.from Sender e-mail address\n * @param {Array|String} options.recipients A list of or a single recipient address\n * @param {String|Buffer} options.message RFC2822 formatted e-mail\n * @return {EventEmitter} Handler for receiving information about message sending status\n */\n\nDirectMailer.prototype.send = function (options) {\n  options = options || {};\n  var from = [].concat(options.from || []).shift() || '',\n      recipients = [].concat(options.recipients || []),\n      message = options.message || '',\n      domainGroups = {},\n      emitter = new EventEmitter();\n\n  if (!from) {\n    throw new Error('\"From\" address missing');\n  }\n\n  if (!recipients.length) {\n    throw new Error('\"Recipients\" addresses missing');\n  }\n\n  if (!message) {\n    throw new Error('Nothing to send, \"message\" empty');\n  }\n\n  recipients.forEach(function (recipient) {\n    recipient = (recipient || '').toString();\n    var domain = (recipient.split('@').pop() || '').toLowerCase().trim();\n\n    if (!domainGroups[domain]) {\n      domainGroups[domain] = [recipient];\n    } else if (domainGroups[domain].indexOf(recipient) < 0) {\n      domainGroups[domain].push(recipient);\n    }\n  });\n  Object.keys(domainGroups).forEach(function (domain) {\n    var item = {\n      from: from,\n      to: domainGroups[domain],\n      domain: domain,\n      message: message,\n      emitter: emitter,\n      id: ++this._lastId\n    };\n\n    this._formatMessage(item);\n\n    this._queue.insert(item);\n\n    if (this._options.debug) {\n      console.log('Queued message #%s from %s, to %s', this._lastId, from, domainGroups[domain].join(', '));\n    }\n  }.bind(this)); // start send loop if needed\n\n  if (!this._started) {\n    this._started = true; // do not start the loop before current execution context is finished\n\n    if (typeof setImmediate == 'function') {\n      setImmediate(this._loop.bind(this));\n    } else {\n      process.nextTick(this._loop.bind(this));\n    }\n  }\n\n  return emitter;\n};\n/**\n * Looping function to fetch a message from the queue and send it.\n */\n\n\nDirectMailer.prototype._loop = function () {\n  // callback is fired when a message is added to the queue\n  this._queue.get(function (data) {\n    if (this._options.debug) {\n      console.log('Retrieved message #%s from the queue, resolving %s', data.id, data.domain);\n    } // Resolve destination MX server\n\n\n    this._resolveMx(data.domain, function (err, list) {\n      if (this._options.debug) {\n        if (err) {\n          console.log('Resolving %s for #%s failed', data.domain, data.id);\n          console.log(err);\n        } else if (!list || !list.length) {\n          console.log('Could not resolve any MX servers for %s', data.domain);\n        }\n      }\n\n      if (err || !list || !list.length) {\n        data.emitter.emit('failed', {\n          domain: data.domain,\n          error: err\n        });\n\n        if (typeof setImmediate == 'function') {\n          setImmediate(this._loop.bind(this));\n        } else {\n          process.nextTick(this._loop.bind(this));\n        }\n\n        return;\n      } // Sort MX list by priority field\n\n\n      list.sort(function (a, b) {\n        return (a && a.priority || 0) - (b && b.priority || 0);\n      }); // Use the first server on the list\n\n      var exchange = list[0] && list[0].exchange;\n\n      if (this._options.debug) {\n        console.log('%s resolved to %s for #%s', data.domain, exchange, data.id);\n      } // Try to send the message\n\n\n      this._process(exchange, data, function (err, response) {\n        if (this._options.debug) {\n          if (err) {\n            console.log('Failed processing message #%s', data.id);\n          } else {\n            console.log('Server responded for #%s:', data.id);\n            console.log(response);\n          }\n        }\n\n        if (err) {\n          if (err.code && err.code >= 500) {\n            data.emitter.emit('failed', {\n              domain: data.domain,\n              error: err\n            });\n          } else {\n            data.replies = (data.replies || 0) + 1;\n\n            if (data.replies <= 5) {\n              this._queue.insert(data, data.replies * 15 * 60 * 1000);\n\n              if (this._options.debug) {\n                console.log('Message #%s requeued for %s minutes', data.id, data.replies * 15);\n              }\n\n              data.emitter.emit('requeue', {\n                domain: data.domain,\n                error: err\n              });\n            } else {\n              data.emitter.emit('failed', {\n                domain: data.domain,\n                error: err\n              });\n            }\n          }\n        } else {\n          data.emitter.emit('sent', {\n            domain: data.domain,\n            response: response\n          });\n        }\n\n        if (typeof setImmediate == 'function') {\n          setImmediate(this._loop.bind(this));\n        } else {\n          process.nextTick(this._loop.bind(this));\n        }\n      }.bind(this));\n    }.bind(this));\n  }.bind(this));\n};\n/**\n * Sends a message to provided MX server\n *\n * @param {String} exchange MX server\n * @param {Object} data Message object\n * @param {Function} callback Callback to run once the message is either sent or sending fails\n */\n\n\nDirectMailer.prototype._process = function (exchange, data, callback) {\n  if (this._options.debug) {\n    console.log('Connecting to %s:%s for message #%s', exchange, this._options.port || 25, data.id);\n  }\n\n  var options = {\n    ignoreTLS: true\n  }; // Add options from DirectMailer options to simplesmtp client\n\n  Object.keys(this._options).forEach(function (key) {\n    options[key] = this._options[key];\n  }.bind(this));\n  var client = simplesmtp.connect(this._options.port || 25, exchange, options),\n      response = {},\n      ready = false; // Once client is connected and an e-mail can be sent\n\n  client.once('idle', function () {\n    // Define MAIL FROM and RCTP TO values\n    client.useEnvelope({\n      from: data.from,\n      to: data.to\n    });\n  }); // If recipient is not accepted, log it\n\n  client.once('rcptFailed', function (addresses) {\n    if (this._options.debug) {\n      console.log('The following addresses were rejected for #%s: %s', data.id, addresses.join(', '));\n    }\n  }.bind(this)); // Envelope is set up and the server is waiting for DATA command\n\n  client.once('message', function () {\n    if (this._options.debug) {\n      console.log('Transmitting message #%s', data.id);\n    } // Send the entire message at once\n\n\n    client.end(data.message);\n  }.bind(this)); // Message has been delivered to the server\n\n  client.once('ready', function (success, message) {\n    response.success = !!success;\n    response.message = message;\n    client.quit();\n  }); // Sending failed\n\n  client.once('error', function (err) {\n    if (ready) {\n      return;\n    }\n\n    ready = true;\n    callback(err);\n  }); // Connection to the server is closed\n\n  client.once('end', function () {\n    var err;\n\n    if (ready) {\n      return;\n    }\n\n    ready = true;\n\n    if (!response.success) {\n      err = new Error('Sending failed with error ' + (response.message || '').substr(0, 3));\n      err.code = Number((response.message || '').substr(0, 3)) || 0;\n      callback(err);\n    } else {\n      callback(null, response.message);\n    }\n  });\n};\n/**\n * Adds additional headers to the outgoing message\n */\n\n\nDirectMailer.prototype._formatMessage = function (item) {\n  var hostname = this._resolveHostname(this._options.name),\n      headers = [// Act like the message went through a SMTP relay\n  'Received: from localhost (127.0.0.1)\\r\\n by ' + hostname + ' with SMTP; ' + Date()];\n\n  item.message = headers.join('\\r\\n') + '\\r\\n' + (item.message || '');\n};\n/**\n * Resolves MX server for a domain\n *\n * @param {String} domain Domain to resolve the MX to\n * @param {Function} callback Callback function to run\n */\n\n\nDirectMailer.prototype._resolveMx = function (domain, callback) {\n  // Do not try to resolve the domain name if it is an IP address\n  if (net.isIP(domain)) {\n    return callback(null, [{\n      'priority': 10,\n      'exchange': domain\n    }]);\n  }\n\n  dns.resolveMx(domain, callback);\n};\n/**\n * Resolves current hostname. If resolved name is an IP address, uses 'localhost'.\n *\n * @param {String} [name] Preferred hostname\n * @return {String} Resolved hostname\n */\n\n\nDirectMailer.prototype._resolveHostname = function (name) {\n  if (!name || net.isIP(name.replace(/[\\[\\]]/g, '').trim())) {\n    name = os.hostname && os.hostname() || '';\n  }\n\n  if (!name || net.isIP(name.replace(/[\\[\\]]/g, '').trim())) {\n    name = 'localhost';\n  }\n\n  return name.toLowerCase();\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/directmail/lib/mailer.js"],"names":["createQueue","require","simplesmtp","dns","net","os","packageData","EventEmitter","module","exports","options","mailer","DirectMailer","version","_options","_queue","_started","_lastId","Object","defineProperty","prototype","get","_instantQueue","length","_sortedQueue","send","from","concat","shift","recipients","message","domainGroups","emitter","Error","forEach","recipient","toString","domain","split","pop","toLowerCase","trim","indexOf","push","keys","item","to","id","_formatMessage","insert","debug","console","log","join","bind","setImmediate","_loop","process","nextTick","data","_resolveMx","err","list","emit","error","sort","a","b","priority","exchange","_process","response","code","replies","callback","port","ignoreTLS","key","client","connect","ready","once","useEnvelope","addresses","end","success","quit","substr","Number","hostname","_resolveHostname","name","headers","Date","isIP","resolveMx","replace"],"mappings":"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","sourcesContent":["'use strict';\n\nvar createQueue = require('./queue'),\n    simplesmtp = require('simplesmtp'),\n    dns = require('dns'),\n    net = require('net'),\n    os = require('os'),\n    packageData = require('../package.json'),\n    EventEmitter = require('events').EventEmitter;\n\nmodule.exports = function(options) {\n    var mailer = new DirectMailer(options);\n    mailer.version = packageData.version;\n    return mailer;\n};\n\n/**\n * Creates a new DirectMailer instance. Provides method 'send' to queue\n * outgoing e-mails. The queue is processed in the background.\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */\nfunction DirectMailer(options) {\n    this._options = options || {};\n    this._queue = createQueue();\n    this._started = false;\n    this._lastId = 0;\n}\n\n// Adds a dynamic property 'length'\nObject.defineProperty(DirectMailer.prototype, 'length', {\n    get: function() {\n        return this._queue._instantQueue.length + this._queue._sortedQueue.length;\n    }\n});\n\n/**\n * Adds an outgoing message to the queue. Recipient addresses are sorted\n * by the receiving domain and for every domain, a copy of the message is queued.\n *\n * If input is deemed invalid, an error is thrown, so be ready to catch these\n * when calling directmail.send(...)\n *\n * @param {Object} options E-mail options\n * @param {String} options.from Sender e-mail address\n * @param {Array|String} options.recipients A list of or a single recipient address\n * @param {String|Buffer} options.message RFC2822 formatted e-mail\n * @return {EventEmitter} Handler for receiving information about message sending status\n */\nDirectMailer.prototype.send = function(options) {\n    options = options || {};\n\n    var from = [].concat(options.from || []).shift() || '',\n        recipients = [].concat(options.recipients || []),\n        message = options.message || '',\n        domainGroups = {},\n        emitter = new EventEmitter();\n\n    if (!from) {\n        throw new Error('\"From\" address missing');\n    }\n\n    if (!recipients.length) {\n        throw new Error('\"Recipients\" addresses missing');\n    }\n\n    if (!message) {\n        throw new Error('Nothing to send, \"message\" empty');\n    }\n\n    recipients.forEach(function(recipient) {\n        recipient = (recipient || '').toString();\n\n        var domain = (recipient.split('@').pop() || '').toLowerCase().trim();\n\n        if (!domainGroups[domain]) {\n            domainGroups[domain] = [recipient];\n        } else if (domainGroups[domain].indexOf(recipient) < 0) {\n            domainGroups[domain].push(recipient);\n        }\n    });\n\n    Object.keys(domainGroups).forEach((function(domain) {\n        var item = {\n            from: from,\n            to: domainGroups[domain],\n            domain: domain,\n            message: message,\n            emitter: emitter,\n            id: ++this._lastId\n        };\n        this._formatMessage(item);\n        this._queue.insert(item);\n        if (this._options.debug) {\n            console.log('Queued message #%s from %s, to %s', this._lastId, from, domainGroups[domain].join(', '));\n        }\n    }).bind(this));\n\n    // start send loop if needed\n    if (!this._started) {\n        this._started = true;\n\n        // do not start the loop before current execution context is finished\n        if (typeof setImmediate == 'function') {\n            setImmediate(this._loop.bind(this));\n        } else {\n            process.nextTick(this._loop.bind(this));\n        }\n    }\n\n    return emitter;\n};\n\n/**\n * Looping function to fetch a message from the queue and send it.\n */\nDirectMailer.prototype._loop = function() {\n\n    // callback is fired when a message is added to the queue\n    this._queue.get((function(data) {\n\n        if (this._options.debug) {\n            console.log('Retrieved message #%s from the queue, resolving %s', data.id, data.domain);\n        }\n\n        // Resolve destination MX server\n        this._resolveMx(data.domain, (function(err, list) {\n            if (this._options.debug) {\n                if (err) {\n                    console.log('Resolving %s for #%s failed', data.domain, data.id);\n                    console.log(err);\n                } else if (!list || !list.length) {\n                    console.log('Could not resolve any MX servers for %s', data.domain);\n                }\n            }\n            if (err || !list || !list.length) {\n                data.emitter.emit('failed', {\n                    domain: data.domain,\n                    error: err\n                });\n                if (typeof setImmediate == 'function') {\n                    setImmediate(this._loop.bind(this));\n                } else {\n                    process.nextTick(this._loop.bind(this));\n                }\n                return;\n            }\n\n            // Sort MX list by priority field\n            list.sort(function(a, b) {\n                return (a && a.priority || 0) - (b && b.priority || 0);\n            });\n\n            // Use the first server on the list\n            var exchange = list[0] && list[0].exchange;\n\n            if (this._options.debug) {\n                console.log('%s resolved to %s for #%s', data.domain, exchange, data.id);\n            }\n\n            // Try to send the message\n            this._process(exchange, data, (function(err, response) {\n                if (this._options.debug) {\n                    if (err) {\n                        console.log('Failed processing message #%s', data.id);\n                    } else {\n                        console.log('Server responded for #%s:', data.id);\n                        console.log(response);\n                    }\n                }\n                if (err) {\n                    if (err.code && err.code >= 500) {\n                        data.emitter.emit('failed', {\n                            domain: data.domain,\n                            error: err\n                        });\n                    } else {\n                        data.replies = (data.replies || 0) + 1;\n                        if (data.replies <= 5) {\n                            this._queue.insert(data, data.replies * 15 * 60 * 1000);\n                            if (this._options.debug) {\n                                console.log('Message #%s requeued for %s minutes', data.id, data.replies * 15);\n                            }\n                            data.emitter.emit('requeue', {\n                                domain: data.domain,\n                                error: err\n                            });\n                        } else {\n                            data.emitter.emit('failed', {\n                                domain: data.domain,\n                                error: err\n                            });\n                        }\n                    }\n                } else {\n                    data.emitter.emit('sent', {\n                        domain: data.domain,\n                        response: response\n                    });\n                }\n                if (typeof setImmediate == 'function') {\n                    setImmediate(this._loop.bind(this));\n                } else {\n                    process.nextTick(this._loop.bind(this));\n                }\n            }).bind(this));\n\n        }).bind(this));\n\n    }).bind(this));\n};\n\n/**\n * Sends a message to provided MX server\n *\n * @param {String} exchange MX server\n * @param {Object} data Message object\n * @param {Function} callback Callback to run once the message is either sent or sending fails\n */\nDirectMailer.prototype._process = function(exchange, data, callback) {\n    if (this._options.debug) {\n        console.log('Connecting to %s:%s for message #%s', exchange, this._options.port || 25, data.id);\n    }\n\n    var options = {\n        ignoreTLS: true\n    };\n\n    // Add options from DirectMailer options to simplesmtp client\n    Object.keys(this._options).forEach((function(key) {\n        options[key] = this._options[key];\n    }).bind(this));\n\n    var client = simplesmtp.connect(this._options.port || 25, exchange, options),\n        response = {},\n        ready = false;\n\n    // Once client is connected and an e-mail can be sent\n    client.once('idle', function() {\n        // Define MAIL FROM and RCTP TO values\n        client.useEnvelope({\n            from: data.from,\n            to: data.to\n        });\n    });\n\n    // If recipient is not accepted, log it\n    client.once('rcptFailed', (function(addresses) {\n        if (this._options.debug) {\n            console.log('The following addresses were rejected for #%s: %s', data.id, addresses.join(', '));\n        }\n    }).bind(this));\n\n    // Envelope is set up and the server is waiting for DATA command\n    client.once('message', (function() {\n        if (this._options.debug) {\n            console.log('Transmitting message #%s', data.id);\n        }\n        // Send the entire message at once\n        client.end(data.message);\n    }).bind(this));\n\n    // Message has been delivered to the server\n    client.once('ready', function(success, message) {\n        response.success = !! success;\n        response.message = message;\n        client.quit();\n    });\n\n    // Sending failed\n    client.once('error', function(err) {\n        if (ready) {\n            return;\n        }\n        ready = true;\n        callback(err);\n    });\n\n    // Connection to the server is closed\n    client.once('end', function() {\n        var err;\n\n        if (ready) {\n            return;\n        }\n        ready = true;\n\n        if (!response.success) {\n            err = new Error('Sending failed with error ' + (response.message || '').substr(0, 3));\n            err.code = Number((response.message || '').substr(0, 3)) || 0;\n            callback(err);\n        } else {\n            callback(null, response.message);\n        }\n    });\n};\n\n/**\n * Adds additional headers to the outgoing message\n */\nDirectMailer.prototype._formatMessage = function(item) {\n    var hostname = this._resolveHostname(this._options.name),\n        headers = [\n            // Act like the message went through a SMTP relay\n            'Received: from localhost (127.0.0.1)\\r\\n by ' + hostname + ' with SMTP; ' + Date()\n        ];\n\n    item.message = headers.join('\\r\\n') + '\\r\\n' + (item.message || '');\n};\n\n/**\n * Resolves MX server for a domain\n *\n * @param {String} domain Domain to resolve the MX to\n * @param {Function} callback Callback function to run\n */\nDirectMailer.prototype._resolveMx = function(domain, callback) {\n\n    // Do not try to resolve the domain name if it is an IP address\n    if (net.isIP(domain)) {\n        return callback(null, [{\n            'priority': 10,\n            'exchange': domain\n        }]);\n    }\n\n    dns.resolveMx(domain, callback);\n};\n\n/**\n * Resolves current hostname. If resolved name is an IP address, uses 'localhost'.\n *\n * @param {String} [name] Preferred hostname\n * @return {String} Resolved hostname\n */\nDirectMailer.prototype._resolveHostname = function(name) {\n    if (!name || net.isIP(name.replace(/[\\[\\]]/g, '').trim())) {\n        name = (os.hostname && os.hostname()) || '';\n    }\n\n    if (!name || net.isIP(name.replace(/[\\[\\]]/g, '').trim())) {\n        name = 'localhost';\n    }\n\n    return name.toLowerCase();\n};"]},"metadata":{},"sourceType":"script"}
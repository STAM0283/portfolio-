{"ast":null,"code":"var AWS = require('./core');\n\nmodule.exports = AWS; // Load the xml2js XML parser\n\nAWS.XML.Parser = require('./xml/node_parser'); // Load Node HTTP client\n\nrequire('./http/node'); // Load all service classes\n\n\nrequire('./services'); // Load custom credential providers\n\n\nrequire('./credentials/ec2_metadata_credentials');\n\nrequire('./credentials/environment_credentials');\n\nrequire('./credentials/file_system_credentials');\n\nrequire('./credentials/shared_ini_file_credentials'); // Setup default chain providers\n\n\nAWS.CredentialProviderChain.defaultProviders = [function () {\n  return new AWS.EnvironmentCredentials('AWS');\n}, function () {\n  return new AWS.EnvironmentCredentials('AMAZON');\n}, function () {\n  return new AWS.SharedIniFileCredentials();\n}, function () {\n  return new AWS.EC2MetadataCredentials();\n}]; // Update configuration keys\n\nAWS.util.update(AWS.Config.prototype.keys, {\n  credentials: function () {\n    var credentials = null;\n    new AWS.CredentialProviderChain([function () {\n      return new AWS.EnvironmentCredentials('AWS');\n    }, function () {\n      return new AWS.EnvironmentCredentials('AMAZON');\n    }, function () {\n      return new AWS.SharedIniFileCredentials();\n    }]).resolve(function (err, creds) {\n      if (!err) credentials = creds;\n    });\n    return credentials;\n  },\n  credentialProvider: function () {\n    return new AWS.CredentialProviderChain();\n  },\n  region: function () {\n    return process.env.AWS_REGION || process.env.AMAZON_REGION;\n  }\n}); // Reset configuration\n\nAWS.config = new AWS.Config();","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/aws.js"],"names":["AWS","require","module","exports","XML","Parser","CredentialProviderChain","defaultProviders","EnvironmentCredentials","SharedIniFileCredentials","EC2MetadataCredentials","util","update","Config","prototype","keys","credentials","resolve","err","creds","credentialProvider","region","process","env","AWS_REGION","AMAZON_REGION","config"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACAC,MAAM,CAACC,OAAP,GAAiBH,GAAjB,C,CAEA;;AACAA,GAAG,CAACI,GAAJ,CAAQC,MAAR,GAAiBJ,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;;AACAA,OAAO,CAAC,aAAD,CAAP,C,CAEA;;;AACAA,OAAO,CAAC,YAAD,CAAP,C,CAEA;;;AACAA,OAAO,CAAC,wCAAD,CAAP;;AACAA,OAAO,CAAC,uCAAD,CAAP;;AACAA,OAAO,CAAC,uCAAD,CAAP;;AACAA,OAAO,CAAC,2CAAD,CAAP,C,CAEA;;;AACAD,GAAG,CAACM,uBAAJ,CAA4BC,gBAA5B,GAA+C,CAC7C,YAAY;AAAE,SAAO,IAAIP,GAAG,CAACQ,sBAAR,CAA+B,KAA/B,CAAP;AAA+C,CADhB,EAE7C,YAAY;AAAE,SAAO,IAAIR,GAAG,CAACQ,sBAAR,CAA+B,QAA/B,CAAP;AAAkD,CAFnB,EAG7C,YAAY;AAAE,SAAO,IAAIR,GAAG,CAACS,wBAAR,EAAP;AAA4C,CAHb,EAI7C,YAAY;AAAE,SAAO,IAAIT,GAAG,CAACU,sBAAR,EAAP;AAA0C,CAJX,CAA/C,C,CAOA;;AACAV,GAAG,CAACW,IAAJ,CAASC,MAAT,CAAgBZ,GAAG,CAACa,MAAJ,CAAWC,SAAX,CAAqBC,IAArC,EAA2C;AACzCC,EAAAA,WAAW,EAAE,YAAY;AACvB,QAAIA,WAAW,GAAG,IAAlB;AACA,QAAIhB,GAAG,CAACM,uBAAR,CAAgC,CAC9B,YAAY;AAAE,aAAO,IAAIN,GAAG,CAACQ,sBAAR,CAA+B,KAA/B,CAAP;AAA+C,KAD/B,EAE9B,YAAY;AAAE,aAAO,IAAIR,GAAG,CAACQ,sBAAR,CAA+B,QAA/B,CAAP;AAAkD,KAFlC,EAG9B,YAAY;AAAE,aAAO,IAAIR,GAAG,CAACS,wBAAR,EAAP;AAA4C,KAH5B,CAAhC,EAIGQ,OAJH,CAIW,UAASC,GAAT,EAAcC,KAAd,EAAqB;AAC9B,UAAI,CAACD,GAAL,EAAUF,WAAW,GAAGG,KAAd;AACX,KAND;AAOA,WAAOH,WAAP;AACD,GAXwC;AAYzCI,EAAAA,kBAAkB,EAAE,YAAW;AAC7B,WAAO,IAAIpB,GAAG,CAACM,uBAAR,EAAP;AACD,GAdwC;AAezCe,EAAAA,MAAM,EAAE,YAAW;AACjB,WAAOC,OAAO,CAACC,GAAR,CAAYC,UAAZ,IAA0BF,OAAO,CAACC,GAAR,CAAYE,aAA7C;AACD;AAjBwC,CAA3C,E,CAoBA;;AACAzB,GAAG,CAAC0B,MAAJ,GAAa,IAAI1B,GAAG,CAACa,MAAR,EAAb","sourcesContent":["var AWS = require('./core');\nmodule.exports = AWS;\n\n// Load the xml2js XML parser\nAWS.XML.Parser = require('./xml/node_parser');\n\n// Load Node HTTP client\nrequire('./http/node');\n\n// Load all service classes\nrequire('./services');\n\n// Load custom credential providers\nrequire('./credentials/ec2_metadata_credentials');\nrequire('./credentials/environment_credentials');\nrequire('./credentials/file_system_credentials');\nrequire('./credentials/shared_ini_file_credentials');\n\n// Setup default chain providers\nAWS.CredentialProviderChain.defaultProviders = [\n  function () { return new AWS.EnvironmentCredentials('AWS'); },\n  function () { return new AWS.EnvironmentCredentials('AMAZON'); },\n  function () { return new AWS.SharedIniFileCredentials(); },\n  function () { return new AWS.EC2MetadataCredentials(); }\n];\n\n// Update configuration keys\nAWS.util.update(AWS.Config.prototype.keys, {\n  credentials: function () {\n    var credentials = null;\n    new AWS.CredentialProviderChain([\n      function () { return new AWS.EnvironmentCredentials('AWS'); },\n      function () { return new AWS.EnvironmentCredentials('AMAZON'); },\n      function () { return new AWS.SharedIniFileCredentials(); }\n    ]).resolve(function(err, creds) {\n      if (!err) credentials = creds;\n    });\n    return credentials;\n  },\n  credentialProvider: function() {\n    return new AWS.CredentialProviderChain();\n  },\n  region: function() {\n    return process.env.AWS_REGION || process.env.AMAZON_REGION;\n  }\n});\n\n// Reset configuration\nAWS.config = new AWS.Config();\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var AWS = require('./core');\n\nvar AcceptorStateMachine = require('./state_machine');\n\nvar inherit = AWS.util.inherit;\nvar hardErrorStates = {\n  success: 1,\n  error: 1,\n  complete: 1\n};\n\nfunction isTerminalState(machine) {\n  return hardErrorStates.hasOwnProperty(machine._asm.currentState);\n}\n\nvar fsm = new AcceptorStateMachine();\n\nfsm.setupStates = function () {\n  var transition = function (err, done) {\n    try {\n      var self = this;\n      self.emit(self._asm.currentState, function () {\n        var nextError = self.response.error;\n\n        if (nextError && nextError !== err && isTerminalState(self)) {\n          throw nextError;\n        }\n\n        done(nextError);\n      });\n    } catch (e) {\n      if (e !== err && isTerminalState(self)) {\n        AWS.SequentialExecutor.prototype.unhandledErrorCallback.call(this, e);\n        done();\n      } else {\n        done(e);\n      }\n    }\n  };\n\n  this.addState('validate', 'build', 'error', transition);\n  this.addState('build', 'afterBuild', 'restart', transition);\n  this.addState('afterBuild', 'sign', 'restart', transition);\n  this.addState('sign', 'send', 'retry', transition);\n  this.addState('retry', 'afterRetry', 'afterRetry', transition);\n  this.addState('afterRetry', 'sign', 'error', transition);\n  this.addState('send', 'validateResponse', 'retry', transition);\n  this.addState('validateResponse', 'extractData', 'extractError', transition);\n  this.addState('extractError', 'extractData', 'retry', transition);\n  this.addState('extractData', 'success', 'retry', transition);\n  this.addState('restart', 'build', 'error', transition);\n  this.addState('success', 'complete', 'complete', transition);\n  this.addState('error', 'complete', 'complete', transition);\n  this.addState('complete', null, null, transition);\n};\n\nfsm.setupStates();\n/**\n * ## Asynchronous Requests\n *\n * All requests made through the SDK are asynchronous and use a\n * callback interface. Each service method that kicks off a request\n * returns an `AWS.Request` object that you can use to register\n * callbacks.\n *\n * For example, the following service method returns the request\n * object as \"request\", which can be used to register callbacks:\n *\n * ```javascript\n * // request is an AWS.Request object\n * var request = ec2.describeInstances();\n *\n * // register callbacks on request to retrieve response data\n * request.on('success', function(response) {\n *   console.log(response.data);\n * });\n * ```\n *\n * When a request is ready to be sent, the {send} method should\n * be called:\n *\n * ```javascript\n * request.send();\n * ```\n *\n * ## Removing Default Listeners for Events\n *\n * Request objects are built with default listeners for the various events,\n * depending on the service type. In some cases, you may want to remove\n * some built-in listeners to customize behaviour. Doing this requires\n * access to the built-in listener functions, which are exposed through\n * the {AWS.EventListeners.Core} namespace. For instance, you may\n * want to customize the HTTP handler used when sending a request. In this\n * case, you can remove the built-in listener associated with the 'send'\n * event, the {AWS.EventListeners.Core.SEND} listener and add your own.\n *\n * ## Multiple Callbacks and Chaining\n *\n * You can register multiple callbacks on any request object. The\n * callbacks can be registered for different events, or all for the\n * same event. In addition, you can chain callback registration, for\n * example:\n *\n * ```javascript\n * request.\n *   on('success', function(response) {\n *     console.log(\"Success!\");\n *   }).\n *   on('error', function(response) {\n *     console.log(\"Error!\");\n *   }).\n *   on('complete', function(response) {\n *     console.log(\"Always!\");\n *   }).\n *   send();\n * ```\n *\n * The above example will print either \"Success! Always!\", or \"Error! Always!\",\n * depending on whether the request succeeded or not.\n *\n * @!attribute httpRequest\n *   @readonly\n *   @!group HTTP Properties\n *   @return [AWS.HttpRequest] the raw HTTP request object\n *     containing request headers and body information\n *     sent by the service.\n *\n * @!attribute startTime\n *   @readonly\n *   @!group Operation Properties\n *   @return [Date] the time that the request started\n *\n * @!group Request Building Events\n *\n * @!event validate(request)\n *   Triggered when a request is being validated. Listeners\n *   should throw an error if the request should not be sent.\n *   @param request [Request] the request object being sent\n *   @see AWS.EventListeners.Core.VALIDATE_CREDENTIALS\n *   @see AWS.EventListeners.Core.VALIDATE_REGION\n *   @example Ensuring that a certain parameter is set before sending a request\n *     var req = s3.putObject(params);\n *     req.on('validate', function() {\n *       if (!req.params.Body.match(/^Hello\\s/)) {\n *         throw new Error('Body must start with \"Hello \"');\n *       }\n *     });\n *     req.send(function(err, data) { ... });\n *\n * @!event build(request)\n *   Triggered when the request payload is being built. Listeners\n *   should fill the necessary information to send the request\n *   over HTTP.\n *   @param (see AWS.Request~validate)\n *   @example Add a custom HTTP header to a request\n *     var req = s3.putObject(params);\n *     req.on('build', function() {\n *       req.httpRequest.headers['Custom-Header'] = 'value';\n *     });\n *     req.send(function(err, data) { ... });\n *\n * @!event sign(request)\n *   Triggered when the request is being signed. Listeners should\n *   add the correct authentication headers and/or adjust the body,\n *   depending on the authentication mechanism being used.\n *   @param (see AWS.Request~validate)\n *\n * @!group Request Sending Events\n *\n * @!event send(response)\n *   Triggered when the request is ready to be sent. Listeners\n *   should call the underlying transport layer to initiate\n *   the sending of the request.\n *   @param response [Response] the response object\n *   @context [Request] the request object that was sent\n *   @see AWS.EventListeners.Core.SEND\n *\n * @!event retry(response)\n *   Triggered when a request failed and might need to be retried or redirected.\n *   If the response is retryable, the listener should set the\n *   `response.error.retryable` property to `true`, and optionally set\n *   `response.error.retryCount` to the millisecond delay for the next attempt.\n *   In the case of a redirect, `response.error.redirect` should be set to\n *   `true` with `retryCount` set to an optional delay on the next request.\n *\n *   If a listener decides that a request should not be retried,\n *   it should set both `retryable` and `redirect` to false.\n *\n *   Note that a retryable error will be retried at most\n *   {AWS.Config.maxRetries} times (based on the service object's config).\n *   Similarly, a request that is redirected will only redirect at most\n *   {AWS.Config.maxRedirects} times.\n *\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *   @example Adding a custom retry for a 404 response\n *     request.on('retry', function(response) {\n *       // this resource is not yet available, wait 10 seconds to get it again\n *       if (response.httpResponse.statusCode === 404 && response.error) {\n *         response.error.retryable = true;   // retry this error\n *         response.error.retryCount = 10000; // wait 10 seconds\n *       }\n *     });\n *\n * @!group Data Parsing Events\n *\n * @!event extractError(response)\n *   Triggered on all non-2xx requests so that listeners can extract\n *   error details from the response body. Listeners to this event\n *   should set the `response.error` property.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!event extractData(response)\n *   Triggered in successful requests to allow listeners to\n *   de-serialize the response body into `response.data`.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!group Completion Events\n *\n * @!event success(response)\n *   Triggered when the request completed successfully.\n *   `response.data` will contain the response data and\n *   `response.error` will be null.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!event error(error, response)\n *   Triggered when an error occurs at any point during the\n *   request. `response.error` will contain details about the error\n *   that occurred. `response.data` will be null.\n *   @param error [Error] the error object containing details about\n *     the error that occurred.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!event complete(response)\n *   Triggered whenever a request cycle completes. `response.error`\n *   should be checked, since the request may have failed.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!group HTTP Events\n *\n * @!event httpHeaders(statusCode, headers, response)\n *   Triggered when headers are sent by the remote server\n *   @param statusCode [Integer] the HTTP response code\n *   @param headers [map<String,String>] the response headers\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!event httpData(chunk, response)\n *   Triggered when data is sent by the remote server\n *   @param chunk [Buffer] the buffer data containing the next data chunk\n *     from the server\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *   @see AWS.EventListeners.Core.HTTP_DATA\n *\n * @!event httpUploadProgress(progress, response)\n *   Triggered when the HTTP request has uploaded more data\n *   @param progress [map] An object containing the `loaded` and `total` bytes\n *     of the request.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *   @note This event will not be emitted in Node.js 0.8.x.\n *\n * @!event httpDownloadProgress(progress, response)\n *   Triggered when the HTTP request has downloaded more data\n *   @param progress [map] An object containing the `loaded` and `total` bytes\n *     of the request.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *   @note This event will not be emitted in Node.js 0.8.x.\n *\n * @!event httpError(error, response)\n *   Triggered when the HTTP request failed\n *   @param error [Error] the error object that was thrown\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!event httpDone(response)\n *   Triggered when the server is finished sending data\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @see AWS.Response\n */\n\nAWS.Request = inherit({\n  /**\n   * Creates a request for an operation on a given service with\n   * a set of input parameters.\n   *\n   * @param service [AWS.Service] the service to perform the operation on\n   * @param operation [String] the operation to perform on the service\n   * @param params [Object] parameters to send to the operation.\n   *   See the operation's documentation for the format of the\n   *   parameters.\n   */\n  constructor: function Request(service, operation, params) {\n    var endpoint = service.endpoint;\n    var region = service.config.region; // global endpoints sign as us-east-1\n\n    if (service.isGlobalEndpoint) region = 'us-east-1';\n    this.service = service;\n    this.operation = operation;\n    this.params = params || {};\n    this.httpRequest = new AWS.HttpRequest(endpoint, region);\n    this.startTime = AWS.util.date.getDate();\n    this.response = new AWS.Response(this);\n    this._asm = new AcceptorStateMachine(fsm.states, 'validate');\n    AWS.SequentialExecutor.call(this);\n    this.emit = this.emitEvent;\n  },\n\n  /**\n   * @!group Sending a Request\n   */\n\n  /**\n   * @overload send(callback = null)\n   *   Sends the request object.\n   *\n   *   @callback callback function(err, data)\n   *     If a callback is supplied, it is called when a response is returned\n   *     from the service.\n   *     @param err [Error] the error object returned from the request.\n   *       Set to `null` if the request is successful.\n   *     @param data [Object] the de-serialized data returned from\n   *       the request. Set to `null` if a request error occurs.\n   *   @example Sending a request with a callback\n   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});\n   *     request.send(function(err, data) { console.log(err, data); });\n   *   @example Sending a request with no callback (using event handlers)\n   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});\n   *     request.on('complete', function(response) { ... }); // register a callback\n   *     request.send();\n   */\n  send: function send(callback) {\n    if (callback) {\n      this.on('complete', function (resp) {\n        callback.call(resp, resp.error, resp.data);\n      });\n    }\n\n    this.runTo();\n    return this.response;\n  },\n  build: function build(callback) {\n    return this.runTo('send', callback);\n  },\n  runTo: function runTo(state, done) {\n    this._asm.runTo(state, done, this);\n\n    return this;\n  },\n\n  /**\n   * Aborts a request, emitting the error and complete events.\n   *\n   * @!macro nobrowser\n   * @example Aborting a request after sending\n   *   var params = {\n   *     Bucket: 'bucket', Key: 'key',\n   *     Body: new Buffer(1024 * 1024 * 5) // 5MB payload\n   *   };\n   *   var request = s3.putObject(params);\n   *   request.send(function (err, data) {\n   *     if (err) console.log(\"Error:\", err.code, err.message);\n   *     else console.log(data);\n   *   });\n   *\n   *   // abort request in 1 second\n   *   setTimeout(request.abort.bind(request), 1000);\n   *\n   *   // prints \"Error: RequestAbortedError Request aborted by user\"\n   * @return [AWS.Request] the same request object, for chaining.\n   * @since v1.4.0\n   */\n  abort: function abort() {\n    this.removeAllListeners('validateResponse');\n    this.removeAllListeners('extractError');\n    this.on('validateResponse', function addAbortedError(resp) {\n      resp.error = AWS.util.error(new Error('Request aborted by user'), {\n        code: 'RequestAbortedError',\n        retryable: false\n      });\n    });\n\n    if (this.httpRequest.stream) {\n      // abort HTTP stream\n      this.httpRequest.stream.abort();\n\n      if (this.httpRequest._abortCallback) {\n        this.httpRequest._abortCallback();\n      } else {\n        this.removeAllListeners('send'); // haven't sent yet, so let's not\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each page of results given a pageable request, calling\n   * the provided callback with each page of data. After all pages have been\n   * retrieved, the callback is called with `null` data.\n   *\n   * @note This operation can generate multiple requests to a service.\n   * @example Iterating over multiple pages of objects in an S3 bucket\n   *   var pages = 1;\n   *   s3.listObjects().eachPage(function(err, data) {\n   *     if (err) return;\n   *     console.log(\"Page\", pages++);\n   *     console.log(data);\n   *   });\n   * @example Iterating over multiple pages with an asynchronous callback\n   *   s3.listObjects(params).eachPage(function(err, data, done) {\n   *     doSomethingAsyncAndOrExpensive(function() {\n   *       // The next page of results isn't fetched until done is called\n   *       done();\n   *     });\n   *   });\n   * @callback callback function(err, data, [doneCallback])\n   *   Called with each page of resulting data from the request. If the\n   *   optional `doneCallback` is provided in the function, it must be called\n   *   when the callback is complete.\n   *\n   *   @param err [Error] an error object, if an error occurred.\n   *   @param data [Object] a single page of response data. If there is no\n   *     more data, this object will be `null`.\n   *   @param doneCallback [Function] an optional done callback. If this\n   *     argument is defined in the function declaration, it should be called\n   *     when the next page is ready to be retrieved. This is useful for\n   *     controlling serial pagination across asynchronous operations.\n   *   @return [Boolean] if the callback returns `false`, pagination will\n   *     stop.\n   *\n   * @see AWS.Request.eachItem\n   * @see AWS.Response.nextPage\n   * @since v1.4.0\n   */\n  eachPage: function eachPage(callback) {\n    // Make all callbacks async-ish\n    callback = AWS.util.fn.makeAsync(callback, 3);\n\n    function wrappedCallback(response) {\n      callback.call(response, response.error, response.data, function (result) {\n        if (result === false) return;\n\n        if (response.hasNextPage()) {\n          response.nextPage().on('complete', wrappedCallback).send();\n        } else {\n          callback.call(response, null, null, AWS.util.fn.noop);\n        }\n      });\n    }\n\n    this.on('complete', wrappedCallback).send();\n  },\n\n  /**\n   * Enumerates over individual items of a request, paging the responses if\n   * necessary.\n   *\n   * @api experimental\n   * @since v1.4.0\n   */\n  eachItem: function eachItem(callback) {\n    function wrappedCallback(err, data) {\n      if (err) return callback(err, null);\n      if (data === null) return callback(null, null);\n      var config = this.request.service.paginationConfig(this.request.operation);\n      var resultKey = config.resultKey;\n      if (Array.isArray(resultKey)) resultKey = resultKey[0];\n      var results = AWS.util.jamespath.query(resultKey, data);\n      AWS.util.arrayEach(results, function (result) {\n        AWS.util.arrayEach(result, function (item) {\n          callback(null, item);\n        });\n      });\n    }\n\n    this.eachPage(wrappedCallback);\n  },\n\n  /**\n   * @return [Boolean] whether the operation can return multiple pages of\n   *   response data.\n   * @api experimental\n   * @see AWS.Response.eachPage\n   * @since v1.4.0\n   */\n  isPageable: function isPageable() {\n    return this.service.paginationConfig(this.operation) ? true : false;\n  },\n\n  /**\n   * Converts the request object into a readable stream that\n   * can be read from or piped into a writable stream.\n   *\n   * @note The data read from a readable stream contains only\n   *   the raw HTTP body contents.\n   * @example Manually reading from a stream\n   *   request.createReadStream().on('data', function(data) {\n   *     console.log(\"Got data:\", data.toString());\n   *   });\n   * @example Piping a request body into a file\n   *   var out = fs.createWriteStream('/path/to/outfile.jpg');\n   *   s3.service.getObject(params).createReadStream().pipe(out);\n   * @return [Stream] the readable stream object that can be piped\n   *   or read from (by registering 'data' event listeners).\n   * @!macro nobrowser\n   */\n  createReadStream: function createReadStream() {\n    var streams = AWS.util.nodeRequire('stream');\n    var req = this;\n    var stream = null;\n    var legacyStreams = false;\n\n    if (AWS.HttpClient.streamsApiVersion === 2) {\n      stream = new streams.Readable();\n\n      stream._read = function () {\n        stream.push('');\n      };\n    } else {\n      stream = new streams.Stream();\n      stream.readable = true;\n    }\n\n    stream.sent = false;\n    stream.on('newListener', function (event) {\n      if (!stream.sent && (event === 'data' || event === 'readable')) {\n        if (event === 'data') legacyStreams = true;\n        stream.sent = true;\n        process.nextTick(function () {\n          req.send(function () {});\n        });\n      }\n    });\n    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {\n      if (statusCode < 300) {\n        this.httpRequest._streaming = true;\n        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);\n        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);\n        req.on('httpError', function streamHttpError(error, resp) {\n          resp.error = error;\n          resp.error.retryable = false;\n        });\n        var httpStream = resp.httpResponse.stream;\n        stream.response = resp;\n\n        stream._read = function () {\n          var data;\n\n          do {\n            data = httpStream.read();\n            if (data) stream.push(data);\n          } while (data);\n\n          stream.push('');\n        };\n\n        var events = ['end', 'error', legacyStreams ? 'data' : 'readable'];\n        AWS.util.arrayEach(events, function (event) {\n          httpStream.on(event, function (arg) {\n            stream.emit(event, arg);\n          });\n        });\n      }\n    });\n    this.on('error', function (err) {\n      stream.emit('error', err);\n    });\n    return stream;\n  },\n\n  /**\n   * @param [Array,Response] args This should be the response object,\n   *   or an array of args to send to the event.\n   * @api private\n   */\n  emitEvent: function emit(eventName, args, done) {\n    if (typeof args === 'function') {\n      done = args;\n      args = null;\n    }\n\n    if (!done) done = this.unhandledErrorCallback;\n    if (!args) args = this.eventParameters(eventName, this.response);\n    var origEmit = AWS.SequentialExecutor.prototype.emit;\n    origEmit.call(this, eventName, args, function (err) {\n      if (err) this.response.error = err;\n      done.call(this, err);\n    });\n  },\n\n  /**\n   * @api private\n   */\n  eventParameters: function eventParameters(eventName) {\n    switch (eventName) {\n      case 'restart':\n      case 'validate':\n      case 'sign':\n      case 'build':\n      case 'afterValidate':\n      case 'afterBuild':\n        return [this];\n\n      case 'error':\n        return [this.response.error, this.response];\n\n      default:\n        return [this.response];\n    }\n  },\n\n  /**\n   * @api private\n   */\n  presign: function presign(expires, callback) {\n    if (!callback && typeof expires === 'function') {\n      callback = expires;\n      expires = null;\n    }\n\n    return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);\n  },\n\n  /**\n   * @api private\n   */\n  toUnauthenticated: function toUnauthenticated() {\n    this.removeListener('validate', AWS.EventListeners.Core.VALIDATE_CREDENTIALS);\n    this.removeListener('sign', AWS.EventListeners.Core.SIGN);\n    return this.toGet();\n  },\n\n  /**\n   * @api private\n   */\n  toGet: function toGet() {\n    if (this.service.api.protocol === 'query') {\n      this.removeListener('build', this.buildAsGet);\n      this.addListener('build', this.buildAsGet);\n    }\n\n    return this;\n  },\n\n  /**\n   * @api private\n   */\n  buildAsGet: function buildAsGet(request) {\n    request.httpRequest.method = 'GET';\n    request.httpRequest.path = '/?' + request.httpRequest.body;\n    request.httpRequest.body = ''; // don't need these headers on a GET request\n\n    delete request.httpRequest.headers['Content-Length'];\n    delete request.httpRequest.headers['Content-Type'];\n  }\n});\nAWS.util.mixin(AWS.Request, AWS.SequentialExecutor);","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/request.js"],"names":["AWS","require","AcceptorStateMachine","inherit","util","hardErrorStates","success","error","complete","isTerminalState","machine","hasOwnProperty","_asm","currentState","fsm","setupStates","transition","err","done","self","emit","nextError","response","e","SequentialExecutor","prototype","unhandledErrorCallback","call","addState","Request","constructor","service","operation","params","endpoint","region","config","isGlobalEndpoint","httpRequest","HttpRequest","startTime","date","getDate","Response","states","emitEvent","send","callback","on","resp","data","runTo","build","state","abort","removeAllListeners","addAbortedError","Error","code","retryable","stream","_abortCallback","eachPage","fn","makeAsync","wrappedCallback","result","hasNextPage","nextPage","noop","eachItem","request","paginationConfig","resultKey","Array","isArray","results","jamespath","query","arrayEach","item","isPageable","createReadStream","streams","nodeRequire","req","legacyStreams","HttpClient","streamsApiVersion","Readable","_read","push","Stream","readable","sent","event","process","nextTick","streamHeaders","statusCode","headers","_streaming","removeListener","EventListeners","Core","HTTP_DATA","HTTP_ERROR","streamHttpError","httpStream","httpResponse","read","events","arg","eventName","args","eventParameters","origEmit","presign","expires","Signers","Presign","sign","toGet","toUnauthenticated","VALIDATE_CREDENTIALS","SIGN","api","protocol","buildAsGet","addListener","method","path","body","mixin"],"mappings":"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","sourcesContent":["var AWS = require('./core');\nvar AcceptorStateMachine = require('./state_machine');\nvar inherit = AWS.util.inherit;\n\nvar hardErrorStates = {success:1, error:1, complete:1};\n\nfunction isTerminalState(machine) {\n  return hardErrorStates.hasOwnProperty(machine._asm.currentState);\n}\n\nvar fsm = new AcceptorStateMachine();\nfsm.setupStates = function() {\n  var transition = function(err, done) {\n    try {\n      var self = this;\n      self.emit(self._asm.currentState, function() {\n        var nextError = self.response.error;\n        if (nextError && nextError !== err && isTerminalState(self)) {\n          throw nextError;\n        }\n\n        done(nextError);\n      });\n\n    } catch (e) {\n      if (e !== err && isTerminalState(self)) {\n        AWS.SequentialExecutor.prototype.unhandledErrorCallback.call(this, e);\n        done();\n      } else {\n        done(e);\n      }\n    }\n  };\n\n  this.addState('validate', 'build', 'error', transition);\n  this.addState('build', 'afterBuild', 'restart', transition);\n  this.addState('afterBuild', 'sign', 'restart', transition);\n  this.addState('sign', 'send', 'retry', transition);\n  this.addState('retry', 'afterRetry', 'afterRetry', transition);\n  this.addState('afterRetry', 'sign', 'error', transition);\n  this.addState('send', 'validateResponse', 'retry', transition);\n  this.addState('validateResponse', 'extractData', 'extractError', transition);\n  this.addState('extractError', 'extractData', 'retry', transition);\n  this.addState('extractData', 'success', 'retry', transition);\n  this.addState('restart', 'build', 'error', transition);\n  this.addState('success', 'complete', 'complete', transition);\n  this.addState('error', 'complete', 'complete', transition);\n  this.addState('complete', null, null, transition);\n};\nfsm.setupStates();\n\n/**\n * ## Asynchronous Requests\n *\n * All requests made through the SDK are asynchronous and use a\n * callback interface. Each service method that kicks off a request\n * returns an `AWS.Request` object that you can use to register\n * callbacks.\n *\n * For example, the following service method returns the request\n * object as \"request\", which can be used to register callbacks:\n *\n * ```javascript\n * // request is an AWS.Request object\n * var request = ec2.describeInstances();\n *\n * // register callbacks on request to retrieve response data\n * request.on('success', function(response) {\n *   console.log(response.data);\n * });\n * ```\n *\n * When a request is ready to be sent, the {send} method should\n * be called:\n *\n * ```javascript\n * request.send();\n * ```\n *\n * ## Removing Default Listeners for Events\n *\n * Request objects are built with default listeners for the various events,\n * depending on the service type. In some cases, you may want to remove\n * some built-in listeners to customize behaviour. Doing this requires\n * access to the built-in listener functions, which are exposed through\n * the {AWS.EventListeners.Core} namespace. For instance, you may\n * want to customize the HTTP handler used when sending a request. In this\n * case, you can remove the built-in listener associated with the 'send'\n * event, the {AWS.EventListeners.Core.SEND} listener and add your own.\n *\n * ## Multiple Callbacks and Chaining\n *\n * You can register multiple callbacks on any request object. The\n * callbacks can be registered for different events, or all for the\n * same event. In addition, you can chain callback registration, for\n * example:\n *\n * ```javascript\n * request.\n *   on('success', function(response) {\n *     console.log(\"Success!\");\n *   }).\n *   on('error', function(response) {\n *     console.log(\"Error!\");\n *   }).\n *   on('complete', function(response) {\n *     console.log(\"Always!\");\n *   }).\n *   send();\n * ```\n *\n * The above example will print either \"Success! Always!\", or \"Error! Always!\",\n * depending on whether the request succeeded or not.\n *\n * @!attribute httpRequest\n *   @readonly\n *   @!group HTTP Properties\n *   @return [AWS.HttpRequest] the raw HTTP request object\n *     containing request headers and body information\n *     sent by the service.\n *\n * @!attribute startTime\n *   @readonly\n *   @!group Operation Properties\n *   @return [Date] the time that the request started\n *\n * @!group Request Building Events\n *\n * @!event validate(request)\n *   Triggered when a request is being validated. Listeners\n *   should throw an error if the request should not be sent.\n *   @param request [Request] the request object being sent\n *   @see AWS.EventListeners.Core.VALIDATE_CREDENTIALS\n *   @see AWS.EventListeners.Core.VALIDATE_REGION\n *   @example Ensuring that a certain parameter is set before sending a request\n *     var req = s3.putObject(params);\n *     req.on('validate', function() {\n *       if (!req.params.Body.match(/^Hello\\s/)) {\n *         throw new Error('Body must start with \"Hello \"');\n *       }\n *     });\n *     req.send(function(err, data) { ... });\n *\n * @!event build(request)\n *   Triggered when the request payload is being built. Listeners\n *   should fill the necessary information to send the request\n *   over HTTP.\n *   @param (see AWS.Request~validate)\n *   @example Add a custom HTTP header to a request\n *     var req = s3.putObject(params);\n *     req.on('build', function() {\n *       req.httpRequest.headers['Custom-Header'] = 'value';\n *     });\n *     req.send(function(err, data) { ... });\n *\n * @!event sign(request)\n *   Triggered when the request is being signed. Listeners should\n *   add the correct authentication headers and/or adjust the body,\n *   depending on the authentication mechanism being used.\n *   @param (see AWS.Request~validate)\n *\n * @!group Request Sending Events\n *\n * @!event send(response)\n *   Triggered when the request is ready to be sent. Listeners\n *   should call the underlying transport layer to initiate\n *   the sending of the request.\n *   @param response [Response] the response object\n *   @context [Request] the request object that was sent\n *   @see AWS.EventListeners.Core.SEND\n *\n * @!event retry(response)\n *   Triggered when a request failed and might need to be retried or redirected.\n *   If the response is retryable, the listener should set the\n *   `response.error.retryable` property to `true`, and optionally set\n *   `response.error.retryCount` to the millisecond delay for the next attempt.\n *   In the case of a redirect, `response.error.redirect` should be set to\n *   `true` with `retryCount` set to an optional delay on the next request.\n *\n *   If a listener decides that a request should not be retried,\n *   it should set both `retryable` and `redirect` to false.\n *\n *   Note that a retryable error will be retried at most\n *   {AWS.Config.maxRetries} times (based on the service object's config).\n *   Similarly, a request that is redirected will only redirect at most\n *   {AWS.Config.maxRedirects} times.\n *\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *   @example Adding a custom retry for a 404 response\n *     request.on('retry', function(response) {\n *       // this resource is not yet available, wait 10 seconds to get it again\n *       if (response.httpResponse.statusCode === 404 && response.error) {\n *         response.error.retryable = true;   // retry this error\n *         response.error.retryCount = 10000; // wait 10 seconds\n *       }\n *     });\n *\n * @!group Data Parsing Events\n *\n * @!event extractError(response)\n *   Triggered on all non-2xx requests so that listeners can extract\n *   error details from the response body. Listeners to this event\n *   should set the `response.error` property.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!event extractData(response)\n *   Triggered in successful requests to allow listeners to\n *   de-serialize the response body into `response.data`.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!group Completion Events\n *\n * @!event success(response)\n *   Triggered when the request completed successfully.\n *   `response.data` will contain the response data and\n *   `response.error` will be null.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!event error(error, response)\n *   Triggered when an error occurs at any point during the\n *   request. `response.error` will contain details about the error\n *   that occurred. `response.data` will be null.\n *   @param error [Error] the error object containing details about\n *     the error that occurred.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!event complete(response)\n *   Triggered whenever a request cycle completes. `response.error`\n *   should be checked, since the request may have failed.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!group HTTP Events\n *\n * @!event httpHeaders(statusCode, headers, response)\n *   Triggered when headers are sent by the remote server\n *   @param statusCode [Integer] the HTTP response code\n *   @param headers [map<String,String>] the response headers\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!event httpData(chunk, response)\n *   Triggered when data is sent by the remote server\n *   @param chunk [Buffer] the buffer data containing the next data chunk\n *     from the server\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *   @see AWS.EventListeners.Core.HTTP_DATA\n *\n * @!event httpUploadProgress(progress, response)\n *   Triggered when the HTTP request has uploaded more data\n *   @param progress [map] An object containing the `loaded` and `total` bytes\n *     of the request.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *   @note This event will not be emitted in Node.js 0.8.x.\n *\n * @!event httpDownloadProgress(progress, response)\n *   Triggered when the HTTP request has downloaded more data\n *   @param progress [map] An object containing the `loaded` and `total` bytes\n *     of the request.\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *   @note This event will not be emitted in Node.js 0.8.x.\n *\n * @!event httpError(error, response)\n *   Triggered when the HTTP request failed\n *   @param error [Error] the error object that was thrown\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @!event httpDone(response)\n *   Triggered when the server is finished sending data\n *   @param (see AWS.Request~send)\n *   @context (see AWS.Request~send)\n *\n * @see AWS.Response\n */\nAWS.Request = inherit({\n\n  /**\n   * Creates a request for an operation on a given service with\n   * a set of input parameters.\n   *\n   * @param service [AWS.Service] the service to perform the operation on\n   * @param operation [String] the operation to perform on the service\n   * @param params [Object] parameters to send to the operation.\n   *   See the operation's documentation for the format of the\n   *   parameters.\n   */\n  constructor: function Request(service, operation, params) {\n    var endpoint = service.endpoint;\n    var region = service.config.region;\n\n    // global endpoints sign as us-east-1\n    if (service.isGlobalEndpoint) region = 'us-east-1';\n\n    this.service = service;\n    this.operation = operation;\n    this.params = params || {};\n    this.httpRequest = new AWS.HttpRequest(endpoint, region);\n    this.startTime = AWS.util.date.getDate();\n\n    this.response = new AWS.Response(this);\n    this._asm = new AcceptorStateMachine(fsm.states, 'validate');\n\n    AWS.SequentialExecutor.call(this);\n    this.emit = this.emitEvent;\n  },\n\n  /**\n   * @!group Sending a Request\n   */\n\n  /**\n   * @overload send(callback = null)\n   *   Sends the request object.\n   *\n   *   @callback callback function(err, data)\n   *     If a callback is supplied, it is called when a response is returned\n   *     from the service.\n   *     @param err [Error] the error object returned from the request.\n   *       Set to `null` if the request is successful.\n   *     @param data [Object] the de-serialized data returned from\n   *       the request. Set to `null` if a request error occurs.\n   *   @example Sending a request with a callback\n   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});\n   *     request.send(function(err, data) { console.log(err, data); });\n   *   @example Sending a request with no callback (using event handlers)\n   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});\n   *     request.on('complete', function(response) { ... }); // register a callback\n   *     request.send();\n   */\n  send: function send(callback) {\n    if (callback) {\n      this.on('complete', function (resp) {\n        callback.call(resp, resp.error, resp.data);\n      });\n    }\n    this.runTo();\n\n    return this.response;\n  },\n\n  build: function build(callback) {\n    return this.runTo('send', callback);\n  },\n\n  runTo: function runTo(state, done) {\n    this._asm.runTo(state, done, this);\n    return this;\n  },\n\n  /**\n   * Aborts a request, emitting the error and complete events.\n   *\n   * @!macro nobrowser\n   * @example Aborting a request after sending\n   *   var params = {\n   *     Bucket: 'bucket', Key: 'key',\n   *     Body: new Buffer(1024 * 1024 * 5) // 5MB payload\n   *   };\n   *   var request = s3.putObject(params);\n   *   request.send(function (err, data) {\n   *     if (err) console.log(\"Error:\", err.code, err.message);\n   *     else console.log(data);\n   *   });\n   *\n   *   // abort request in 1 second\n   *   setTimeout(request.abort.bind(request), 1000);\n   *\n   *   // prints \"Error: RequestAbortedError Request aborted by user\"\n   * @return [AWS.Request] the same request object, for chaining.\n   * @since v1.4.0\n   */\n  abort: function abort() {\n    this.removeAllListeners('validateResponse');\n    this.removeAllListeners('extractError');\n    this.on('validateResponse', function addAbortedError(resp) {\n      resp.error = AWS.util.error(new Error('Request aborted by user'), {\n         code: 'RequestAbortedError', retryable: false\n      });\n    });\n\n    if (this.httpRequest.stream) { // abort HTTP stream\n      this.httpRequest.stream.abort();\n      if (this.httpRequest._abortCallback) {\n         this.httpRequest._abortCallback();\n      } else {\n        this.removeAllListeners('send'); // haven't sent yet, so let's not\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Iterates over each page of results given a pageable request, calling\n   * the provided callback with each page of data. After all pages have been\n   * retrieved, the callback is called with `null` data.\n   *\n   * @note This operation can generate multiple requests to a service.\n   * @example Iterating over multiple pages of objects in an S3 bucket\n   *   var pages = 1;\n   *   s3.listObjects().eachPage(function(err, data) {\n   *     if (err) return;\n   *     console.log(\"Page\", pages++);\n   *     console.log(data);\n   *   });\n   * @example Iterating over multiple pages with an asynchronous callback\n   *   s3.listObjects(params).eachPage(function(err, data, done) {\n   *     doSomethingAsyncAndOrExpensive(function() {\n   *       // The next page of results isn't fetched until done is called\n   *       done();\n   *     });\n   *   });\n   * @callback callback function(err, data, [doneCallback])\n   *   Called with each page of resulting data from the request. If the\n   *   optional `doneCallback` is provided in the function, it must be called\n   *   when the callback is complete.\n   *\n   *   @param err [Error] an error object, if an error occurred.\n   *   @param data [Object] a single page of response data. If there is no\n   *     more data, this object will be `null`.\n   *   @param doneCallback [Function] an optional done callback. If this\n   *     argument is defined in the function declaration, it should be called\n   *     when the next page is ready to be retrieved. This is useful for\n   *     controlling serial pagination across asynchronous operations.\n   *   @return [Boolean] if the callback returns `false`, pagination will\n   *     stop.\n   *\n   * @see AWS.Request.eachItem\n   * @see AWS.Response.nextPage\n   * @since v1.4.0\n   */\n  eachPage: function eachPage(callback) {\n    // Make all callbacks async-ish\n    callback = AWS.util.fn.makeAsync(callback, 3);\n\n    function wrappedCallback(response) {\n      callback.call(response, response.error, response.data, function (result) {\n        if (result === false) return;\n\n        if (response.hasNextPage()) {\n          response.nextPage().on('complete', wrappedCallback).send();\n        } else {\n          callback.call(response, null, null, AWS.util.fn.noop);\n        }\n      });\n    }\n\n    this.on('complete', wrappedCallback).send();\n  },\n\n  /**\n   * Enumerates over individual items of a request, paging the responses if\n   * necessary.\n   *\n   * @api experimental\n   * @since v1.4.0\n   */\n  eachItem: function eachItem(callback) {\n    function wrappedCallback(err, data) {\n      if (err) return callback(err, null);\n      if (data === null) return callback(null, null);\n\n      var config = this.request.service.paginationConfig(this.request.operation);\n      var resultKey = config.resultKey;\n      if (Array.isArray(resultKey)) resultKey = resultKey[0];\n      var results = AWS.util.jamespath.query(resultKey, data);\n      AWS.util.arrayEach(results, function(result) {\n        AWS.util.arrayEach(result, function(item) { callback(null, item); });\n      });\n    }\n\n    this.eachPage(wrappedCallback);\n  },\n\n  /**\n   * @return [Boolean] whether the operation can return multiple pages of\n   *   response data.\n   * @api experimental\n   * @see AWS.Response.eachPage\n   * @since v1.4.0\n   */\n  isPageable: function isPageable() {\n    return this.service.paginationConfig(this.operation) ? true : false;\n  },\n\n  /**\n   * Converts the request object into a readable stream that\n   * can be read from or piped into a writable stream.\n   *\n   * @note The data read from a readable stream contains only\n   *   the raw HTTP body contents.\n   * @example Manually reading from a stream\n   *   request.createReadStream().on('data', function(data) {\n   *     console.log(\"Got data:\", data.toString());\n   *   });\n   * @example Piping a request body into a file\n   *   var out = fs.createWriteStream('/path/to/outfile.jpg');\n   *   s3.service.getObject(params).createReadStream().pipe(out);\n   * @return [Stream] the readable stream object that can be piped\n   *   or read from (by registering 'data' event listeners).\n   * @!macro nobrowser\n   */\n  createReadStream: function createReadStream() {\n    var streams = AWS.util.nodeRequire('stream');\n    var req = this;\n    var stream = null;\n    var legacyStreams = false;\n\n    if (AWS.HttpClient.streamsApiVersion === 2) {\n      stream = new streams.Readable();\n      stream._read = function() { stream.push(''); };\n    } else {\n      stream = new streams.Stream();\n      stream.readable = true;\n    }\n\n    stream.sent = false;\n    stream.on('newListener', function(event) {\n      if (!stream.sent && (event === 'data' || event === 'readable')) {\n        if (event === 'data') legacyStreams = true;\n        stream.sent = true;\n        process.nextTick(function() { req.send(function() { }); });\n      }\n    });\n\n    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {\n      if (statusCode < 300) {\n        this.httpRequest._streaming = true;\n\n        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);\n        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);\n        req.on('httpError', function streamHttpError(error, resp) {\n          resp.error = error;\n          resp.error.retryable = false;\n        });\n\n        var httpStream = resp.httpResponse.stream;\n        stream.response = resp;\n        stream._read = function() {\n          var data;\n          do {\n            data = httpStream.read();\n            if (data) stream.push(data);\n          } while (data);\n          stream.push('');\n        };\n\n        var events = ['end', 'error', (legacyStreams ? 'data' : 'readable')];\n        AWS.util.arrayEach(events, function(event) {\n          httpStream.on(event, function(arg) {\n            stream.emit(event, arg);\n          });\n        });\n      }\n    });\n\n    this.on('error', function(err) {\n      stream.emit('error', err);\n    });\n\n    return stream;\n  },\n\n  /**\n   * @param [Array,Response] args This should be the response object,\n   *   or an array of args to send to the event.\n   * @api private\n   */\n  emitEvent: function emit(eventName, args, done) {\n    if (typeof args === 'function') { done = args; args = null; }\n    if (!done) done = this.unhandledErrorCallback;\n    if (!args) args = this.eventParameters(eventName, this.response);\n\n    var origEmit = AWS.SequentialExecutor.prototype.emit;\n    origEmit.call(this, eventName, args, function (err) {\n      if (err) this.response.error = err;\n      done.call(this, err);\n    });\n  },\n\n  /**\n   * @api private\n   */\n  eventParameters: function eventParameters(eventName) {\n    switch (eventName) {\n      case 'restart':\n      case 'validate':\n      case 'sign':\n      case 'build':\n      case 'afterValidate':\n      case 'afterBuild':\n        return [this];\n      case 'error':\n        return [this.response.error, this.response];\n      default:\n        return [this.response];\n    }\n  },\n\n  /**\n   * @api private\n   */\n  presign: function presign(expires, callback) {\n    if (!callback && typeof expires === 'function') {\n      callback = expires;\n      expires = null;\n    }\n    return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);\n  },\n\n  /**\n   * @api private\n   */\n  toUnauthenticated: function toUnauthenticated() {\n    this.removeListener('validate', AWS.EventListeners.Core.VALIDATE_CREDENTIALS);\n    this.removeListener('sign', AWS.EventListeners.Core.SIGN);\n    return this.toGet();\n  },\n\n  /**\n   * @api private\n   */\n  toGet: function toGet() {\n    if (this.service.api.protocol === 'query') {\n      this.removeListener('build', this.buildAsGet);\n      this.addListener('build', this.buildAsGet);\n    }\n    return this;\n  },\n\n  /**\n   * @api private\n   */\n  buildAsGet: function buildAsGet(request) {\n    request.httpRequest.method = 'GET';\n    request.httpRequest.path = '/?' + request.httpRequest.body;\n    request.httpRequest.body = '';\n\n    // don't need these headers on a GET request\n    delete request.httpRequest.headers['Content-Length'];\n    delete request.httpRequest.headers['Content-Type'];\n  }\n});\n\nAWS.util.mixin(AWS.Request, AWS.SequentialExecutor);\n"]},"metadata":{},"sourceType":"script"}
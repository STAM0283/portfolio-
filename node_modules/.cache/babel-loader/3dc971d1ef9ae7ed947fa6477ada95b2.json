{"ast":null,"code":"var AWS = require('./core');\n\nvar SequentialExecutor = require('./sequential_executor');\n/**\n * The namespace used to register global event listeners for request building\n * and sending.\n */\n\n\nAWS.EventListeners = {\n  /**\n   * @!attribute VALIDATE_CREDENTIALS\n   *   A request listener that validates whether the request is being\n   *   sent with credentials.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating credentials\n   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_REGION\n   *   A request listener that validates whether the region is set\n   *   for a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating region configuration\n   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_PARAMETERS\n   *   A request listener that validates input parameters in a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating parameters\n   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;\n   *     request.removeListener('validate', listener);\n   *   @example Disable parameter validation globally\n   *     AWS.EventListeners.Core.removeListener('validate',\n   *       AWS.EventListeners.Core.VALIDATE_REGION);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute SEND\n   *   A request listener that initiates the HTTP connection for a\n   *   request being sent. Handles the {AWS.Request~send 'send' Request event}\n   *   @example Replacing the HTTP handler\n   *     var listener = AWS.EventListeners.Core.SEND;\n   *     request.removeListener('send', listener);\n   *     request.on('send', function(response) {\n   *       customHandler.send(response);\n   *     });\n   *   @return [Function]\n   *   @readonly\n   * @!attribute HTTP_DATA\n   *   A request listener that reads data from the HTTP connection in order\n   *   to build the response data.\n   *   Handles the {AWS.Request~httpData 'httpData' Request event}.\n   *   Remove this handler if you are overriding the 'httpData' event and\n   *   do not want extra data processing and buffering overhead.\n   *   @example Disabling default data processing\n   *     var listener = AWS.EventListeners.Core.HTTP_DATA;\n   *     request.removeListener('httpData', listener);\n   *   @return [Function]\n   *   @readonly\n   */\n  Core: {}\n  /* doc hack */\n\n};\nAWS.EventListeners = {\n  Core: new SequentialExecutor().addNamedListeners(function (add, addAsync) {\n    addAsync('VALIDATE_CREDENTIALS', 'validate', function VALIDATE_CREDENTIALS(req, done) {\n      if (!req.service.api.signatureVersion) return done(); // none\n\n      req.service.config.getCredentials(function (err) {\n        if (err) {\n          req.response.err = AWS.util.error(err, {\n            code: 'SigningError',\n            message: 'Missing credentials in config'\n          });\n        }\n\n        done();\n      });\n    });\n    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {\n      if (!req.service.config.region && !req.service.isGlobalEndpoint) {\n        req.response.error = AWS.util.error(new Error(), {\n          code: 'SigningError',\n          message: 'Missing region in config'\n        });\n      }\n    });\n    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {\n      var rules = req.service.api.operations[req.operation].input;\n      new AWS.ParamValidator().validate(rules, req.params);\n    });\n    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {\n      if (req.httpRequest.headers['Content-Length'] === undefined) {\n        var length = AWS.util.string.byteLength(req.httpRequest.body);\n        req.httpRequest.headers['Content-Length'] = length;\n      }\n    });\n    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {\n      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;\n    });\n    add('RESTART', 'restart', function RESTART(req) {\n      var err = this.response.error;\n      if (!err || !err.retryable) return;\n\n      if (this.response.retryCount < this.service.config.maxRetries) {\n        this.response.retryCount++;\n      } else {\n        this.response.error = null;\n      }\n    });\n    addAsync('SIGN', 'sign', function SIGN(req, done) {\n      if (!req.service.api.signatureVersion) return done(); // none\n\n      req.service.config.getCredentials(function (err, credentials) {\n        if (err) {\n          req.response.error = err;\n          return done();\n        }\n\n        try {\n          var date = AWS.util.date.getDate();\n          var SignerClass = req.service.getSignerClass(req);\n          var signer = new SignerClass(req.httpRequest, req.service.api.signingName || req.service.api.endpointPrefix); // clear old authorization headers\n\n          delete req.httpRequest.headers['Authorization'];\n          delete req.httpRequest.headers['Date'];\n          delete req.httpRequest.headers['X-Amz-Date']; // add new authorization\n\n          signer.addAuthorization(credentials, date);\n          req.signedAt = date;\n        } catch (e) {\n          req.response.error = e;\n        }\n\n        done();\n      });\n    });\n    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {\n      if (this.service.successfulResponse(resp, this)) {\n        resp.data = {};\n        resp.error = null;\n      } else {\n        resp.data = null;\n        resp.error = AWS.util.error(new Error(), {\n          code: 'UnknownError',\n          message: 'An unknown error occurred.'\n        });\n      }\n    });\n    addAsync('SEND', 'send', function SEND(resp, done) {\n      resp.httpResponse._abortCallback = done;\n      resp.error = null;\n      resp.data = null;\n\n      function callback(httpResp) {\n        resp.httpResponse.stream = httpResp;\n        httpResp.on('headers', function onHeaders(statusCode, headers) {\n          resp.request.emit('httpHeaders', [statusCode, headers, resp]);\n\n          if (!resp.request.httpRequest._streaming) {\n            if (AWS.HttpClient.streamsApiVersion === 2) {\n              // streams2 API check\n              httpResp.on('readable', function onReadable() {\n                var data = httpResp.read();\n\n                if (data !== null) {\n                  resp.request.emit('httpData', [data, resp]);\n                }\n              });\n            } else {\n              // legacy streams API\n              httpResp.on('data', function onData(data) {\n                resp.request.emit('httpData', [data, resp]);\n              });\n            }\n          }\n        });\n        httpResp.on('end', function onEnd() {\n          resp.request.emit('httpDone');\n          done();\n        });\n      }\n\n      function progress(httpResp) {\n        httpResp.on('sendProgress', function onSendProgress(progress) {\n          resp.request.emit('httpUploadProgress', [progress, resp]);\n        });\n        httpResp.on('receiveProgress', function onReceiveProgress(progress) {\n          resp.request.emit('httpDownloadProgress', [progress, resp]);\n        });\n      }\n\n      function error(err) {\n        resp.error = AWS.util.error(err, {\n          code: 'NetworkingError',\n          region: resp.request.httpRequest.region,\n          hostname: resp.request.httpRequest.endpoint.hostname,\n          retryable: true\n        });\n        resp.request.emit('httpError', [resp.error, resp], function () {\n          done();\n        });\n      }\n\n      function executeSend() {\n        var http = AWS.HttpClient.getInstance();\n        var httpOptions = resp.request.service.config.httpOptions || {};\n        var stream = http.handleRequest(resp.request.httpRequest, httpOptions, callback, error);\n        progress(stream);\n      }\n\n      var timeDiff = (AWS.util.date.getDate() - this.signedAt) / 1000;\n\n      if (timeDiff >= 60 * 10) {\n        // if we signed 10min ago, re-sign\n        this.emit('sign', [this], function (err) {\n          if (err) done(err);else executeSend();\n        });\n      } else {\n        executeSend();\n      }\n    });\n    add('HTTP_HEADERS', 'httpHeaders', function HTTP_HEADERS(statusCode, headers, resp) {\n      resp.httpResponse.statusCode = statusCode;\n      resp.httpResponse.headers = headers;\n      resp.httpResponse.body = new AWS.util.Buffer('');\n      resp.httpResponse.buffers = [];\n      resp.httpResponse.numBytes = 0;\n    });\n    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {\n      if (chunk) {\n        if (AWS.util.isNode()) {\n          resp.httpResponse.numBytes += chunk.length;\n          var total = resp.httpResponse.headers['content-length'];\n          var progress = {\n            loaded: resp.httpResponse.numBytes,\n            total: total\n          };\n          resp.request.emit('httpDownloadProgress', [progress, resp]);\n        }\n\n        resp.httpResponse.buffers.push(new AWS.util.Buffer(chunk));\n      }\n    });\n    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {\n      // convert buffers array into single buffer\n      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {\n        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);\n        resp.httpResponse.body = body;\n      }\n\n      delete resp.httpResponse.numBytes;\n      delete resp.httpResponse.buffers;\n    });\n    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {\n      if (resp.httpResponse.statusCode) {\n        resp.error.statusCode = resp.httpResponse.statusCode;\n\n        if (resp.error.retryable === undefined) {\n          resp.error.retryable = this.service.retryableError(resp.error, this);\n        }\n      }\n    });\n    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {\n      if (!resp.error) return;\n\n      switch (resp.error.code) {\n        case 'RequestExpired': // EC2 only\n\n        case 'ExpiredTokenException':\n        case 'ExpiredToken':\n          resp.error.retryable = true;\n          resp.request.service.config.credentials.expired = true;\n      }\n    });\n    add('REDIRECT', 'retry', function REDIRECT(resp) {\n      if (resp.error && resp.error.statusCode >= 300 && resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {\n        this.httpRequest.endpoint = new AWS.Endpoint(resp.httpResponse.headers['location']);\n        resp.error.redirect = true;\n        resp.error.retryable = true;\n      }\n    });\n    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {\n      if (resp.error) {\n        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.error.retryDelay = 0;\n        } else if (resp.error.retryable && resp.retryCount < resp.maxRetries) {\n          var delays = this.service.retryDelays();\n          resp.error.retryDelay = delays[resp.retryCount] || 0;\n        }\n      }\n    });\n    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {\n      var delay,\n          willRetry = false;\n\n      if (resp.error) {\n        delay = resp.error.retryDelay || 0;\n\n        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {\n          resp.retryCount++;\n          willRetry = true;\n        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.redirectCount++;\n          willRetry = true;\n        }\n      }\n\n      if (willRetry) {\n        resp.error = null;\n        setTimeout(done, delay);\n      } else {\n        done();\n      }\n    });\n  }),\n  CorePost: new SequentialExecutor().addNamedListeners(function (add) {\n    add('EXTRACT_REQUEST_ID', 'extractData', function EXTRACT_REQUEST_ID(resp) {\n      resp.requestId = resp.httpResponse.headers['x-amz-request-id'] || resp.httpResponse.headers['x-amzn-requestid'];\n\n      if (!resp.requestId && resp.data && resp.data.ResponseMetadata) {\n        resp.requestId = resp.data.ResponseMetadata.RequestId;\n      }\n    });\n  }),\n  Logger: new SequentialExecutor().addNamedListeners(function (add) {\n    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {\n      var req = resp.request;\n      var logger = req.service.config.logger;\n      if (!logger) return;\n\n      function buildMessage() {\n        var time = AWS.util.date.getDate().getTime();\n        var delta = (time - req.startTime.getTime()) / 1000;\n        var ansi = logger.isTTY ? true : false;\n        var status = resp.httpResponse.statusCode;\n\n        var params = require('util').inspect(req.params, true, true);\n\n        var message = '';\n        if (ansi) message += '\\x1B[33m';\n        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;\n        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';\n        if (ansi) message += '\\x1B[0;1m';\n        message += ' ' + AWS.util.string.lowerFirst(req.operation);\n        message += '(' + params + ')';\n        if (ansi) message += '\\x1B[0m';\n        return message;\n      }\n\n      var line = buildMessage();\n\n      if (typeof logger.log === 'function') {\n        logger.log(line);\n      } else if (typeof logger.write === 'function') {\n        logger.write(line + '\\n');\n      }\n    });\n  }),\n  Json: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/json');\n\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  Rest: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/rest');\n\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  RestJson: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/rest_json');\n\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  RestXml: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/rest_xml');\n\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  Query: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/query');\n\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  })\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/event_listeners.js"],"names":["AWS","require","SequentialExecutor","EventListeners","Core","addNamedListeners","add","addAsync","VALIDATE_CREDENTIALS","req","done","service","api","signatureVersion","config","getCredentials","err","response","util","error","code","message","VALIDATE_REGION","region","isGlobalEndpoint","Error","VALIDATE_PARAMETERS","rules","operations","operation","input","ParamValidator","validate","params","SET_CONTENT_LENGTH","httpRequest","headers","undefined","length","string","byteLength","body","SET_HTTP_HOST","endpoint","host","RESTART","retryable","retryCount","maxRetries","SIGN","credentials","date","getDate","SignerClass","getSignerClass","signer","signingName","endpointPrefix","addAuthorization","signedAt","e","VALIDATE_RESPONSE","resp","successfulResponse","data","SEND","httpResponse","_abortCallback","callback","httpResp","stream","on","onHeaders","statusCode","request","emit","_streaming","HttpClient","streamsApiVersion","onReadable","read","onData","onEnd","progress","onSendProgress","onReceiveProgress","hostname","executeSend","http","getInstance","httpOptions","handleRequest","timeDiff","HTTP_HEADERS","Buffer","buffers","numBytes","HTTP_DATA","chunk","isNode","total","loaded","push","HTTP_DONE","buffer","concat","FINALIZE_ERROR","retryableError","INVALIDATE_CREDENTIALS","expired","REDIRECT","Endpoint","redirect","RETRY_CHECK","redirectCount","maxRedirects","retryDelay","delays","retryDelays","RESET_RETRY_STATE","delay","willRetry","setTimeout","CorePost","EXTRACT_REQUEST_ID","requestId","ResponseMetadata","RequestId","Logger","LOG_REQUEST","logger","buildMessage","time","getTime","delta","startTime","ansi","isTTY","status","inspect","serviceIdentifier","toString","lowerFirst","line","log","write","Json","svc","buildRequest","extractData","extractError","Rest","RestJson","RestXml","Query"],"mappings":"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","sourcesContent":["var AWS = require('./core');\nvar SequentialExecutor = require('./sequential_executor');\n\n/**\n * The namespace used to register global event listeners for request building\n * and sending.\n */\nAWS.EventListeners = {\n  /**\n   * @!attribute VALIDATE_CREDENTIALS\n   *   A request listener that validates whether the request is being\n   *   sent with credentials.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating credentials\n   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_REGION\n   *   A request listener that validates whether the region is set\n   *   for a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating region configuration\n   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_PARAMETERS\n   *   A request listener that validates input parameters in a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating parameters\n   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;\n   *     request.removeListener('validate', listener);\n   *   @example Disable parameter validation globally\n   *     AWS.EventListeners.Core.removeListener('validate',\n   *       AWS.EventListeners.Core.VALIDATE_REGION);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute SEND\n   *   A request listener that initiates the HTTP connection for a\n   *   request being sent. Handles the {AWS.Request~send 'send' Request event}\n   *   @example Replacing the HTTP handler\n   *     var listener = AWS.EventListeners.Core.SEND;\n   *     request.removeListener('send', listener);\n   *     request.on('send', function(response) {\n   *       customHandler.send(response);\n   *     });\n   *   @return [Function]\n   *   @readonly\n   * @!attribute HTTP_DATA\n   *   A request listener that reads data from the HTTP connection in order\n   *   to build the response data.\n   *   Handles the {AWS.Request~httpData 'httpData' Request event}.\n   *   Remove this handler if you are overriding the 'httpData' event and\n   *   do not want extra data processing and buffering overhead.\n   *   @example Disabling default data processing\n   *     var listener = AWS.EventListeners.Core.HTTP_DATA;\n   *     request.removeListener('httpData', listener);\n   *   @return [Function]\n   *   @readonly\n   */\n  Core: {} /* doc hack */\n};\n\nAWS.EventListeners = {\n  Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {\n    addAsync('VALIDATE_CREDENTIALS', 'validate',\n        function VALIDATE_CREDENTIALS(req, done) {\n      if (!req.service.api.signatureVersion) return done(); // none\n      req.service.config.getCredentials(function(err) {\n        if (err) {\n          req.response.err = AWS.util.error(err,\n            {code: 'SigningError', message: 'Missing credentials in config'});\n        }\n        done();\n      });\n    });\n\n    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {\n      if (!req.service.config.region && !req.service.isGlobalEndpoint) {\n        req.response.error = AWS.util.error(new Error(),\n          {code: 'SigningError', message: 'Missing region in config'});\n      }\n    });\n\n    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {\n      var rules = req.service.api.operations[req.operation].input;\n      new AWS.ParamValidator().validate(rules, req.params);\n    });\n\n    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {\n      if (req.httpRequest.headers['Content-Length'] === undefined) {\n        var length = AWS.util.string.byteLength(req.httpRequest.body);\n        req.httpRequest.headers['Content-Length'] = length;\n      }\n    });\n\n    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {\n      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;\n    });\n\n    add('RESTART', 'restart', function RESTART(req) {\n      var err = this.response.error;\n      if (!err || !err.retryable) return;\n\n      if (this.response.retryCount < this.service.config.maxRetries) {\n        this.response.retryCount++;\n      } else {\n        this.response.error = null;\n      }\n    });\n\n    addAsync('SIGN', 'sign', function SIGN(req, done) {\n      if (!req.service.api.signatureVersion) return done(); // none\n\n      req.service.config.getCredentials(function (err, credentials) {\n        if (err) {\n          req.response.error = err;\n          return done();\n        }\n\n        try {\n          var date = AWS.util.date.getDate();\n          var SignerClass = req.service.getSignerClass(req);\n          var signer = new SignerClass(req.httpRequest,\n            req.service.api.signingName || req.service.api.endpointPrefix);\n\n          // clear old authorization headers\n          delete req.httpRequest.headers['Authorization'];\n          delete req.httpRequest.headers['Date'];\n          delete req.httpRequest.headers['X-Amz-Date'];\n\n          // add new authorization\n          signer.addAuthorization(credentials, date);\n          req.signedAt = date;\n        } catch (e) {\n          req.response.error = e;\n        }\n        done();\n      });\n    });\n\n    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {\n      if (this.service.successfulResponse(resp, this)) {\n        resp.data = {};\n        resp.error = null;\n      } else {\n        resp.data = null;\n        resp.error = AWS.util.error(new Error(),\n          {code: 'UnknownError', message: 'An unknown error occurred.'});\n      }\n    });\n\n    addAsync('SEND', 'send', function SEND(resp, done) {\n      resp.httpResponse._abortCallback = done;\n      resp.error = null;\n      resp.data = null;\n\n      function callback(httpResp) {\n        resp.httpResponse.stream = httpResp;\n\n        httpResp.on('headers', function onHeaders(statusCode, headers) {\n          resp.request.emit('httpHeaders', [statusCode, headers, resp]);\n\n          if (!resp.request.httpRequest._streaming) {\n            if (AWS.HttpClient.streamsApiVersion === 2) { // streams2 API check\n              httpResp.on('readable', function onReadable() {\n                var data = httpResp.read();\n                if (data !== null) {\n                  resp.request.emit('httpData', [data, resp]);\n                }\n              });\n            } else { // legacy streams API\n              httpResp.on('data', function onData(data) {\n                resp.request.emit('httpData', [data, resp]);\n              });\n            }\n          }\n        });\n\n        httpResp.on('end', function onEnd() {\n          resp.request.emit('httpDone');\n          done();\n        });\n      }\n\n      function progress(httpResp) {\n        httpResp.on('sendProgress', function onSendProgress(progress) {\n          resp.request.emit('httpUploadProgress', [progress, resp]);\n        });\n\n        httpResp.on('receiveProgress', function onReceiveProgress(progress) {\n          resp.request.emit('httpDownloadProgress', [progress, resp]);\n        });\n      }\n\n      function error(err) {\n        resp.error = AWS.util.error(err, {\n          code: 'NetworkingError',\n          region: resp.request.httpRequest.region,\n          hostname: resp.request.httpRequest.endpoint.hostname,\n          retryable: true\n        });\n        resp.request.emit('httpError', [resp.error, resp], function() {\n          done();\n        });\n      }\n\n      function executeSend() {\n        var http = AWS.HttpClient.getInstance();\n        var httpOptions = resp.request.service.config.httpOptions || {};\n        var stream = http.handleRequest(resp.request.httpRequest, httpOptions,\n                                        callback, error);\n        progress(stream);\n      }\n\n      var timeDiff = (AWS.util.date.getDate() - this.signedAt) / 1000;\n      if (timeDiff >= 60 * 10) { // if we signed 10min ago, re-sign\n        this.emit('sign', [this], function(err) {\n          if (err) done(err);\n          else executeSend();\n        });\n      } else {\n        executeSend();\n      }\n    });\n\n    add('HTTP_HEADERS', 'httpHeaders',\n        function HTTP_HEADERS(statusCode, headers, resp) {\n      resp.httpResponse.statusCode = statusCode;\n      resp.httpResponse.headers = headers;\n      resp.httpResponse.body = new AWS.util.Buffer('');\n      resp.httpResponse.buffers = [];\n      resp.httpResponse.numBytes = 0;\n    });\n\n    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {\n      if (chunk) {\n        if (AWS.util.isNode()) {\n          resp.httpResponse.numBytes += chunk.length;\n\n          var total = resp.httpResponse.headers['content-length'];\n          var progress = { loaded: resp.httpResponse.numBytes, total: total };\n          resp.request.emit('httpDownloadProgress', [progress, resp]);\n        }\n\n        resp.httpResponse.buffers.push(new AWS.util.Buffer(chunk));\n      }\n    });\n\n    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {\n      // convert buffers array into single buffer\n      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {\n        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);\n        resp.httpResponse.body = body;\n      }\n      delete resp.httpResponse.numBytes;\n      delete resp.httpResponse.buffers;\n    });\n\n    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {\n      if (resp.httpResponse.statusCode) {\n        resp.error.statusCode = resp.httpResponse.statusCode;\n        if (resp.error.retryable === undefined) {\n          resp.error.retryable = this.service.retryableError(resp.error, this);\n        }\n      }\n    });\n\n    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {\n      if (!resp.error) return;\n      switch (resp.error.code) {\n        case 'RequestExpired': // EC2 only\n        case 'ExpiredTokenException':\n        case 'ExpiredToken':\n          resp.error.retryable = true;\n          resp.request.service.config.credentials.expired = true;\n      }\n    });\n\n    add('REDIRECT', 'retry', function REDIRECT(resp) {\n      if (resp.error && resp.error.statusCode >= 300 &&\n          resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {\n        this.httpRequest.endpoint =\n          new AWS.Endpoint(resp.httpResponse.headers['location']);\n        resp.error.redirect = true;\n        resp.error.retryable = true;\n      }\n    });\n\n    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {\n      if (resp.error) {\n        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.error.retryDelay = 0;\n        } else if (resp.error.retryable && resp.retryCount < resp.maxRetries) {\n          var delays = this.service.retryDelays();\n          resp.error.retryDelay = delays[resp.retryCount] || 0;\n        }\n      }\n    });\n\n    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {\n      var delay, willRetry = false;\n\n      if (resp.error) {\n        delay = resp.error.retryDelay || 0;\n        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {\n          resp.retryCount++;\n          willRetry = true;\n        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.redirectCount++;\n          willRetry = true;\n        }\n      }\n\n      if (willRetry) {\n        resp.error = null;\n        setTimeout(done, delay);\n      } else {\n        done();\n      }\n    });\n  }),\n\n  CorePost: new SequentialExecutor().addNamedListeners(function(add) {\n    add('EXTRACT_REQUEST_ID', 'extractData', function EXTRACT_REQUEST_ID(resp) {\n      resp.requestId = resp.httpResponse.headers['x-amz-request-id'] ||\n                       resp.httpResponse.headers['x-amzn-requestid'];\n\n      if (!resp.requestId && resp.data && resp.data.ResponseMetadata) {\n        resp.requestId = resp.data.ResponseMetadata.RequestId;\n      }\n    });\n  }),\n\n  Logger: new SequentialExecutor().addNamedListeners(function(add) {\n    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {\n      var req = resp.request;\n      var logger = req.service.config.logger;\n      if (!logger) return;\n\n      function buildMessage() {\n        var time = AWS.util.date.getDate().getTime();\n        var delta = (time - req.startTime.getTime()) / 1000;\n        var ansi = logger.isTTY ? true : false;\n        var status = resp.httpResponse.statusCode;\n        var params = require('util').inspect(req.params, true, true);\n\n        var message = '';\n        if (ansi) message += '\\x1B[33m';\n        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;\n        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';\n        if (ansi) message += '\\x1B[0;1m';\n        message += ' ' + AWS.util.string.lowerFirst(req.operation);\n        message += '(' + params + ')';\n        if (ansi) message += '\\x1B[0m';\n        return message;\n      }\n\n      var line = buildMessage();\n      if (typeof logger.log === 'function') {\n        logger.log(line);\n      } else if (typeof logger.write === 'function') {\n        logger.write(line + '\\n');\n      }\n    });\n  }),\n\n  Json: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/json');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  Rest: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/rest');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  RestJson: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/rest_json');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  RestXml: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/rest_xml');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  Query: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/query');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  })\n};\n"]},"metadata":{},"sourceType":"script"}
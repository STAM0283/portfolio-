{"ast":null,"code":"/**\n * Used to create conditional statements in templates. Accepts most JavaScript valid comparisons.\n *\n * Can be used in conjunction with <a href=\"#elseif\"><code data-language=\"swig\">{% elseif ... %}</code></a> and <a href=\"#else\"><code data-language=\"swig\">{% else %}</code></a> tags.\n *\n * @alias if\n *\n * @example\n * {% if x %}{% endif %}\n * {% if !x %}{% endif %}\n * {% if not x %}{% endif %}\n *\n * @example\n * {% if x and y %}{% endif %}\n * {% if x && y %}{% endif %}\n * {% if x or y %}{% endif %}\n * {% if x || y %}{% endif %}\n * {% if x || (y && z) %}{% endif %}\n *\n * @example\n * {% if x [operator] y %}\n *   Operators: ==, !=, <, <=, >, >=, ===, !==\n * {% endif %}\n *\n * @example\n * {% if x == 'five' %}\n *   The operands can be also be string or number literals\n * {% endif %}\n *\n * @example\n * {% if x|lower === 'tacos' %}\n *   You can use filters on any operand in the statement.\n * {% endif %}\n *\n * @example\n * {% if x in y %}\n *   If x is a value that is present in y, this will return true.\n * {% endif %}\n *\n * @param {...mixed} conditional Conditional statement that returns a truthy or falsy value.\n */\nexports.compile = function (compiler, args, content, parents, options, blockName) {\n  return 'if (' + args.join(' ') + ') { \\n' + compiler(content, parents, options, blockName) + '\\n' + '}';\n};\n\nexports.parse = function (str, line, parser, types) {\n  if (typeof str === \"undefined\") {\n    throw new Error('No conditional statement provided on line ' + line + '.');\n  }\n\n  parser.on(types.COMPARATOR, function (token) {\n    if (this.isLast) {\n      throw new Error('Unexpected logic \"' + token.match + '\" on line ' + line + '.');\n    }\n\n    if (this.prevToken.type === types.NOT) {\n      throw new Error('Attempted logic \"not ' + token.match + '\" on line ' + line + '. Use !(foo ' + token.match + ') instead.');\n    }\n\n    this.out.push(token.match);\n    this.filterApplyIdx.push(this.out.length);\n  });\n  parser.on(types.NOT, function (token) {\n    if (this.isLast) {\n      throw new Error('Unexpected logic \"' + token.match + '\" on line ' + line + '.');\n    }\n\n    this.out.push(token.match);\n  });\n  parser.on(types.BOOL, function (token) {\n    this.out.push(token.match);\n  });\n  parser.on(types.LOGIC, function (token) {\n    if (!this.out.length || this.isLast) {\n      throw new Error('Unexpected logic \"' + token.match + '\" on line ' + line + '.');\n    }\n\n    this.out.push(token.match);\n    this.filterApplyIdx.pop();\n  });\n  return true;\n};\n\nexports.ends = true;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/swig/lib/tags/if.js"],"names":["exports","compile","compiler","args","content","parents","options","blockName","join","parse","str","line","parser","types","Error","on","COMPARATOR","token","isLast","match","prevToken","type","NOT","out","push","filterApplyIdx","length","BOOL","LOGIC","pop","ends"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCAA,OAAO,CAACC,OAAR,GAAkB,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,OAAnC,EAA4CC,OAA5C,EAAqDC,SAArD,EAAgE;AAChF,SAAO,SAASJ,IAAI,CAACK,IAAL,CAAU,GAAV,CAAT,GAA0B,QAA1B,GACLN,QAAQ,CAACE,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,SAA5B,CADH,GAC4C,IAD5C,GAEL,GAFF;AAGD,CAJD;;AAMAP,OAAO,CAACS,KAAR,GAAgB,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,KAA7B,EAAoC;AAClD,MAAI,OAAOH,GAAP,KAAe,WAAnB,EAAgC;AAC9B,UAAM,IAAII,KAAJ,CAAU,+CAA+CH,IAA/C,GAAsD,GAAhE,CAAN;AACD;;AAEDC,EAAAA,MAAM,CAACG,EAAP,CAAUF,KAAK,CAACG,UAAhB,EAA4B,UAAUC,KAAV,EAAiB;AAC3C,QAAI,KAAKC,MAAT,EAAiB;AACf,YAAM,IAAIJ,KAAJ,CAAU,uBAAuBG,KAAK,CAACE,KAA7B,GAAqC,YAArC,GAAoDR,IAApD,GAA2D,GAArE,CAAN;AACD;;AACD,QAAI,KAAKS,SAAL,CAAeC,IAAf,KAAwBR,KAAK,CAACS,GAAlC,EAAuC;AACrC,YAAM,IAAIR,KAAJ,CAAU,0BAA0BG,KAAK,CAACE,KAAhC,GAAwC,YAAxC,GAAuDR,IAAvD,GAA8D,cAA9D,GAA+EM,KAAK,CAACE,KAArF,GAA6F,YAAvG,CAAN;AACD;;AACD,SAAKI,GAAL,CAASC,IAAT,CAAcP,KAAK,CAACE,KAApB;AACA,SAAKM,cAAL,CAAoBD,IAApB,CAAyB,KAAKD,GAAL,CAASG,MAAlC;AACD,GATD;AAWAd,EAAAA,MAAM,CAACG,EAAP,CAAUF,KAAK,CAACS,GAAhB,EAAqB,UAAUL,KAAV,EAAiB;AACpC,QAAI,KAAKC,MAAT,EAAiB;AACf,YAAM,IAAIJ,KAAJ,CAAU,uBAAuBG,KAAK,CAACE,KAA7B,GAAqC,YAArC,GAAoDR,IAApD,GAA2D,GAArE,CAAN;AACD;;AACD,SAAKY,GAAL,CAASC,IAAT,CAAcP,KAAK,CAACE,KAApB;AACD,GALD;AAOAP,EAAAA,MAAM,CAACG,EAAP,CAAUF,KAAK,CAACc,IAAhB,EAAsB,UAAUV,KAAV,EAAiB;AACrC,SAAKM,GAAL,CAASC,IAAT,CAAcP,KAAK,CAACE,KAApB;AACD,GAFD;AAIAP,EAAAA,MAAM,CAACG,EAAP,CAAUF,KAAK,CAACe,KAAhB,EAAuB,UAAUX,KAAV,EAAiB;AACtC,QAAI,CAAC,KAAKM,GAAL,CAASG,MAAV,IAAoB,KAAKR,MAA7B,EAAqC;AACnC,YAAM,IAAIJ,KAAJ,CAAU,uBAAuBG,KAAK,CAACE,KAA7B,GAAqC,YAArC,GAAoDR,IAApD,GAA2D,GAArE,CAAN;AACD;;AACD,SAAKY,GAAL,CAASC,IAAT,CAAcP,KAAK,CAACE,KAApB;AACA,SAAKM,cAAL,CAAoBI,GAApB;AACD,GAND;AAQA,SAAO,IAAP;AACD,CApCD;;AAsCA7B,OAAO,CAAC8B,IAAR,GAAe,IAAf","sourcesContent":["/**\n * Used to create conditional statements in templates. Accepts most JavaScript valid comparisons.\n *\n * Can be used in conjunction with <a href=\"#elseif\"><code data-language=\"swig\">{% elseif ... %}</code></a> and <a href=\"#else\"><code data-language=\"swig\">{% else %}</code></a> tags.\n *\n * @alias if\n *\n * @example\n * {% if x %}{% endif %}\n * {% if !x %}{% endif %}\n * {% if not x %}{% endif %}\n *\n * @example\n * {% if x and y %}{% endif %}\n * {% if x && y %}{% endif %}\n * {% if x or y %}{% endif %}\n * {% if x || y %}{% endif %}\n * {% if x || (y && z) %}{% endif %}\n *\n * @example\n * {% if x [operator] y %}\n *   Operators: ==, !=, <, <=, >, >=, ===, !==\n * {% endif %}\n *\n * @example\n * {% if x == 'five' %}\n *   The operands can be also be string or number literals\n * {% endif %}\n *\n * @example\n * {% if x|lower === 'tacos' %}\n *   You can use filters on any operand in the statement.\n * {% endif %}\n *\n * @example\n * {% if x in y %}\n *   If x is a value that is present in y, this will return true.\n * {% endif %}\n *\n * @param {...mixed} conditional Conditional statement that returns a truthy or falsy value.\n */\nexports.compile = function (compiler, args, content, parents, options, blockName) {\n  return 'if (' + args.join(' ') + ') { \\n' +\n    compiler(content, parents, options, blockName) + '\\n' +\n    '}';\n};\n\nexports.parse = function (str, line, parser, types) {\n  if (typeof str === \"undefined\") {\n    throw new Error('No conditional statement provided on line ' + line + '.');\n  }\n\n  parser.on(types.COMPARATOR, function (token) {\n    if (this.isLast) {\n      throw new Error('Unexpected logic \"' + token.match + '\" on line ' + line + '.');\n    }\n    if (this.prevToken.type === types.NOT) {\n      throw new Error('Attempted logic \"not ' + token.match + '\" on line ' + line + '. Use !(foo ' + token.match + ') instead.');\n    }\n    this.out.push(token.match);\n    this.filterApplyIdx.push(this.out.length);\n  });\n\n  parser.on(types.NOT, function (token) {\n    if (this.isLast) {\n      throw new Error('Unexpected logic \"' + token.match + '\" on line ' + line + '.');\n    }\n    this.out.push(token.match);\n  });\n\n  parser.on(types.BOOL, function (token) {\n    this.out.push(token.match);\n  });\n\n  parser.on(types.LOGIC, function (token) {\n    if (!this.out.length || this.isLast) {\n      throw new Error('Unexpected logic \"' + token.match + '\" on line ' + line + '.');\n    }\n    this.out.push(token.match);\n    this.filterApplyIdx.pop();\n  });\n\n  return true;\n};\n\nexports.ends = true;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar he = require(\"he\"); // expose to the world\n\n\nmodule.exports.stripHTML = stripHTML;\n/**\n * <p>Converts a HTML stringo into plaintext format that resembles Markdown</p>\n *\n * <p>Only good for simple and valid HTML, probably breaks on eveything else</p>\n *\n * <p>Placeholders:</p>\n *\n * <ul>\n *     <li>-\\u0000\\u0000- for newline</li>\n *     <li>-\\u0001\\u0001- for a space</li>\n *     <li>-\\u0002\\u0002- temporary newlines</li>\n * </ul>\n *\n * @param {String} str HTML string to convert\n * @return {String} Plaintext that resembles Markdown\n */\n\nfunction stripHTML(str) {\n  str = (str || \"\").toString(\"utf-8\").trim(); // remove head\n\n  str = str.replace(/<head[\\s\\S]{1,}?\\/head>/gi, ''); // replace newlines\n\n  str = str.replace(/\\r?\\n|\\r/g, \"-\\u0002\\u0002-\"); // convert block element endings to linebreak markers\n\n  str = str.replace(/<(?:\\/p|br\\s*\\/*|\\/tr|\\/table|\\/div)>/g, \"-\\u0000\\u0000--\\u0000\\u0000-\"); // H1-H6, add underline or prepend with #\n\n  str = str.replace(/<[hH](\\d)[^>]*>(.*?)<\\/[hH]\\d[^>]*>/g, function (match, level, content) {\n    var line = \"\",\n        symbol,\n        // line symbol char\n    len;\n    level = Number(level) || 0;\n    content = he.decode(content.replace(/<[^>]*>/g, \" \").replace(/\\s\\s+/g, \" \")).trim();\n\n    if (!content) {\n      // the tag was empty or only included other tags (<img> and such), nothing to show\n      return \"\";\n    } // select correct symbol for the line\n\n\n    switch (level) {\n      case 1:\n        symbol = \"=\";\n        len = content.length;\n        break;\n\n      case 2:\n        symbol = \"-\";\n        len = content.length;\n        break;\n\n      default:\n        symbol = \"#\";\n        len = level;\n    }\n\n    line = new Array(len + 1).join(symbol);\n\n    if (symbol == \"#\") {\n      // prepend the line:\n      // ### This is a H3\n      return line + \" \" + content + \"\\n\\n\";\n    } else {\n      // add underline:\n      // This is a H1\n      // ============\n      return content + \"\\n\" + line + \"\\n\\n\";\n    }\n  }); // B\n\n  str = str.replace(/<(?:b|strong)(?: [^>])?>(.*?)<\\/(?:b|strong)>/ig, function (match, content) {\n    return \"**\" + content.trim() + \"**\";\n  }); // U\n\n  str = str.replace(/<u(?: [^>])?>(.*?)<\\/u>/ig, function (match, content) {\n    return \"_\" + content.trim() + \"_\";\n  }); // EM\n\n  str = str.replace(/<(?:i|em)(?: [^>])?>(.*?)<\\/(?:i|em)>/ig, function (match, content) {\n    return \"*\" + content.trim() + \"*\";\n  }); // CODE\n\n  str = str.replace(/<code(?: [^>])?>(.*?)<\\/code>/ig, function (match, content) {\n    return \"`\" + content.trim() + \"`\";\n  }); // A\n\n  str = str.replace(/<a ([^>]*)>(.*?)<\\/a[^>]*>/ig, function (match, params, content) {\n    var paramMatch = params.match(/href\\s*=\\s*['\"]([^'\"]+)['\"]/),\n        url = paramMatch && paramMatch[1] || \"#\";\n    return \"[\" + content.trim() + \"]\" + \"(\" + url + \")\";\n  }); // UL, replace with newlines\n\n  str = str.replace(/(<\\/(?:ul|ol)>)/gi, \"$1-\\u0000\\u0000--\\u0000\\u0000-\"); // LI, indent by 2 spaces + *\n\n  str = str.replace(/<li[^>]*>(.*?)<\\/?(?:li|ol|ul)[^>]*>/ig, function (match, content) {\n    content = content.replace(/<[^>]*>/g, \" \").replace(/\\s\\s+/g, \" \").trim();\n\n    if (!content) {\n      // the tag was empty or only included other tags (<img> and such), nothing to show\n      return \"\";\n    } // return with the space placeholders\n\n\n    return \"-\\u0001\\u0001--\\u0001\\u0001-* \" + content + \"\\n\";\n  }); // PRE, indent by 4 spaces\n\n  str = str.replace(/<pre[^>]*>(.*?)<\\/pre[^>]*>/ig, function (match, content) {\n    if (!content) {\n      return \"\";\n    } // remove empty lines before and after\n\n\n    content = content.replace(/^((?:[ \\t]*)\\-\\u0002\\u0002\\-)+|((?:\\-\\u0002\\u0002\\-[ \\t]*))+$/g, \"\"); // replace tabs with 4 spaces\n\n    content = content.replace(/\\t/g, \"    \"); // replace temp. linebreak placeholders with 4 space placehorlders\n\n    content = content.replace(/\\-\\u0002\\u0002\\-([ ]*)/g, function (match, spaces) {\n      // keep spaces in the beginning of the lines\n      spaces = spaces.replace(/ /g, \"-\\u0001\\u0001-\");\n      return \"\\n-\\u0001\\u0001--\\u0001\\u0001--\\u0001\\u0001--\\u0001\\u0001-\" + spaces;\n    });\n    content = content.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\"); // add prepending 4 spaces\n\n    return \"\\n-\\u0001\\u0001--\\u0001\\u0001--\\u0001\\u0001--\\u0001\\u0001-\" + content.trim() + \"\\n\\n\";\n  }); // remove all remaining html tags\n\n  str = str.replace(/<[^>]*>/g, \" \"); // remove duplicate spaces\n\n  str = str.replace(/[ ][ ]+/g, \" \"); // remove temp. newlines\n\n  str = str.replace(/-\\u0002\\u0002-/g, \" \"); // restore newlines\n\n  str = str.replace(/-\\u0000\\u0000-/g, \"\\n\"); // remove spaces before and after newlines\n\n  str = str.replace(/[ \\t]*\\n[ \\t]*/g, \"\\n\"); // remove more than 2 newlines in a row\n\n  str = str.replace(/\\n\\n+/g, \"\\n\\n\"); // restore hidden spaces\n\n  str = str.replace(/-\\u0001\\u0001-/g, \" \"); // decode HTML entities (&lt; and such)\n\n  str = he.decode(str);\n  return str.trim();\n}","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/express-mailer/node_modules/nodemailer/lib/helpers.js"],"names":["he","require","module","exports","stripHTML","str","toString","trim","replace","match","level","content","line","symbol","len","Number","decode","length","Array","join","params","paramMatch","url","spaces"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar he = require(\"he\");\n\n// expose to the world\nmodule.exports.stripHTML = stripHTML;\n\n/**\n * <p>Converts a HTML stringo into plaintext format that resembles Markdown</p>\n *\n * <p>Only good for simple and valid HTML, probably breaks on eveything else</p>\n *\n * <p>Placeholders:</p>\n *\n * <ul>\n *     <li>-\\u0000\\u0000- for newline</li>\n *     <li>-\\u0001\\u0001- for a space</li>\n *     <li>-\\u0002\\u0002- temporary newlines</li>\n * </ul>\n *\n * @param {String} str HTML string to convert\n * @return {String} Plaintext that resembles Markdown\n */\nfunction stripHTML(str){\n    str = (str || \"\").toString(\"utf-8\").trim();\n\n    // remove head\n    str = str.replace(/<head[\\s\\S]{1,}?\\/head>/gi, '');\n\n    // replace newlines\n    str = str.replace(/\\r?\\n|\\r/g,\"-\\u0002\\u0002-\");\n\n    // convert block element endings to linebreak markers\n    str = str.replace(/<(?:\\/p|br\\s*\\/*|\\/tr|\\/table|\\/div)>/g,\"-\\u0000\\u0000--\\u0000\\u0000-\");\n\n    // H1-H6, add underline or prepend with #\n    str = str.replace(/<[hH](\\d)[^>]*>(.*?)<\\/[hH]\\d[^>]*>/g,function(match, level, content){\n        var line = \"\",\n            symbol, // line symbol char\n            len;\n\n        level = Number(level) || 0;\n\n        content = he.decode(content.replace(/<[^>]*>/g,\" \").\n                    replace(/\\s\\s+/g,\" \")).\n                    trim();\n\n        if(!content){\n            // the tag was empty or only included other tags (<img> and such), nothing to show\n            return \"\";\n        }\n\n        // select correct symbol for the line\n        switch(level){\n            case 1:\n                symbol = \"=\";\n                len = content.length;\n                break;\n            case 2:\n                symbol = \"-\";\n                len = content.length;\n                break;\n            default:\n                symbol = \"#\";\n                len = level;\n        }\n\n        line = new Array(len+1).join(symbol);\n\n        if(symbol == \"#\"){\n            // prepend the line:\n            // ### This is a H3\n            return line + \" \" + content + \"\\n\\n\";\n        }else{\n            // add underline:\n            // This is a H1\n            // ============\n            return content + \"\\n\" + line + \"\\n\\n\";\n        }\n\n    });\n\n    // B\n    str = str.replace(/<(?:b|strong)(?: [^>])?>(.*?)<\\/(?:b|strong)>/ig,function(match, content){\n        return \"**\" + content.trim() + \"**\";\n    });\n\n    // U\n    str = str.replace(/<u(?: [^>])?>(.*?)<\\/u>/ig,function(match, content){\n        return \"_\" + content.trim() + \"_\";\n    });\n\n    // EM\n    str = str.replace(/<(?:i|em)(?: [^>])?>(.*?)<\\/(?:i|em)>/ig,function(match, content){\n        return \"*\" + content.trim() + \"*\";\n    });\n\n    // CODE\n    str = str.replace(/<code(?: [^>])?>(.*?)<\\/code>/ig,function(match, content){\n        return \"`\" + content.trim() + \"`\";\n    });\n\n    // A\n    str = str.replace(/<a ([^>]*)>(.*?)<\\/a[^>]*>/ig,function(match, params, content){\n        var paramMatch = params.match(/href\\s*=\\s*['\"]([^'\"]+)['\"]/),\n            url = paramMatch && paramMatch[1] || \"#\";\n\n        return \"[\" + content.trim() + \"]\" + \"(\" + url +\")\";\n    });\n\n    // UL, replace with newlines\n    str = str.replace(/(<\\/(?:ul|ol)>)/gi,\"$1-\\u0000\\u0000--\\u0000\\u0000-\");\n\n    // LI, indent by 2 spaces + *\n    str = str.replace(/<li[^>]*>(.*?)<\\/?(?:li|ol|ul)[^>]*>/ig,function(match, content){\n\n        content = content.replace(/<[^>]*>/g,\" \").\n                    replace(/\\s\\s+/g,\" \").\n                    trim();\n\n        if(!content){\n            // the tag was empty or only included other tags (<img> and such), nothing to show\n            return \"\";\n        }\n\n        // return with the space placeholders\n        return \"-\\u0001\\u0001--\\u0001\\u0001-* \" + content + \"\\n\";\n    });\n\n    // PRE, indent by 4 spaces\n    str = str.replace(/<pre[^>]*>(.*?)<\\/pre[^>]*>/ig,function(match, content){\n        if(!content){\n            return \"\";\n        }\n\n        // remove empty lines before and after\n        content = content.replace(/^((?:[ \\t]*)\\-\\u0002\\u0002\\-)+|((?:\\-\\u0002\\u0002\\-[ \\t]*))+$/g, \"\");\n\n        // replace tabs with 4 spaces\n        content = content.replace(/\\t/g, \"    \");\n\n        // replace temp. linebreak placeholders with 4 space placehorlders\n        content = content.replace(/\\-\\u0002\\u0002\\-([ ]*)/g, function(match, spaces){\n            // keep spaces in the beginning of the lines\n            spaces = spaces.replace(/ /g, \"-\\u0001\\u0001-\");\n\n            return \"\\n-\\u0001\\u0001--\\u0001\\u0001--\\u0001\\u0001--\\u0001\\u0001-\" + spaces;\n        });\n\n        content = content.replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\");\n\n        // add prepending 4 spaces\n        return \"\\n-\\u0001\\u0001--\\u0001\\u0001--\\u0001\\u0001--\\u0001\\u0001-\" + content.trim() + \"\\n\\n\";\n    });\n\n    // remove all remaining html tags\n    str = str.replace(/<[^>]*>/g,\" \");\n\n    // remove duplicate spaces\n    str = str.replace(/[ ][ ]+/g,\" \");\n\n    // remove temp. newlines\n    str = str.replace(/-\\u0002\\u0002-/g,\" \");\n\n    // restore newlines\n    str = str.replace(/-\\u0000\\u0000-/g,\"\\n\");\n\n    // remove spaces before and after newlines\n    str = str.replace(/[ \\t]*\\n[ \\t]*/g,\"\\n\");\n\n    // remove more than 2 newlines in a row\n    str = str.replace(/\\n\\n+/g,\"\\n\\n\");\n\n    // restore hidden spaces\n    str = str.replace(/-\\u0001\\u0001-/g,\" \");\n\n    // decode HTML entities (&lt; and such)\n    str = he.decode(str);\n\n    return str.trim();\n}\n"]},"metadata":{},"sourceType":"script"}
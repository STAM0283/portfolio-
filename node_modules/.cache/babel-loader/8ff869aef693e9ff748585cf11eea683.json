{"ast":null,"code":"var AWS = require('../core');\n\nvar path = require('path');\n/**\n * Represents credentials loaded from shared credentials file\n * (defaulting to ~/.aws/credentials).\n *\n * ## Using the shared credentials file\n *\n * This provider is checked by default in the Node.js environment. To use the\n * credentials file provider, simply add your access and secret keys to the\n * ~/.aws/credentials file in the following format:\n *\n *     [default]\n *     aws_access_key_id = AKID...\n *     aws_secret_access_key = YOUR_SECRET_KEY\n *\n * ## Using custom profiles\n *\n * The SDK supports loading credentials for separate profiles. This can be done\n * in two ways:\n *\n * 1. Set the `AWS_PROFILE` environment variable in your process prior to\n *    loading the SDK.\n * 2. Directly load the AWS.SharedIniFileCredentials provider:\n *\n * ```javascript\n * AWS.config.credentials = SharedIniFileCredentials({profile: 'myprofile'});\n * ```\n *\n * @!macro nobrowser\n */\n\n\nAWS.SharedIniFileCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new SharedIniFileCredentials object.\n   *\n   * @param options [map] a set of options\n   * @option options profile [String] (AWS_PROFILE env var or 'default')\n   *   the name of the profile to load.\n   * @option options filename [String] ('~/.aws/credentials') the filename\n   *   to use when loading credentials.\n   */\n  constructor: function SharedIniFileCredentials(options) {\n    AWS.Credentials.call(this);\n    options = options || {};\n    this.filename = options.filename;\n    this.profile = options.profile || process.env.AWS_PROFILE || 'default';\n    this.get(function () {});\n  },\n\n  /**\n   * Loads the credentials from the instance metadata service\n   *\n   * @callback callback function(err)\n   *   Called when the instance metadata service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    if (!callback) callback = function (err) {\n      if (err) throw err;\n    };\n\n    try {\n      if (!this.filename) this.loadDefaultFilename();\n      var creds = AWS.util.ini.parse(AWS.util.readFileSync(this.filename));\n\n      if (typeof creds[this.profile] === 'object') {\n        this.accessKeyId = creds[this.profile]['aws_access_key_id'];\n        this.secretAccessKey = creds[this.profile]['aws_secret_access_key'];\n        this.sessionToken = creds[this.profile]['aws_session_token'];\n      }\n\n      if (!this.accessKeyId || !this.secretAccessKey) {\n        throw new Error('Credentials not set in ' + this.filename + ' using profile ' + this.profile);\n      }\n\n      this.expired = false;\n      callback();\n    } catch (err) {\n      callback(err);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  loadDefaultFilename: function loadDefaultFilename() {\n    var env = process.env,\n        home = env.HOME || env.HOMEPATH || env.USERPROFILE;\n\n    if (!home) {\n      throw AWS.util.error(new Error('Cannot load credentials, HOME path not set'));\n    }\n\n    this.filename = path.join(home, '.aws', 'credentials');\n  }\n});","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/credentials/shared_ini_file_credentials.js"],"names":["AWS","require","path","SharedIniFileCredentials","util","inherit","Credentials","constructor","options","call","filename","profile","process","env","AWS_PROFILE","get","refresh","callback","err","loadDefaultFilename","creds","ini","parse","readFileSync","accessKeyId","secretAccessKey","sessionToken","Error","expired","home","HOME","HOMEPATH","USERPROFILE","error","join"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BAD,GAAG,CAACG,wBAAJ,GAA+BH,GAAG,CAACI,IAAJ,CAASC,OAAT,CAAiBL,GAAG,CAACM,WAArB,EAAkC;AAC/D;;;;;;;;;AASAC,EAAAA,WAAW,EAAE,SAASJ,wBAAT,CAAkCK,OAAlC,EAA2C;AACtDR,IAAAA,GAAG,CAACM,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB;AAEAD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAKE,QAAL,GAAgBF,OAAO,CAACE,QAAxB;AACA,SAAKC,OAAL,GAAeH,OAAO,CAACG,OAAR,IAAmBC,OAAO,CAACC,GAAR,CAAYC,WAA/B,IAA8C,SAA7D;AACA,SAAKC,GAAL,CAAS,YAAW,CAAE,CAAtB;AACD,GAlB8D;;AAoB/D;;;;;;;;;;;AAWAC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,QAAI,CAACA,QAAL,EAAeA,QAAQ,GAAG,UAASC,GAAT,EAAc;AAAE,UAAIA,GAAJ,EAAS,MAAMA,GAAN;AAAY,KAAhD;;AACf,QAAI;AACF,UAAI,CAAC,KAAKR,QAAV,EAAoB,KAAKS,mBAAL;AACpB,UAAIC,KAAK,GAAGpB,GAAG,CAACI,IAAJ,CAASiB,GAAT,CAAaC,KAAb,CAAmBtB,GAAG,CAACI,IAAJ,CAASmB,YAAT,CAAsB,KAAKb,QAA3B,CAAnB,CAAZ;;AACA,UAAI,OAAOU,KAAK,CAAC,KAAKT,OAAN,CAAZ,KAA+B,QAAnC,EAA6C;AAC3C,aAAKa,WAAL,GAAmBJ,KAAK,CAAC,KAAKT,OAAN,CAAL,CAAoB,mBAApB,CAAnB;AACA,aAAKc,eAAL,GAAuBL,KAAK,CAAC,KAAKT,OAAN,CAAL,CAAoB,uBAApB,CAAvB;AACA,aAAKe,YAAL,GAAoBN,KAAK,CAAC,KAAKT,OAAN,CAAL,CAAoB,mBAApB,CAApB;AACD;;AAED,UAAI,CAAC,KAAKa,WAAN,IAAqB,CAAC,KAAKC,eAA/B,EAAgD;AAC9C,cAAM,IAAIE,KAAJ,CAAU,4BAA4B,KAAKjB,QAAjC,GACA,iBADA,GACoB,KAAKC,OADnC,CAAN;AAED;;AACD,WAAKiB,OAAL,GAAe,KAAf;AACAX,MAAAA,QAAQ;AACT,KAfD,CAeE,OAAOC,GAAP,EAAY;AACZD,MAAAA,QAAQ,CAACC,GAAD,CAAR;AACD;AACF,GAnD8D;;AAqD/D;;;AAGAC,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,GAA+B;AAClD,QAAIN,GAAG,GAAGD,OAAO,CAACC,GAAlB;AAAA,QAAuBgB,IAAI,GAAGhB,GAAG,CAACiB,IAAJ,IAAYjB,GAAG,CAACkB,QAAhB,IAA4BlB,GAAG,CAACmB,WAA9D;;AACA,QAAI,CAACH,IAAL,EAAW;AACT,YAAM7B,GAAG,CAACI,IAAJ,CAAS6B,KAAT,CACJ,IAAIN,KAAJ,CAAU,4CAAV,CADI,CAAN;AAED;;AAED,SAAKjB,QAAL,GAAgBR,IAAI,CAACgC,IAAL,CAAUL,IAAV,EAAgB,MAAhB,EAAwB,aAAxB,CAAhB;AACD;AAhE8D,CAAlC,CAA/B","sourcesContent":["var AWS = require('../core');\nvar path = require('path');\n\n/**\n * Represents credentials loaded from shared credentials file\n * (defaulting to ~/.aws/credentials).\n *\n * ## Using the shared credentials file\n *\n * This provider is checked by default in the Node.js environment. To use the\n * credentials file provider, simply add your access and secret keys to the\n * ~/.aws/credentials file in the following format:\n *\n *     [default]\n *     aws_access_key_id = AKID...\n *     aws_secret_access_key = YOUR_SECRET_KEY\n *\n * ## Using custom profiles\n *\n * The SDK supports loading credentials for separate profiles. This can be done\n * in two ways:\n *\n * 1. Set the `AWS_PROFILE` environment variable in your process prior to\n *    loading the SDK.\n * 2. Directly load the AWS.SharedIniFileCredentials provider:\n *\n * ```javascript\n * AWS.config.credentials = SharedIniFileCredentials({profile: 'myprofile'});\n * ```\n *\n * @!macro nobrowser\n */\nAWS.SharedIniFileCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new SharedIniFileCredentials object.\n   *\n   * @param options [map] a set of options\n   * @option options profile [String] (AWS_PROFILE env var or 'default')\n   *   the name of the profile to load.\n   * @option options filename [String] ('~/.aws/credentials') the filename\n   *   to use when loading credentials.\n   */\n  constructor: function SharedIniFileCredentials(options) {\n    AWS.Credentials.call(this);\n\n    options = options || {};\n\n    this.filename = options.filename;\n    this.profile = options.profile || process.env.AWS_PROFILE || 'default';\n    this.get(function() {});\n  },\n\n  /**\n   * Loads the credentials from the instance metadata service\n   *\n   * @callback callback function(err)\n   *   Called when the instance metadata service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    if (!callback) callback = function(err) { if (err) throw err; };\n    try {\n      if (!this.filename) this.loadDefaultFilename();\n      var creds = AWS.util.ini.parse(AWS.util.readFileSync(this.filename));\n      if (typeof creds[this.profile] === 'object') {\n        this.accessKeyId = creds[this.profile]['aws_access_key_id'];\n        this.secretAccessKey = creds[this.profile]['aws_secret_access_key'];\n        this.sessionToken = creds[this.profile]['aws_session_token'];\n      }\n\n      if (!this.accessKeyId || !this.secretAccessKey) {\n        throw new Error('Credentials not set in ' + this.filename +\n                        ' using profile ' + this.profile);\n      }\n      this.expired = false;\n      callback();\n    } catch (err) {\n      callback(err);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  loadDefaultFilename: function loadDefaultFilename() {\n    var env = process.env, home = env.HOME || env.HOMEPATH || env.USERPROFILE;\n    if (!home) {\n      throw AWS.util.error(\n        new Error('Cannot load credentials, HOME path not set'));\n    }\n\n    this.filename = path.join(home, '.aws', 'credentials');\n  }\n});\n"]},"metadata":{},"sourceType":"script"}
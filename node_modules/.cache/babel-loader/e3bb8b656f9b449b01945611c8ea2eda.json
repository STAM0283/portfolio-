{"ast":null,"code":"'use strict';\n\nvar http = require('http');\n\nvar dns = require('dns');\n\nvar net = require('net');\n\nmodule.exports = resolve;\n\nfunction resolve(options, callback) {\n  var requestOptions = {\n    hostname: 'api.ipify.org',\n    port: 80,\n    path: '/?format=json',\n    method: 'GET'\n  };\n\n  if (!callback && typeof options == 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  options = options || {};\n  Object.keys(options).forEach(function (key) {\n    requestOptions[key] = options[key];\n  });\n  http.get(requestOptions, function (res) {\n    var chunks = [],\n        chunklen = 0;\n\n    if (res.statusCode != 200) {\n      res.on('data', function () {});\n      res.on('end', function () {\n        callback(new Error('Invalid response code ' + res.statusCode));\n      });\n      return;\n    }\n\n    res.on('data', function (chunk) {\n      chunks.push(chunk);\n      chunklen += chunk.length;\n    });\n    res.on('end', function () {\n      var data;\n      var ip;\n\n      try {\n        data = JSON.parse(Buffer.concat(chunks, chunklen).toString());\n      } catch (exception) {}\n\n      if (!data) {\n        return callback(new Error('Invalid response from server'));\n      } else {\n        ip = data.ip;\n\n        if (!ip || !net.isIP(ip)) {\n          return callback(new Error('IP address missing from server response'));\n        }\n\n        dns.reverse(ip, function (err, hostnames) {\n          var response = {\n            address: ip\n          };\n\n          if (!err && hostnames && hostnames.length) {\n            response.hostname = hostnames[0];\n          }\n\n          callback(null, response);\n        });\n      }\n    });\n  }).on('error', function (err) {\n    callback(err);\n  });\n}","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/public-address/index.js"],"names":["http","require","dns","net","module","exports","resolve","options","callback","requestOptions","hostname","port","path","method","undefined","Object","keys","forEach","key","get","res","chunks","chunklen","statusCode","on","Error","chunk","push","length","data","ip","JSON","parse","Buffer","concat","toString","exception","isIP","reverse","err","hostnames","response","address"],"mappings":"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","sourcesContent":["'use strict';\n\nvar http = require('http');\nvar dns = require('dns');\nvar net = require('net');\n\nmodule.exports = resolve;\n\nfunction resolve(options, callback) {\n    var requestOptions = {\n        hostname: 'api.ipify.org',\n        port: 80,\n        path: '/?format=json',\n        method: 'GET'\n    };\n\n    if (!callback && typeof options == 'function') {\n        callback = options;\n        options = undefined;\n    }\n\n    options = options || {};\n    Object.keys(options).forEach(function (key) {\n        requestOptions[key] = options[key];\n    });\n\n    http.get(requestOptions, function (res) {\n        var chunks = [],\n            chunklen = 0;\n\n        if (res.statusCode != 200) {\n            res.on('data', function () {});\n            res.on('end', function () {\n                callback(new Error('Invalid response code ' + res.statusCode));\n            });\n            return;\n        }\n\n        res.on('data', function (chunk) {\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        });\n\n        res.on('end', function () {\n            var data;\n            var ip;\n            try {\n                data = JSON.parse(Buffer.concat(chunks, chunklen).toString());\n            } catch (exception) {}\n            if (!data) {\n                return callback(new Error('Invalid response from server'));\n            } else {\n                ip = data.ip;\n                if (!ip || !net.isIP(ip)) {\n                    return callback(new Error('IP address missing from server response'));\n                }\n                dns.reverse(ip, function (err, hostnames) {\n                    var response = {\n                        address: ip\n                    };\n                    if (!err && hostnames && hostnames.length) {\n                        response.hostname = hostnames[0];\n                    }\n\n                    callback(null, response);\n                });\n            }\n        });\n    }).on('error', function (err) {\n        callback(err);\n    });\n}\n"]},"metadata":{},"sourceType":"script"}
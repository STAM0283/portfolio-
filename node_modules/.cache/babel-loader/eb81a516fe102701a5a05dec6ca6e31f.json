{"ast":null,"code":"/*!\n * express-mailer\n */\n\n/**\n * Module Dependencies\n */\nvar nodemailer = require('nodemailer');\n/**\n * Add email functionality to express application.\n *\n * @param {Application} app\n * @param {Object} options\n * @return {Application} app\n * @api public\n */\n\n\nexports.extend = function (app, options) {\n  if (app.mailer) {\n    throw new Error('Application already has been extended with Express-Mailer!');\n  }\n\n  ;\n  var mailer = {},\n      from = options.from,\n      // sender address\n  transportMethod = options.transportMethod || 'SMTP',\n      smtpTransport = nodemailer.createTransport(transportMethod, options),\n      stubTransport,\n      sendMail,\n      createRender,\n      createSend;\n  /**\n   * .sendMail\n   *\n   * Renders an enitre email using the given template and locals;\n   *\n   * @param {String|Object} template|sendOptions\n   * @param {Object} locals (template local variables)\n   * @param {Object} transport (nodemailer transport)\n   * @param {Function} render (app.render or res.render)\n   * @param {Function} callback\n   * @api private\n   */\n\n  sendMail = function (sendOptions, locals, transport, render, callback) {\n    var template;\n\n    if (typeof sendOptions === \"string\") {\n      template = sendOptions;\n      sendOptions = {};\n    } else {\n      template = sendOptions.template;\n    }\n\n    ;\n    render(template, locals, function (err, html) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      ;\n      sendOptions.from = sendOptions.from || from;\n      sendOptions.generateTextFromHTML = true;\n      sendOptions.html = html; // Taken from NodeMailer (libs/nodemailer.js v0.7.1 line 251)\n\n      var acceptedFields = ['from', 'sender', 'to', 'subject', 'replyTo', 'debug', 'reply_to', 'cc', 'bcc', 'body', 'text', 'html', 'envelope', 'inReplyTo', 'references', 'attachments'];\n      locals = locals || {};\n\n      for (var i = 0; i < acceptedFields.length; i++) {\n        var field = acceptedFields[i];\n        sendOptions[field] = sendOptions[field] || locals[field];\n      }\n\n      transport.sendMail(sendOptions, function (err, res) {\n        if (err) {\n          callback(err);\n          return;\n        } else {\n          callback(null, res.message);\n        }\n\n        ;\n      });\n    });\n  };\n\n  createRender = function (render) {\n    return function (sendOptions, locals, callback) {\n      if (!stubTransport) {\n        stubTransport = nodemailer.createTransport('Stub', options);\n      }\n\n      ;\n      sendMail(sendOptions, locals, stubTransport, render, callback);\n    };\n  };\n\n  createSend = function (render) {\n    return function (sendOptions, locals, callback) {\n      sendMail(sendOptions, locals, smtpTransport, render, callback);\n    };\n  };\n  /**\n   * .render\n   *\n   * Renders an enitre email using the given template and locals;\n   *\n   * @param {String|Object} template|sendOptions\n   * @param {Object} locals (template local variables)\n   * @param {Function} callback\n   * @api public\n   */\n\n\n  mailer.render = createRender(app.render.bind(app));\n  /**\n   * .send\n   *\n   * Sends an email using the given template and locals;\n   *\n   * @param {String|Object} template|sendOptions\n   * @param {Object} locals (template local variables)\n   * @param {Function} callback\n   * @api public\n   */\n\n  mailer.send = createSend(app.render.bind(app));\n  /**\n   * .update\n   *\n   * Updates the settings for mailer and callsback when ready;\n   *\n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n\n  mailer.update = function (options, callback) {\n    smtpTransport.close(function (err) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      ;\n      from = options.from;\n      transportMethod = options.transportMethod || 'SMTP';\n      smtpTransport = nodemailer.createTransport(transportMethod, options);\n      callback(null);\n    });\n  }; // Add .mailer to res object\n\n\n  app.use(function (req, res, next) {\n    res.mailer = {\n      render: createRender(res.render.bind(res)),\n      send: createSend(res.render.bind(res)),\n      update: mailer.update\n    };\n    next();\n  });\n  app.mailer = mailer;\n  return app;\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/express-mailer/lib/express-mailer.js"],"names":["nodemailer","require","exports","extend","app","options","mailer","Error","from","transportMethod","smtpTransport","createTransport","stubTransport","sendMail","createRender","createSend","sendOptions","locals","transport","render","callback","template","err","html","generateTextFromHTML","acceptedFields","i","length","field","res","message","bind","send","update","close","use","req","next"],"mappings":"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","sourcesContent":["/*!\n * express-mailer\n */\n\n/**\n * Module Dependencies\n */\n\nvar nodemailer = require('nodemailer');\n\n/**\n * Add email functionality to express application.\n *\n * @param {Application} app\n * @param {Object} options\n * @return {Application} app\n * @api public\n */\nexports.extend = function (app, options) {\n\n  if (app.mailer) {\n    throw new Error('Application already has been extended with Express-Mailer!');\n  };\n\n  var mailer = {},\n      from = options.from, // sender address\n      transportMethod = options.transportMethod || 'SMTP',\n      smtpTransport = nodemailer.createTransport(transportMethod, options),\n      stubTransport,\n      sendMail,\n      createRender,\n      createSend;\n\n  /**\n   * .sendMail\n   *\n   * Renders an enitre email using the given template and locals;\n   *\n   * @param {String|Object} template|sendOptions\n   * @param {Object} locals (template local variables)\n   * @param {Object} transport (nodemailer transport)\n   * @param {Function} render (app.render or res.render)\n   * @param {Function} callback\n   * @api private\n   */\n  sendMail = function (sendOptions, locals, transport, render, callback) {\n    var template;\n    if (typeof sendOptions === \"string\") {\n      template = sendOptions;\n      sendOptions = {};\n    } else {\n      template = sendOptions.template;\n    };\n\n    render(template, locals, function (err, html) {\n      if (err) {\n        callback(err);\n        return;\n      };\n\n      sendOptions.from = sendOptions.from || from;\n      sendOptions.generateTextFromHTML = true;\n      sendOptions.html = html;\n\n      // Taken from NodeMailer (libs/nodemailer.js v0.7.1 line 251)\n      var acceptedFields = ['from', 'sender', 'to', 'subject', 'replyTo', 'debug',\n          'reply_to', 'cc', 'bcc', 'body', 'text', 'html',\n          'envelope', 'inReplyTo', 'references', 'attachments'];\n\n      locals = locals || {};\n      for(var i=0;i<acceptedFields.length;i++){\n          var field = acceptedFields[i];\n          sendOptions[field] = sendOptions[field] || locals[field];\n      }\n\n      transport.sendMail(sendOptions, function (err, res) {\n        if (err) {\n          callback(err);\n          return;\n        } else {\n          callback(null, res.message);\n        };\n      });\n    });\n  };\n\n  createRender = function (render) {\n    return function (sendOptions, locals, callback) {\n      if (!stubTransport) {\n        stubTransport = nodemailer.createTransport('Stub', options);\n      };\n      sendMail(sendOptions, locals, stubTransport, render, callback);\n    };\n  };\n\n  createSend = function (render) {\n    return function (sendOptions, locals, callback) {\n      sendMail(sendOptions, locals, smtpTransport, render, callback);\n    };\n  };\n\n  /**\n   * .render\n   *\n   * Renders an enitre email using the given template and locals;\n   *\n   * @param {String|Object} template|sendOptions\n   * @param {Object} locals (template local variables)\n   * @param {Function} callback\n   * @api public\n   */\n   mailer.render = createRender(app.render.bind(app));\n\n  /**\n   * .send\n   *\n   * Sends an email using the given template and locals;\n   *\n   * @param {String|Object} template|sendOptions\n   * @param {Object} locals (template local variables)\n   * @param {Function} callback\n   * @api public\n   */\n  mailer.send = createSend(app.render.bind(app));\n\n  /**\n   * .update\n   *\n   * Updates the settings for mailer and callsback when ready;\n   *\n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n  mailer.update = function (options, callback) {\n    smtpTransport.close(function (err) {\n      if (err) {\n        callback(err);\n        return;\n      };\n      from = options.from;\n      transportMethod = options.transportMethod || 'SMTP';\n      smtpTransport = nodemailer.createTransport(transportMethod, options);\n      callback(null);\n    });\n  };\n\n  // Add .mailer to res object\n  app.use(function (req, res, next) {\n    res.mailer = {\n      render: createRender(res.render.bind(res)),\n      send: createSend(res.render.bind(res)),\n      update: mailer.update\n    };\n    next();\n  });\n\n  app.mailer = mailer;\n\n  return app;\n\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var AWS = require('../core');\n\nvar Stream = AWS.util.nodeRequire('stream').Stream;\nvar WritableStream = AWS.util.nodeRequire('stream').Writable;\nvar ReadableStream = AWS.util.nodeRequire('stream').Readable;\n\nrequire('../http');\n/**\n * @api private\n */\n\n\nAWS.NodeHttpClient = AWS.util.inherit({\n  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {\n    var cbAlreadyCalled = false;\n    var endpoint = httpRequest.endpoint;\n    var pathPrefix = '';\n    if (!httpOptions) httpOptions = {};\n\n    if (httpOptions.proxy) {\n      pathPrefix = endpoint.protocol + '//' + endpoint.hostname;\n\n      if (endpoint.port !== 80 && endpoint.port !== 443) {\n        pathPrefix += ':' + endpoint.port;\n      }\n\n      endpoint = new AWS.Endpoint(httpOptions.proxy);\n    }\n\n    var useSSL = endpoint.protocol === 'https:';\n    var http = useSSL ? require('https') : require('http');\n    var options = {\n      host: endpoint.hostname,\n      port: endpoint.port,\n      method: httpRequest.method,\n      headers: httpRequest.headers,\n      path: pathPrefix + httpRequest.path\n    };\n\n    if (useSSL && !httpOptions.agent) {\n      options.agent = this.sslAgent();\n    }\n\n    AWS.util.update(options, httpOptions);\n    delete options.proxy; // proxy isn't an HTTP option\n\n    delete options.timeout; // timeout isn't an HTTP option\n\n    var stream = http.request(options, function (httpResp) {\n      if (cbAlreadyCalled) return;\n      cbAlreadyCalled = true;\n      callback(httpResp);\n      httpResp.emit('headers', httpResp.statusCode, httpResp.headers);\n    });\n    httpRequest.stream = stream; // attach stream to httpRequest\n    // timeout support\n\n    stream.setTimeout(httpOptions.timeout || 0, function () {\n      if (cbAlreadyCalled) return;\n      cbAlreadyCalled = true;\n      var msg = 'Connection timed out after ' + httpOptions.timeout + 'ms';\n      errCallback(AWS.util.error(new Error(msg), {\n        code: 'TimeoutError'\n      }));\n      stream.abort();\n    });\n    stream.on('error', function () {\n      if (cbAlreadyCalled) return;\n      cbAlreadyCalled = true;\n      errCallback.apply(this, arguments);\n    });\n    this.writeBody(stream, httpRequest);\n    return stream;\n  },\n  writeBody: function writeBody(stream, httpRequest) {\n    var body = httpRequest.body;\n\n    if (body && WritableStream && ReadableStream) {\n      // progress support\n      if (!(body instanceof Stream)) body = this.bufferToStream(body);\n      body.pipe(this.progressStream(stream, httpRequest));\n    }\n\n    if (body instanceof Stream) {\n      body.pipe(stream);\n    } else if (body) {\n      stream.end(body);\n    } else {\n      stream.end();\n    }\n  },\n  sslAgent: function sslAgent() {\n    var https = require('https');\n\n    if (!AWS.NodeHttpClient.sslAgent) {\n      AWS.NodeHttpClient.sslAgent = new https.Agent({\n        rejectUnauthorized: true\n      });\n      AWS.NodeHttpClient.sslAgent.setMaxListeners(0); // delegate maxSockets to globalAgent\n\n      Object.defineProperty(AWS.NodeHttpClient.sslAgent, 'maxSockets', {\n        enumerable: true,\n        get: function () {\n          return https.globalAgent.maxSockets;\n        }\n      });\n    }\n\n    return AWS.NodeHttpClient.sslAgent;\n  },\n  progressStream: function progressStream(stream, httpRequest) {\n    var numBytes = 0;\n    var totalBytes = httpRequest.headers['Content-Length'];\n    var writer = new WritableStream();\n\n    writer._write = function (chunk, encoding, callback) {\n      if (chunk) {\n        numBytes += chunk.length;\n        stream.emit('sendProgress', {\n          loaded: numBytes,\n          total: totalBytes\n        });\n      }\n\n      callback();\n    };\n\n    return writer;\n  },\n  bufferToStream: function bufferToStream(buffer) {\n    if (!AWS.util.Buffer.isBuffer(buffer)) buffer = new AWS.util.Buffer(buffer);\n    var readable = new ReadableStream();\n    var pos = 0;\n\n    readable._read = function (size) {\n      if (pos >= buffer.length) return readable.push(null);\n      var end = pos + size;\n      if (end > buffer.length) end = buffer.length;\n      readable.push(buffer.slice(pos, end));\n      pos = end;\n    };\n\n    return readable;\n  },\n  emitter: null\n});\n/**\n * @!ignore\n */\n\n/**\n * @api private\n */\n\nAWS.HttpClient.prototype = AWS.NodeHttpClient.prototype;\n/**\n * @api private\n */\n\nAWS.HttpClient.streamsApiVersion = ReadableStream ? 2 : 1;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/http/node.js"],"names":["AWS","require","Stream","util","nodeRequire","WritableStream","Writable","ReadableStream","Readable","NodeHttpClient","inherit","handleRequest","httpRequest","httpOptions","callback","errCallback","cbAlreadyCalled","endpoint","pathPrefix","proxy","protocol","hostname","port","Endpoint","useSSL","http","options","host","method","headers","path","agent","sslAgent","update","timeout","stream","request","httpResp","emit","statusCode","setTimeout","msg","error","Error","code","abort","on","apply","arguments","writeBody","body","bufferToStream","pipe","progressStream","end","https","Agent","rejectUnauthorized","setMaxListeners","Object","defineProperty","enumerable","get","globalAgent","maxSockets","numBytes","totalBytes","writer","_write","chunk","encoding","length","loaded","total","buffer","Buffer","isBuffer","readable","pos","_read","size","push","slice","emitter","HttpClient","prototype","streamsApiVersion"],"mappings":"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","sourcesContent":["var AWS = require('../core');\nvar Stream = AWS.util.nodeRequire('stream').Stream;\nvar WritableStream = AWS.util.nodeRequire('stream').Writable;\nvar ReadableStream = AWS.util.nodeRequire('stream').Readable;\nrequire('../http');\n\n/**\n * @api private\n */\nAWS.NodeHttpClient = AWS.util.inherit({\n  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {\n    var cbAlreadyCalled = false;\n    var endpoint = httpRequest.endpoint;\n    var pathPrefix = '';\n    if (!httpOptions) httpOptions = {};\n    if (httpOptions.proxy) {\n      pathPrefix = endpoint.protocol + '//' + endpoint.hostname;\n      if (endpoint.port !== 80 && endpoint.port !== 443) {\n        pathPrefix += ':' + endpoint.port;\n      }\n      endpoint = new AWS.Endpoint(httpOptions.proxy);\n    }\n\n    var useSSL = endpoint.protocol === 'https:';\n    var http = useSSL ? require('https') : require('http');\n    var options = {\n      host: endpoint.hostname,\n      port: endpoint.port,\n      method: httpRequest.method,\n      headers: httpRequest.headers,\n      path: pathPrefix + httpRequest.path\n    };\n\n    if (useSSL && !httpOptions.agent) {\n      options.agent = this.sslAgent();\n    }\n\n    AWS.util.update(options, httpOptions);\n    delete options.proxy; // proxy isn't an HTTP option\n    delete options.timeout; // timeout isn't an HTTP option\n\n    var stream = http.request(options, function (httpResp) {\n      if (cbAlreadyCalled) return; cbAlreadyCalled = true;\n\n      callback(httpResp);\n      httpResp.emit('headers', httpResp.statusCode, httpResp.headers);\n    });\n    httpRequest.stream = stream; // attach stream to httpRequest\n\n    // timeout support\n    stream.setTimeout(httpOptions.timeout || 0, function() {\n      if (cbAlreadyCalled) return; cbAlreadyCalled = true;\n\n      var msg = 'Connection timed out after ' + httpOptions.timeout + 'ms';\n      errCallback(AWS.util.error(new Error(msg), {code: 'TimeoutError'}));\n      stream.abort();\n    });\n\n    stream.on('error', function() {\n      if (cbAlreadyCalled) return; cbAlreadyCalled = true;\n      errCallback.apply(this, arguments);\n    });\n\n    this.writeBody(stream, httpRequest);\n    return stream;\n  },\n\n  writeBody: function writeBody(stream, httpRequest) {\n    var body = httpRequest.body;\n\n    if (body && WritableStream && ReadableStream) { // progress support\n      if (!(body instanceof Stream)) body = this.bufferToStream(body);\n      body.pipe(this.progressStream(stream, httpRequest));\n    }\n\n    if (body instanceof Stream) {\n      body.pipe(stream);\n    } else if (body) {\n      stream.end(body);\n    } else {\n      stream.end();\n    }\n  },\n\n  sslAgent: function sslAgent() {\n    var https = require('https');\n\n    if (!AWS.NodeHttpClient.sslAgent) {\n      AWS.NodeHttpClient.sslAgent = new https.Agent({rejectUnauthorized: true});\n      AWS.NodeHttpClient.sslAgent.setMaxListeners(0);\n\n      // delegate maxSockets to globalAgent\n      Object.defineProperty(AWS.NodeHttpClient.sslAgent, 'maxSockets', {\n        enumerable: true,\n        get: function() { return https.globalAgent.maxSockets; }\n      });\n    }\n    return AWS.NodeHttpClient.sslAgent;\n  },\n\n  progressStream: function progressStream(stream, httpRequest) {\n    var numBytes = 0;\n    var totalBytes = httpRequest.headers['Content-Length'];\n    var writer = new WritableStream();\n    writer._write = function(chunk, encoding, callback) {\n      if (chunk) {\n        numBytes += chunk.length;\n        stream.emit('sendProgress', {\n          loaded: numBytes, total: totalBytes\n        });\n      }\n      callback();\n    };\n    return writer;\n  },\n\n  bufferToStream: function bufferToStream(buffer) {\n    if (!AWS.util.Buffer.isBuffer(buffer)) buffer = new AWS.util.Buffer(buffer);\n\n    var readable = new ReadableStream();\n    var pos = 0;\n    readable._read = function(size) {\n      if (pos >= buffer.length) return readable.push(null);\n\n      var end = pos + size;\n      if (end > buffer.length) end = buffer.length;\n      readable.push(buffer.slice(pos, end));\n      pos = end;\n    };\n\n    return readable;\n  },\n\n  emitter: null\n});\n\n/**\n * @!ignore\n */\n\n/**\n * @api private\n */\nAWS.HttpClient.prototype = AWS.NodeHttpClient.prototype;\n\n/**\n * @api private\n */\nAWS.HttpClient.streamsApiVersion = ReadableStream ? 2 : 1;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var AWS = require('../core');\n\nrequire('../metadata_service');\n/**\n * Represents credentials received from the metadata service on an EC2 instance.\n *\n * By default, this class will connect to the metadata service using\n * {AWS.MetadataService} and attempt to load any available credentials. If it\n * can connect, and credentials are available, these will be used with zero\n * configuration.\n *\n * @!macro nobrowser\n */\n\n\nAWS.EC2MetadataCredentials = AWS.util.inherit(AWS.Credentials, {\n  constructor: function EC2MetadataCredentials(options) {\n    AWS.Credentials.call(this);\n    this.metadataService = new AWS.MetadataService(options);\n    this.metadata = {};\n  },\n\n  /**\n   * Loads the credentials from the instance metadata service\n   *\n   * @callback callback function(err)\n   *   Called when the instance metadata service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    var self = this;\n    if (!callback) callback = function (err) {\n      if (err) throw err;\n    };\n    self.metadataService.loadCredentials(function (err, creds) {\n      if (!err) {\n        self.expired = false;\n        self.metadata = creds;\n        self.accessKeyId = creds.AccessKeyId;\n        self.secretAccessKey = creds.SecretAccessKey;\n        self.sessionToken = creds.Token;\n        self.expireTime = new Date(creds.Expiration);\n      }\n\n      callback(err);\n    });\n  }\n});","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/credentials/ec2_metadata_credentials.js"],"names":["AWS","require","EC2MetadataCredentials","util","inherit","Credentials","constructor","options","call","metadataService","MetadataService","metadata","refresh","callback","self","err","loadCredentials","creds","expired","accessKeyId","AccessKeyId","secretAccessKey","SecretAccessKey","sessionToken","Token","expireTime","Date","Expiration"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AACAA,OAAO,CAAC,qBAAD,CAAP;AAEA;;;;;;;;;;;;AAUAD,GAAG,CAACE,sBAAJ,GAA6BF,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBJ,GAAG,CAACK,WAArB,EAAkC;AAC7DC,EAAAA,WAAW,EAAE,SAASJ,sBAAT,CAAgCK,OAAhC,EAAyC;AACpDP,IAAAA,GAAG,CAACK,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB;AACA,SAAKC,eAAL,GAAuB,IAAIT,GAAG,CAACU,eAAR,CAAwBH,OAAxB,CAAvB;AACA,SAAKI,QAAL,GAAgB,EAAhB;AACD,GAL4D;;AAO7D;;;;;;;;;;;AAWAC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,QAAIC,IAAI,GAAG,IAAX;AACA,QAAI,CAACD,QAAL,EAAeA,QAAQ,GAAG,UAASE,GAAT,EAAc;AAAE,UAAIA,GAAJ,EAAS,MAAMA,GAAN;AAAY,KAAhD;AAEfD,IAAAA,IAAI,CAACL,eAAL,CAAqBO,eAArB,CAAqC,UAAUD,GAAV,EAAeE,KAAf,EAAsB;AACzD,UAAI,CAACF,GAAL,EAAU;AACRD,QAAAA,IAAI,CAACI,OAAL,GAAe,KAAf;AACAJ,QAAAA,IAAI,CAACH,QAAL,GAAgBM,KAAhB;AACAH,QAAAA,IAAI,CAACK,WAAL,GAAmBF,KAAK,CAACG,WAAzB;AACAN,QAAAA,IAAI,CAACO,eAAL,GAAuBJ,KAAK,CAACK,eAA7B;AACAR,QAAAA,IAAI,CAACS,YAAL,GAAoBN,KAAK,CAACO,KAA1B;AACAV,QAAAA,IAAI,CAACW,UAAL,GAAkB,IAAIC,IAAJ,CAAST,KAAK,CAACU,UAAf,CAAlB;AACD;;AACDd,MAAAA,QAAQ,CAACE,GAAD,CAAR;AACD,KAVD;AAWD;AAjC4D,CAAlC,CAA7B","sourcesContent":["var AWS = require('../core');\nrequire('../metadata_service');\n\n/**\n * Represents credentials received from the metadata service on an EC2 instance.\n *\n * By default, this class will connect to the metadata service using\n * {AWS.MetadataService} and attempt to load any available credentials. If it\n * can connect, and credentials are available, these will be used with zero\n * configuration.\n *\n * @!macro nobrowser\n */\nAWS.EC2MetadataCredentials = AWS.util.inherit(AWS.Credentials, {\n  constructor: function EC2MetadataCredentials(options) {\n    AWS.Credentials.call(this);\n    this.metadataService = new AWS.MetadataService(options);\n    this.metadata = {};\n  },\n\n  /**\n   * Loads the credentials from the instance metadata service\n   *\n   * @callback callback function(err)\n   *   Called when the instance metadata service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    var self = this;\n    if (!callback) callback = function(err) { if (err) throw err; };\n\n    self.metadataService.loadCredentials(function (err, creds) {\n      if (!err) {\n        self.expired = false;\n        self.metadata = creds;\n        self.accessKeyId = creds.AccessKeyId;\n        self.secretAccessKey = creds.SecretAccessKey;\n        self.sessionToken = creds.Token;\n        self.expireTime = new Date(creds.Expiration);\n      }\n      callback(err);\n    });\n  }\n});\n"]},"metadata":{},"sourceType":"script"}
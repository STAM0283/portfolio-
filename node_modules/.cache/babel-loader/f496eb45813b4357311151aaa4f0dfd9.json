{"ast":null,"code":"/**\n * Create custom, reusable snippets within your templates.\n * Can be imported from one template to another using the <a href=\"#import\"><code data-language=\"swig\">{% import ... %}</code></a> tag.\n *\n * @alias macro\n *\n * @example\n * {% macro input(type, name, id, label, value, error) %}\n *   <label for=\"{{ name }}\">{{ label }}</label>\n *   <input type=\"{{ type }}\" name=\"{{ name }}\" id=\"{{ id }}\" value=\"{{ value }}\"{% if error %} class=\"error\"{% endif %}>\n * {% endmacro %}\n *\n * {{ input(\"text\", \"fname\", \"fname\", \"First Name\", fname.value, fname.errors) }}\n * // => <label for=\"fname\">First Name</label>\n * //    <input type=\"text\" name=\"fname\" id=\"fname\" value=\"\">\n *\n * @param {...arguments} arguments  User-defined arguments.\n */\nexports.compile = function (compiler, args, content, parents, options, blockName) {\n  var fnName = args.shift();\n  return '_ctx.' + fnName + ' = function (' + args.join('') + ') {\\n' + '  var _output = \"\",\\n' + '    __ctx = _utils.extend({}, _ctx);\\n' + '  _utils.each(_ctx, function (v, k) {\\n' + '    if ([\"' + args.join('\",\"') + '\"].indexOf(k) !== -1) { delete _ctx[k]; }\\n' + '  });\\n' + compiler(content, parents, options, blockName) + '\\n' + ' _ctx = _utils.extend(_ctx, __ctx);\\n' + '  return _output;\\n' + '};\\n' + '_ctx.' + fnName + '.safe = true;\\n';\n};\n\nexports.parse = function (str, line, parser, types) {\n  var name;\n  parser.on(types.VAR, function (token) {\n    if (token.match.indexOf('.') !== -1) {\n      throw new Error('Unexpected dot in macro argument \"' + token.match + '\" on line ' + line + '.');\n    }\n\n    this.out.push(token.match);\n  });\n  parser.on(types.FUNCTION, function (token) {\n    if (!name) {\n      name = token.match;\n      this.out.push(name);\n      this.state.push(types.FUNCTION);\n    }\n  });\n  parser.on(types.FUNCTIONEMPTY, function (token) {\n    if (!name) {\n      name = token.match;\n      this.out.push(name);\n    }\n  });\n  parser.on(types.PARENCLOSE, function () {\n    if (this.isLast) {\n      return;\n    }\n\n    throw new Error('Unexpected parenthesis close on line ' + line + '.');\n  });\n  parser.on(types.COMMA, function () {\n    return true;\n  });\n  parser.on('*', function () {\n    return;\n  });\n  return true;\n};\n\nexports.ends = true;\nexports.block = true;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/swig/lib/tags/macro.js"],"names":["exports","compile","compiler","args","content","parents","options","blockName","fnName","shift","join","parse","str","line","parser","types","name","on","VAR","token","match","indexOf","Error","out","push","FUNCTION","state","FUNCTIONEMPTY","PARENCLOSE","isLast","COMMA","ends","block"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBAA,OAAO,CAACC,OAAR,GAAkB,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,OAAnC,EAA4CC,OAA5C,EAAqDC,SAArD,EAAgE;AAChF,MAAIC,MAAM,GAAGL,IAAI,CAACM,KAAL,EAAb;AAEA,SAAO,UAAUD,MAAV,GAAmB,eAAnB,GAAqCL,IAAI,CAACO,IAAL,CAAU,EAAV,CAArC,GAAqD,OAArD,GACL,uBADK,GAEL,wCAFK,GAGL,yCAHK,GAIL,YAJK,GAIUP,IAAI,CAACO,IAAL,CAAU,KAAV,CAJV,GAI6B,6CAJ7B,GAKL,SALK,GAMLR,QAAQ,CAACE,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,SAA5B,CANH,GAM4C,IAN5C,GAOL,uCAPK,GAQL,qBARK,GASL,MATK,GAUL,OAVK,GAUKC,MAVL,GAUc,iBAVrB;AAWD,CAdD;;AAgBAR,OAAO,CAACW,KAAR,GAAgB,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,KAA7B,EAAoC;AAClD,MAAIC,IAAJ;AAEAF,EAAAA,MAAM,CAACG,EAAP,CAAUF,KAAK,CAACG,GAAhB,EAAqB,UAAUC,KAAV,EAAiB;AACpC,QAAIA,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAAlC,EAAqC;AACnC,YAAM,IAAIC,KAAJ,CAAU,uCAAuCH,KAAK,CAACC,KAA7C,GAAqD,YAArD,GAAoEP,IAApE,GAA2E,GAArF,CAAN;AACD;;AACD,SAAKU,GAAL,CAASC,IAAT,CAAcL,KAAK,CAACC,KAApB;AACD,GALD;AAOAN,EAAAA,MAAM,CAACG,EAAP,CAAUF,KAAK,CAACU,QAAhB,EAA0B,UAAUN,KAAV,EAAiB;AACzC,QAAI,CAACH,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAGG,KAAK,CAACC,KAAb;AACA,WAAKG,GAAL,CAASC,IAAT,CAAcR,IAAd;AACA,WAAKU,KAAL,CAAWF,IAAX,CAAgBT,KAAK,CAACU,QAAtB;AACD;AACF,GAND;AAQAX,EAAAA,MAAM,CAACG,EAAP,CAAUF,KAAK,CAACY,aAAhB,EAA+B,UAAUR,KAAV,EAAiB;AAC9C,QAAI,CAACH,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAGG,KAAK,CAACC,KAAb;AACA,WAAKG,GAAL,CAASC,IAAT,CAAcR,IAAd;AACD;AACF,GALD;AAOAF,EAAAA,MAAM,CAACG,EAAP,CAAUF,KAAK,CAACa,UAAhB,EAA4B,YAAY;AACtC,QAAI,KAAKC,MAAT,EAAiB;AACf;AACD;;AACD,UAAM,IAAIP,KAAJ,CAAU,0CAA0CT,IAA1C,GAAiD,GAA3D,CAAN;AACD,GALD;AAOAC,EAAAA,MAAM,CAACG,EAAP,CAAUF,KAAK,CAACe,KAAhB,EAAuB,YAAY;AACjC,WAAO,IAAP;AACD,GAFD;AAIAhB,EAAAA,MAAM,CAACG,EAAP,CAAU,GAAV,EAAe,YAAY;AACzB;AACD,GAFD;AAIA,SAAO,IAAP;AACD,CAzCD;;AA2CAjB,OAAO,CAAC+B,IAAR,GAAe,IAAf;AACA/B,OAAO,CAACgC,KAAR,GAAgB,IAAhB","sourcesContent":["/**\n * Create custom, reusable snippets within your templates.\n * Can be imported from one template to another using the <a href=\"#import\"><code data-language=\"swig\">{% import ... %}</code></a> tag.\n *\n * @alias macro\n *\n * @example\n * {% macro input(type, name, id, label, value, error) %}\n *   <label for=\"{{ name }}\">{{ label }}</label>\n *   <input type=\"{{ type }}\" name=\"{{ name }}\" id=\"{{ id }}\" value=\"{{ value }}\"{% if error %} class=\"error\"{% endif %}>\n * {% endmacro %}\n *\n * {{ input(\"text\", \"fname\", \"fname\", \"First Name\", fname.value, fname.errors) }}\n * // => <label for=\"fname\">First Name</label>\n * //    <input type=\"text\" name=\"fname\" id=\"fname\" value=\"\">\n *\n * @param {...arguments} arguments  User-defined arguments.\n */\nexports.compile = function (compiler, args, content, parents, options, blockName) {\n  var fnName = args.shift();\n\n  return '_ctx.' + fnName + ' = function (' + args.join('') + ') {\\n' +\n    '  var _output = \"\",\\n' +\n    '    __ctx = _utils.extend({}, _ctx);\\n' +\n    '  _utils.each(_ctx, function (v, k) {\\n' +\n    '    if ([\"' + args.join('\",\"') + '\"].indexOf(k) !== -1) { delete _ctx[k]; }\\n' +\n    '  });\\n' +\n    compiler(content, parents, options, blockName) + '\\n' +\n    ' _ctx = _utils.extend(_ctx, __ctx);\\n' +\n    '  return _output;\\n' +\n    '};\\n' +\n    '_ctx.' + fnName + '.safe = true;\\n';\n};\n\nexports.parse = function (str, line, parser, types) {\n  var name;\n\n  parser.on(types.VAR, function (token) {\n    if (token.match.indexOf('.') !== -1) {\n      throw new Error('Unexpected dot in macro argument \"' + token.match + '\" on line ' + line + '.');\n    }\n    this.out.push(token.match);\n  });\n\n  parser.on(types.FUNCTION, function (token) {\n    if (!name) {\n      name = token.match;\n      this.out.push(name);\n      this.state.push(types.FUNCTION);\n    }\n  });\n\n  parser.on(types.FUNCTIONEMPTY, function (token) {\n    if (!name) {\n      name = token.match;\n      this.out.push(name);\n    }\n  });\n\n  parser.on(types.PARENCLOSE, function () {\n    if (this.isLast) {\n      return;\n    }\n    throw new Error('Unexpected parenthesis close on line ' + line + '.');\n  });\n\n  parser.on(types.COMMA, function () {\n    return true;\n  });\n\n  parser.on('*', function () {\n    return;\n  });\n\n  return true;\n};\n\nexports.ends = true;\nexports.block = true;\n"]},"metadata":{},"sourceType":"script"}
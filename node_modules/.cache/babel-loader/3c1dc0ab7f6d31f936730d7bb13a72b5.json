{"ast":null,"code":"\"use strict\"; // this module is inspired by xoauth.py\n// http://code.google.com/p/google-mail-xoauth-tools/\n\nvar crypto = require(\"crypto\");\n\nmodule.exports.XOAuthGenerator = XOAuthGenerator;\n\nfunction XOAuthGenerator(options) {\n  this.options = options || {};\n}\n\nXOAuthGenerator.prototype.generate = function (callback) {\n  return generateXOAuthStr(this.options, callback);\n};\n\nfunction escapeAndJoin(arr) {\n  return arr.map(encodeURIComponent).join(\"&\");\n}\n\nfunction hmacSha1(str, key) {\n  var hmac = crypto.createHmac(\"sha1\", key);\n  hmac.update(str);\n  return hmac.digest(\"base64\");\n}\n\nfunction initOAuthParams(options) {\n  return {\n    oauth_consumer_key: options.consumerKey || \"anonymous\",\n    oauth_nonce: options.nonce || \"\" + Date.now() + Math.round(Math.random() * 1000000),\n    oauth_signature_method: \"HMAC-SHA1\",\n    oauth_version: \"1.0\",\n    oauth_timestamp: options.timestamp || \"\" + Math.round(Date.now() / 1000)\n  };\n}\n\nfunction generateOAuthBaseStr(method, requestUrl, params) {\n  var reqArr = [method, requestUrl].concat(Object.keys(params).sort().map(function (key) {\n    return key + \"=\" + encodeURIComponent(params[key]);\n  }).join(\"&\"));\n  return escapeAndJoin(reqArr);\n}\n\nfunction generateXOAuthStr(options, callback) {\n  options = options || {};\n  var params = initOAuthParams(options),\n      requestUrl = options.requestUrl || \"https://mail.google.com/mail/b/\" + (options.user || \"\") + \"/smtp/\",\n      baseStr,\n      signatureKey,\n      paramsStr,\n      returnStr;\n\n  if (options.token) {\n    params.oauth_token = options.token;\n  }\n\n  baseStr = generateOAuthBaseStr(options.method || \"GET\", requestUrl, params);\n  signatureKey = escapeAndJoin([options.consumerSecret || \"anonymous\", options.tokenSecret]);\n  params.oauth_signature = hmacSha1(baseStr, signatureKey);\n  paramsStr = Object.keys(params).sort().map(function (key) {\n    return key + \"=\\\"\" + encodeURIComponent(params[key]) + \"\\\"\";\n  }).join(\",\");\n  returnStr = [options.method || \"GET\", requestUrl, paramsStr].join(\" \");\n\n  if (typeof callback == \"function\") {\n    callback(null, new Buffer(returnStr, \"utf-8\").toString(\"base64\"));\n  } else {\n    return new Buffer(returnStr, \"utf-8\").toString(\"base64\");\n  }\n}","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/express-mailer/node_modules/nodemailer/lib/xoauth.js"],"names":["crypto","require","module","exports","XOAuthGenerator","options","prototype","generate","callback","generateXOAuthStr","escapeAndJoin","arr","map","encodeURIComponent","join","hmacSha1","str","key","hmac","createHmac","update","digest","initOAuthParams","oauth_consumer_key","consumerKey","oauth_nonce","nonce","Date","now","Math","round","random","oauth_signature_method","oauth_version","oauth_timestamp","timestamp","generateOAuthBaseStr","method","requestUrl","params","reqArr","concat","Object","keys","sort","user","baseStr","signatureKey","paramsStr","returnStr","token","oauth_token","consumerSecret","tokenSecret","oauth_signature","Buffer","toString"],"mappings":"AAAA,a,CAEA;AACA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,CAAeC,eAAf,GAAiCA,eAAjC;;AAEA,SAASA,eAAT,CAAyBC,OAAzB,EAAiC;AAC7B,OAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACH;;AAEDD,eAAe,CAACE,SAAhB,CAA0BC,QAA1B,GAAqC,UAASC,QAAT,EAAkB;AACnD,SAAOC,iBAAiB,CAAC,KAAKJ,OAAN,EAAeG,QAAf,CAAxB;AACH,CAFD;;AAIA,SAASE,aAAT,CAAuBC,GAAvB,EAA2B;AACvB,SAAOA,GAAG,CAACC,GAAJ,CAAQC,kBAAR,EAA4BC,IAA5B,CAAiC,GAAjC,CAAP;AACH;;AAED,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA2B;AACvB,MAAIC,IAAI,GAAGlB,MAAM,CAACmB,UAAP,CAAkB,MAAlB,EAA0BF,GAA1B,CAAX;AACAC,EAAAA,IAAI,CAACE,MAAL,CAAYJ,GAAZ;AACA,SAAOE,IAAI,CAACG,MAAL,CAAY,QAAZ,CAAP;AACH;;AAED,SAASC,eAAT,CAAyBjB,OAAzB,EAAiC;AAC7B,SAAO;AACCkB,IAAAA,kBAAkB,EAAElB,OAAO,CAACmB,WAAR,IAAuB,WAD5C;AAECC,IAAAA,WAAW,EAAEpB,OAAO,CAACqB,KAAR,IAAiB,KAAKC,IAAI,CAACC,GAAL,EAAL,GAAkBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,OAAzB,CAFjD;AAGCC,IAAAA,sBAAsB,EAAE,WAHzB;AAICC,IAAAA,aAAa,EAAE,KAJhB;AAKCC,IAAAA,eAAe,EAAE7B,OAAO,CAAC8B,SAAR,IAAqB,KAAKN,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACC,GAAL,KAAW,IAAtB;AAL5C,GAAP;AAOH;;AAED,SAASQ,oBAAT,CAA8BC,MAA9B,EAAsCC,UAAtC,EAAkDC,MAAlD,EAAyD;AACrD,MAAIC,MAAM,GAAG,CAACH,MAAD,EAASC,UAAT,EAAqBG,MAArB,CAA4BC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,IAApB,GAA2BhC,GAA3B,CAA+B,UAASK,GAAT,EAAa;AAC7E,WAAOA,GAAG,GAAG,GAAN,GAAYJ,kBAAkB,CAAC0B,MAAM,CAACtB,GAAD,CAAP,CAArC;AACH,GAFoC,EAElCH,IAFkC,CAE7B,GAF6B,CAA5B,CAAb;AAIA,SAAOJ,aAAa,CAAC8B,MAAD,CAApB;AACH;;AAED,SAAS/B,iBAAT,CAA2BJ,OAA3B,EAAoCG,QAApC,EAA6C;AACzCH,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,MAAIkC,MAAM,GAAGjB,eAAe,CAACjB,OAAD,CAA5B;AAAA,MACIiC,UAAU,GAAGjC,OAAO,CAACiC,UAAR,IAAsB,qCAAqCjC,OAAO,CAACwC,IAAR,IAAgB,EAArD,IAA2D,QADlG;AAAA,MAEIC,OAFJ;AAAA,MAEaC,YAFb;AAAA,MAE2BC,SAF3B;AAAA,MAEsCC,SAFtC;;AAIA,MAAG5C,OAAO,CAAC6C,KAAX,EAAiB;AACbX,IAAAA,MAAM,CAACY,WAAP,GAAqB9C,OAAO,CAAC6C,KAA7B;AACH;;AAEDJ,EAAAA,OAAO,GAAGV,oBAAoB,CAAC/B,OAAO,CAACgC,MAAR,IAAkB,KAAnB,EAA0BC,UAA1B,EAAsCC,MAAtC,CAA9B;AAEAQ,EAAAA,YAAY,GAAGrC,aAAa,CAAC,CAACL,OAAO,CAAC+C,cAAR,IAA0B,WAA3B,EAAwC/C,OAAO,CAACgD,WAAhD,CAAD,CAA5B;AACAd,EAAAA,MAAM,CAACe,eAAP,GAAyBvC,QAAQ,CAAC+B,OAAD,EAAUC,YAAV,CAAjC;AAEAC,EAAAA,SAAS,GAAGN,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,IAApB,GAA2BhC,GAA3B,CAA+B,UAASK,GAAT,EAAa;AACpD,WAAOA,GAAG,GAAC,KAAJ,GAAUJ,kBAAkB,CAAC0B,MAAM,CAACtB,GAAD,CAAP,CAA5B,GAA0C,IAAjD;AACH,GAFW,EAETH,IAFS,CAEJ,GAFI,CAAZ;AAIAmC,EAAAA,SAAS,GAAG,CAAC5C,OAAO,CAACgC,MAAR,IAAkB,KAAnB,EAA0BC,UAA1B,EAAsCU,SAAtC,EAAiDlC,IAAjD,CAAsD,GAAtD,CAAZ;;AAEA,MAAG,OAAON,QAAP,IAAmB,UAAtB,EAAiC;AAC7BA,IAAAA,QAAQ,CAAC,IAAD,EAAO,IAAI+C,MAAJ,CAAWN,SAAX,EAAsB,OAAtB,EAA+BO,QAA/B,CAAwC,QAAxC,CAAP,CAAR;AACH,GAFD,MAEK;AACD,WAAO,IAAID,MAAJ,CAAWN,SAAX,EAAsB,OAAtB,EAA+BO,QAA/B,CAAwC,QAAxC,CAAP;AACH;AACJ","sourcesContent":["\"use strict\";\n\n// this module is inspired by xoauth.py\n// http://code.google.com/p/google-mail-xoauth-tools/\n\nvar crypto = require(\"crypto\");\n\nmodule.exports.XOAuthGenerator = XOAuthGenerator;\n\nfunction XOAuthGenerator(options){\n    this.options = options || {};\n}\n\nXOAuthGenerator.prototype.generate = function(callback){\n    return generateXOAuthStr(this.options, callback);\n};\n\nfunction escapeAndJoin(arr){\n    return arr.map(encodeURIComponent).join(\"&\");\n}\n\nfunction hmacSha1(str, key){\n    var hmac = crypto.createHmac(\"sha1\", key);\n    hmac.update(str);\n    return hmac.digest(\"base64\");\n}\n\nfunction initOAuthParams(options){\n    return {\n            oauth_consumer_key: options.consumerKey || \"anonymous\",\n            oauth_nonce: options.nonce || \"\" + Date.now() + Math.round(Math.random()*1000000),\n            oauth_signature_method: \"HMAC-SHA1\",\n            oauth_version: \"1.0\",\n            oauth_timestamp: options.timestamp || \"\" + Math.round(Date.now()/1000)\n        };\n}\n\nfunction generateOAuthBaseStr(method, requestUrl, params){\n    var reqArr = [method, requestUrl].concat(Object.keys(params).sort().map(function(key){\n            return key + \"=\" + encodeURIComponent(params[key]);\n        }).join(\"&\"));\n\n    return escapeAndJoin(reqArr);\n}\n\nfunction generateXOAuthStr(options, callback){\n    options = options || {};\n\n    var params = initOAuthParams(options),\n        requestUrl = options.requestUrl || \"https://mail.google.com/mail/b/\" + (options.user || \"\") + \"/smtp/\",\n        baseStr, signatureKey, paramsStr, returnStr;\n\n    if(options.token){\n        params.oauth_token = options.token;\n    }\n\n    baseStr = generateOAuthBaseStr(options.method || \"GET\", requestUrl, params);\n\n    signatureKey = escapeAndJoin([options.consumerSecret || \"anonymous\", options.tokenSecret]);\n    params.oauth_signature = hmacSha1(baseStr, signatureKey);\n\n    paramsStr = Object.keys(params).sort().map(function(key){\n        return key+\"=\\\"\"+encodeURIComponent(params[key])+\"\\\"\";\n    }).join(\",\");\n\n    returnStr = [options.method || \"GET\", requestUrl, paramsStr].join(\" \");\n\n    if(typeof callback == \"function\"){\n        callback(null, new Buffer(returnStr, \"utf-8\").toString(\"base64\"));\n    }else{\n        return new Buffer(returnStr, \"utf-8\").toString(\"base64\");\n    }\n}\n"]},"metadata":{},"sourceType":"script"}
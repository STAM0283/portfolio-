{"ast":null,"code":"/**\n * Defines a block in a template that can be overridden by a template extending this one and/or will override the current template's parent template block of the same name.\n *\n * See <a href=\"#inheritance\">Template Inheritance</a> for more information.\n *\n * @alias block\n *\n * @example\n * {% block body %}...{% endblock %}\n *\n * @param {literal}  name   Name of the block for use in parent and extended templates.\n */\nexports.compile = function (compiler, args, content, parents, options) {\n  return compiler(content, parents, options, args.join(''));\n};\n\nexports.parse = function (str, line, parser) {\n  parser.on('*', function (token) {\n    this.out.push(token.match);\n  });\n  return true;\n};\n\nexports.ends = true;\nexports.block = true;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/swig/lib/tags/block.js"],"names":["exports","compile","compiler","args","content","parents","options","join","parse","str","line","parser","on","token","out","push","match","ends","block"],"mappings":"AAAA;;;;;;;;;;;;AAYAA,OAAO,CAACC,OAAR,GAAkB,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,OAAnC,EAA4CC,OAA5C,EAAqD;AACrE,SAAOJ,QAAQ,CAACE,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,EAA4BH,IAAI,CAACI,IAAL,CAAU,EAAV,CAA5B,CAAf;AACD,CAFD;;AAIAP,OAAO,CAACQ,KAAR,GAAgB,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,MAArB,EAA6B;AAC3CA,EAAAA,MAAM,CAACC,EAAP,CAAU,GAAV,EAAe,UAAUC,KAAV,EAAiB;AAC9B,SAAKC,GAAL,CAASC,IAAT,CAAcF,KAAK,CAACG,KAApB;AACD,GAFD;AAGA,SAAO,IAAP;AACD,CALD;;AAOAhB,OAAO,CAACiB,IAAR,GAAe,IAAf;AACAjB,OAAO,CAACkB,KAAR,GAAgB,IAAhB","sourcesContent":["/**\n * Defines a block in a template that can be overridden by a template extending this one and/or will override the current template's parent template block of the same name.\n *\n * See <a href=\"#inheritance\">Template Inheritance</a> for more information.\n *\n * @alias block\n *\n * @example\n * {% block body %}...{% endblock %}\n *\n * @param {literal}  name   Name of the block for use in parent and extended templates.\n */\nexports.compile = function (compiler, args, content, parents, options) {\n  return compiler(content, parents, options, args.join(''));\n};\n\nexports.parse = function (str, line, parser) {\n  parser.on('*', function (token) {\n    this.out.push(token.match);\n  });\n  return true;\n};\n\nexports.ends = true;\nexports.block = true;\n"]},"metadata":{},"sourceType":"script"}
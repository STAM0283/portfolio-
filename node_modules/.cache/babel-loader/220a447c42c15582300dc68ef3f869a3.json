{"ast":null,"code":"var AWS = require('./core');\n/**\n * @api private\n */\n\n\nAWS.ParamValidator = AWS.util.inherit({\n  validate: function validate(shape, params, context) {\n    return this.validateMember(shape, params || {}, context || 'params');\n  },\n  validateStructure: function validateStructure(shape, params, context) {\n    this.validateType(context, params, ['object'], 'structure');\n\n    for (var i = 0; shape.required && i < shape.required.length; i++) {\n      var paramName = shape.required[i];\n      var value = params[paramName];\n\n      if (value === undefined || value === null) {\n        this.fail('MissingRequiredParameter', 'Missing required key \\'' + paramName + '\\' in ' + context);\n      }\n    } // validate hash members\n\n\n    for (paramName in params) {\n      if (!params.hasOwnProperty(paramName)) continue;\n      var paramValue = params[paramName],\n          memberShape = shape.members[paramName];\n\n      if (memberShape !== undefined) {\n        var memberContext = [context, paramName].join('.');\n        this.validateMember(memberShape, paramValue, memberContext);\n      } else {\n        this.fail('UnexpectedParameter', 'Unexpected key \\'' + paramName + '\\' found in ' + context);\n      }\n    }\n\n    return true;\n  },\n  validateMember: function validateMember(shape, param, context) {\n    switch (shape.type) {\n      case 'structure':\n        return this.validateStructure(shape, param, context);\n\n      case 'list':\n        return this.validateList(shape, param, context);\n\n      case 'map':\n        return this.validateMap(shape, param, context);\n\n      default:\n        return this.validateScalar(shape, param, context);\n    }\n  },\n  validateList: function validateList(shape, params, context) {\n    this.validateType(context, params, [Array]); // validate array members\n\n    for (var i = 0; i < params.length; i++) {\n      this.validateMember(shape.member, params[i], context + '[' + i + ']');\n    }\n  },\n  validateMap: function validateMap(shape, params, context) {\n    this.validateType(context, params, ['object'], 'map');\n\n    for (var param in params) {\n      if (!params.hasOwnProperty(param)) continue;\n      this.validateMember(shape.value, params[param], context + '[\\'' + param + '\\']');\n    }\n  },\n  validateScalar: function validateScalar(shape, value, context) {\n    switch (shape.type) {\n      case null:\n      case undefined:\n      case 'string':\n        return this.validateType(context, value, ['string']);\n\n      case 'base64':\n      case 'binary':\n        return this.validatePayload(context, value);\n\n      case 'integer':\n      case 'float':\n        return this.validateNumber(context, value);\n\n      case 'boolean':\n        return this.validateType(context, value, ['boolean']);\n\n      case 'timestamp':\n        return this.validateType(context, value, [Date, /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/, 'number'], 'Date object, ISO-8601 string, or a UNIX timestamp');\n\n      default:\n        return this.fail('UnkownType', 'Unhandled type ' + shape.type + ' for ' + context);\n    }\n  },\n  fail: function fail(code, message) {\n    throw AWS.util.error(new Error(message), {\n      code: code\n    });\n  },\n  validateType: function validateType(context, value, acceptedTypes, type) {\n    if (value === null || value === undefined) return;\n    var foundInvalidType = false;\n\n    for (var i = 0; i < acceptedTypes.length; i++) {\n      if (typeof acceptedTypes[i] === 'string') {\n        if (typeof value === acceptedTypes[i]) return;\n      } else if (acceptedTypes[i] instanceof RegExp) {\n        if ((value || '').toString().match(acceptedTypes[i])) return;\n      } else {\n        if (value instanceof acceptedTypes[i]) return;\n        if (AWS.util.isType(value, acceptedTypes[i])) return;\n        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();\n        acceptedTypes[i] = AWS.util.typeName(acceptedTypes[i]);\n      }\n\n      foundInvalidType = true;\n    }\n\n    var acceptedType = type;\n\n    if (!acceptedType) {\n      acceptedType = acceptedTypes.join(', ').replace(/,([^,]+)$/, ', or$1');\n    }\n\n    var vowel = acceptedType.match(/^[aeiou]/i) ? 'n' : '';\n    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a' + vowel + ' ' + acceptedType);\n  },\n  validateNumber: function validateNumber(context, value) {\n    if (value === null || value === undefined) return;\n\n    if (typeof value === 'string') {\n      var castedValue = parseFloat(value);\n      if (castedValue.toString() === value) value = castedValue;\n    }\n\n    this.validateType(context, value, ['number']);\n  },\n  validatePayload: function validatePayload(context, value) {\n    if (value === null || value === undefined) return;\n    if (typeof value === 'string') return;\n    if (value && typeof value.byteLength === 'number') return; // typed arrays\n\n    if (AWS.util.isNode()) {\n      // special check for buffer/stream in Node.js\n      var Stream = AWS.util.nodeRequire('stream').Stream;\n      if (AWS.util.Buffer.isBuffer(value) || value instanceof Stream) return;\n    }\n\n    var types = ['Buffer', 'Stream', 'File', 'Blob', 'ArrayBuffer', 'DataView'];\n\n    if (value) {\n      for (var i = 0; i < types.length; i++) {\n        if (AWS.util.isType(value, types[i])) return;\n        if (AWS.util.typeName(value.constructor) === types[i]) return;\n      }\n    }\n\n    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a ' + 'string, Buffer, Stream, Blob, or typed array object');\n  }\n});","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/param_validator.js"],"names":["AWS","require","ParamValidator","util","inherit","validate","shape","params","context","validateMember","validateStructure","validateType","i","required","length","paramName","value","undefined","fail","hasOwnProperty","paramValue","memberShape","members","memberContext","join","param","type","validateList","validateMap","validateScalar","Array","member","validatePayload","validateNumber","Date","code","message","error","Error","acceptedTypes","foundInvalidType","RegExp","toString","match","isType","slice","typeName","acceptedType","replace","vowel","castedValue","parseFloat","byteLength","isNode","Stream","nodeRequire","Buffer","isBuffer","types","constructor"],"mappings":"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","sourcesContent":["var AWS = require('./core');\n\n/**\n * @api private\n */\nAWS.ParamValidator = AWS.util.inherit({\n  validate: function validate(shape, params, context) {\n    return this.validateMember(shape, params || {}, context || 'params');\n  },\n\n  validateStructure: function validateStructure(shape, params, context) {\n    this.validateType(context, params, ['object'], 'structure');\n\n    for (var i = 0; shape.required && i < shape.required.length; i++) {\n      var paramName = shape.required[i];\n      var value = params[paramName];\n      if (value === undefined || value === null) {\n        this.fail('MissingRequiredParameter',\n          'Missing required key \\'' + paramName + '\\' in ' + context);\n      }\n    }\n\n    // validate hash members\n    for (paramName in params) {\n      if (!params.hasOwnProperty(paramName)) continue;\n\n      var paramValue = params[paramName],\n          memberShape = shape.members[paramName];\n\n      if (memberShape !== undefined) {\n        var memberContext = [context, paramName].join('.');\n        this.validateMember(memberShape, paramValue, memberContext);\n      } else {\n        this.fail('UnexpectedParameter',\n          'Unexpected key \\'' + paramName + '\\' found in ' + context);\n      }\n    }\n\n    return true;\n  },\n\n  validateMember: function validateMember(shape, param, context) {\n    switch(shape.type) {\n      case 'structure':\n        return this.validateStructure(shape, param, context);\n      case 'list':\n        return this.validateList(shape, param, context);\n      case 'map':\n        return this.validateMap(shape, param, context);\n      default:\n        return this.validateScalar(shape, param, context);\n    }\n  },\n\n  validateList: function validateList(shape, params, context) {\n    this.validateType(context, params, [Array]);\n\n    // validate array members\n    for (var i = 0; i < params.length; i++) {\n      this.validateMember(shape.member, params[i], context + '[' + i + ']');\n    }\n  },\n\n  validateMap: function validateMap(shape, params, context) {\n    this.validateType(context, params, ['object'], 'map');\n\n    for (var param in params) {\n      if (!params.hasOwnProperty(param)) continue;\n      this.validateMember(shape.value, params[param],\n                          context + '[\\'' +  param + '\\']');\n    }\n  },\n\n  validateScalar: function validateScalar(shape, value, context) {\n    switch (shape.type) {\n      case null:\n      case undefined:\n      case 'string':\n        return this.validateType(context, value, ['string']);\n      case 'base64':\n      case 'binary':\n        return this.validatePayload(context, value);\n      case 'integer':\n      case 'float':\n        return this.validateNumber(context, value);\n      case 'boolean':\n        return this.validateType(context, value, ['boolean']);\n      case 'timestamp':\n        return this.validateType(context, value, [Date,\n          /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/, 'number'],\n          'Date object, ISO-8601 string, or a UNIX timestamp');\n      default:\n        return this.fail('UnkownType', 'Unhandled type ' +\n                         shape.type + ' for ' + context);\n    }\n  },\n\n  fail: function fail(code, message) {\n    throw AWS.util.error(new Error(message), {code: code});\n  },\n\n  validateType: function validateType(context, value, acceptedTypes, type) {\n    if (value === null || value === undefined) return;\n\n    var foundInvalidType = false;\n    for (var i = 0; i < acceptedTypes.length; i++) {\n      if (typeof acceptedTypes[i] === 'string') {\n        if (typeof value === acceptedTypes[i]) return;\n      } else if (acceptedTypes[i] instanceof RegExp) {\n        if ((value || '').toString().match(acceptedTypes[i])) return;\n      } else {\n        if (value instanceof acceptedTypes[i]) return;\n        if (AWS.util.isType(value, acceptedTypes[i])) return;\n        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();\n        acceptedTypes[i] = AWS.util.typeName(acceptedTypes[i]);\n      }\n      foundInvalidType = true;\n    }\n\n    var acceptedType = type;\n    if (!acceptedType) {\n      acceptedType = acceptedTypes.join(', ').replace(/,([^,]+)$/, ', or$1');\n    }\n\n    var vowel = acceptedType.match(/^[aeiou]/i) ? 'n' : '';\n    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a' +\n              vowel + ' ' + acceptedType);\n  },\n\n  validateNumber: function validateNumber(context, value) {\n    if (value === null || value === undefined) return;\n    if (typeof value === 'string') {\n      var castedValue = parseFloat(value);\n      if (castedValue.toString() === value) value = castedValue;\n    }\n    this.validateType(context, value, ['number']);\n  },\n\n  validatePayload: function validatePayload(context, value) {\n    if (value === null || value === undefined) return;\n    if (typeof value === 'string') return;\n    if (value && typeof value.byteLength === 'number') return; // typed arrays\n    if (AWS.util.isNode()) { // special check for buffer/stream in Node.js\n      var Stream = AWS.util.nodeRequire('stream').Stream;\n      if (AWS.util.Buffer.isBuffer(value) || value instanceof Stream) return;\n    }\n\n    var types = ['Buffer', 'Stream', 'File', 'Blob', 'ArrayBuffer', 'DataView'];\n    if (value) {\n      for (var i = 0; i < types.length; i++) {\n        if (AWS.util.isType(value, types[i])) return;\n        if (AWS.util.typeName(value.constructor) === types[i]) return;\n      }\n    }\n\n    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a ' +\n      'string, Buffer, Stream, Blob, or typed array object');\n  }\n});\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var AWS = require('../core');\n\nvar inherit = AWS.util.inherit;\n/**\n * @api private\n */\n\nvar expiresHeader = 'presigned-expires';\n/**\n * @api private\n */\n\nfunction signedUrlBuilder(request) {\n  var expires = request.httpRequest.headers[expiresHeader];\n  delete request.httpRequest.headers['User-Agent'];\n  delete request.httpRequest.headers['X-Amz-User-Agent'];\n\n  if (request.service.getSignerClass() === AWS.Signers.V4) {\n    if (expires > 604800) {\n      // one week expiry is invalid\n      var message = 'Presigning does not support expiry time greater ' + 'than a week with SigV4 signing.';\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidExpiryTime',\n        message: message,\n        retryable: false\n      });\n    }\n\n    request.httpRequest.headers[expiresHeader] = expires;\n  } else if (request.service.getSignerClass() === AWS.Signers.S3) {\n    request.httpRequest.headers[expiresHeader] = parseInt(AWS.util.date.unixTimestamp() + expires, 10).toString();\n  } else {\n    throw AWS.util.error(new Error(), {\n      message: 'Presigning only supports S3 or SigV4 signing.',\n      code: 'UnsupportedSigner',\n      retryable: false\n    });\n  }\n}\n/**\n * @api private\n */\n\n\nfunction signedUrlSigner(request) {\n  var endpoint = request.httpRequest.endpoint;\n  var parsedUrl = AWS.util.urlParse(request.httpRequest.path);\n  var queryParams = {};\n\n  if (parsedUrl.search) {\n    queryParams = AWS.util.queryStringParse(parsedUrl.search.substr(1));\n  }\n\n  AWS.util.each(request.httpRequest.headers, function (key, value) {\n    if (key === expiresHeader) key = 'Expires';\n    queryParams[key] = value;\n  });\n  delete request.httpRequest.headers[expiresHeader];\n  var auth = queryParams['Authorization'].split(' ');\n\n  if (auth[0] === 'AWS') {\n    auth = auth[1].split(':');\n    queryParams['AWSAccessKeyId'] = auth[0];\n    queryParams['Signature'] = auth[1];\n  } else if (auth[0] === 'AWS4-HMAC-SHA256') {\n    // SigV4 signing\n    auth.shift();\n    var rest = auth.join(' ');\n    var signature = rest.match(/Signature=(.*?)(?:,|\\s|\\r?\\n|$)/)[1];\n    queryParams['X-Amz-Signature'] = signature;\n    delete queryParams['Expires'];\n  }\n\n  delete queryParams['Authorization'];\n  delete queryParams['Host']; // build URL\n\n  endpoint.pathname = parsedUrl.pathname;\n  endpoint.search = AWS.util.queryParamsToString(queryParams);\n}\n/**\n * @api private\n */\n\n\nAWS.Signers.Presign = inherit({\n  /**\n   * @api private\n   */\n  sign: function sign(request, expireTime, callback) {\n    request.httpRequest.headers[expiresHeader] = expireTime || 3600;\n    request.on('build', signedUrlBuilder);\n    request.on('sign', signedUrlSigner);\n    request.removeListener('afterBuild', AWS.EventListeners.Core.SET_CONTENT_LENGTH);\n    request.emit('beforePresign', [request]);\n\n    if (callback) {\n      request.build(function () {\n        if (this.response.error) callback(this.response.error);else {\n          callback(null, AWS.util.urlFormat(request.httpRequest.endpoint));\n        }\n      });\n    } else {\n      request.build();\n      return AWS.util.urlFormat(request.httpRequest.endpoint);\n    }\n  }\n});\nmodule.exports = AWS.Signers.Presign;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/signers/presign.js"],"names":["AWS","require","inherit","util","expiresHeader","signedUrlBuilder","request","expires","httpRequest","headers","service","getSignerClass","Signers","V4","message","error","Error","code","retryable","S3","parseInt","date","unixTimestamp","toString","signedUrlSigner","endpoint","parsedUrl","urlParse","path","queryParams","search","queryStringParse","substr","each","key","value","auth","split","shift","rest","join","signature","match","pathname","queryParamsToString","Presign","sign","expireTime","callback","on","removeListener","EventListeners","Core","SET_CONTENT_LENGTH","emit","build","response","urlFormat","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('../core');\nvar inherit = AWS.util.inherit;\n\n/**\n * @api private\n */\nvar expiresHeader = 'presigned-expires';\n\n/**\n * @api private\n */\nfunction signedUrlBuilder(request) {\n  var expires = request.httpRequest.headers[expiresHeader];\n\n  delete request.httpRequest.headers['User-Agent'];\n  delete request.httpRequest.headers['X-Amz-User-Agent'];\n\n  if (request.service.getSignerClass() === AWS.Signers.V4) {\n    if (expires > 604800) { // one week expiry is invalid\n      var message = 'Presigning does not support expiry time greater ' +\n                    'than a week with SigV4 signing.';\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidExpiryTime', message: message, retryable: false\n      });\n    }\n    request.httpRequest.headers[expiresHeader] = expires;\n  } else if (request.service.getSignerClass() === AWS.Signers.S3) {\n    request.httpRequest.headers[expiresHeader] = parseInt(\n      AWS.util.date.unixTimestamp() + expires, 10).toString();\n  } else {\n    throw AWS.util.error(new Error(), {\n      message: 'Presigning only supports S3 or SigV4 signing.',\n      code: 'UnsupportedSigner', retryable: false\n    });\n  }\n}\n\n/**\n * @api private\n */\nfunction signedUrlSigner(request) {\n  var endpoint = request.httpRequest.endpoint;\n  var parsedUrl = AWS.util.urlParse(request.httpRequest.path);\n  var queryParams = {};\n\n  if (parsedUrl.search) {\n    queryParams = AWS.util.queryStringParse(parsedUrl.search.substr(1));\n  }\n\n  AWS.util.each(request.httpRequest.headers, function (key, value) {\n    if (key === expiresHeader) key = 'Expires';\n    queryParams[key] = value;\n  });\n  delete request.httpRequest.headers[expiresHeader];\n\n  var auth = queryParams['Authorization'].split(' ');\n  if (auth[0] === 'AWS') {\n    auth = auth[1].split(':');\n    queryParams['AWSAccessKeyId'] = auth[0];\n    queryParams['Signature'] = auth[1];\n  } else if (auth[0] === 'AWS4-HMAC-SHA256') { // SigV4 signing\n    auth.shift();\n    var rest = auth.join(' ');\n    var signature = rest.match(/Signature=(.*?)(?:,|\\s|\\r?\\n|$)/)[1];\n    queryParams['X-Amz-Signature'] = signature;\n    delete queryParams['Expires'];\n  }\n  delete queryParams['Authorization'];\n  delete queryParams['Host'];\n\n  // build URL\n  endpoint.pathname = parsedUrl.pathname;\n  endpoint.search = AWS.util.queryParamsToString(queryParams);\n}\n\n/**\n * @api private\n */\nAWS.Signers.Presign = inherit({\n  /**\n   * @api private\n   */\n  sign: function sign(request, expireTime, callback) {\n    request.httpRequest.headers[expiresHeader] = expireTime || 3600;\n    request.on('build', signedUrlBuilder);\n    request.on('sign', signedUrlSigner);\n    request.removeListener('afterBuild',\n      AWS.EventListeners.Core.SET_CONTENT_LENGTH);\n\n    request.emit('beforePresign', [request]);\n\n    if (callback) {\n      request.build(function() {\n        if (this.response.error) callback(this.response.error);\n        else {\n          callback(null, AWS.util.urlFormat(request.httpRequest.endpoint));\n        }\n      });\n    } else {\n      request.build();\n      return AWS.util.urlFormat(request.httpRequest.endpoint);\n    }\n  }\n});\n\nmodule.exports = AWS.Signers.Presign;\n"]},"metadata":{},"sourceType":"script"}
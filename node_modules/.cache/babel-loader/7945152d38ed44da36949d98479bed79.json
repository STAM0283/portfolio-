{"ast":null,"code":"var Collection = require('./collection');\n\nvar util = require('../util');\n\nfunction property(obj, name, value) {\n  if (value !== null && value !== undefined) {\n    util.property.apply(this, arguments);\n  }\n}\n\nfunction memoizedProperty(obj, name) {\n  if (!obj.constructor.prototype[name]) {\n    util.memoizedProperty.apply(this, arguments);\n  }\n}\n\nfunction Shape(shape, options, memberName) {\n  options = options || {};\n  property(this, 'shape', shape.shape);\n  property(this, 'api', options.api, false);\n  property(this, 'type', shape.type);\n  property(this, 'location', shape.location || 'body');\n  property(this, 'queryName', shape.queryName);\n  property(this, 'queryFlattened', shape.queryFlattened);\n  property(this, 'name', this.name || shape.xmlName || shape.locationName || memberName);\n  property(this, 'isStreaming', shape.streaming || false);\n  property(this, 'isComposite', shape.isComposite || false);\n  property(this, 'isShape', true, false);\n\n  if (options.documentation) {\n    property(this, 'documentation', shape.documentation);\n    property(this, 'documentationUrl', shape.documentationUrl);\n  }\n\n  if (shape.xmlAttribute) {\n    property(this, 'isXmlAttribute', shape.xmlAttribute || false);\n  } // type conversion and parsing\n\n\n  property(this, 'defaultValue', null);\n\n  this.toWireFormat = function (value) {\n    if (value === null || value === undefined) return '';\n    return value;\n  };\n\n  this.toType = function (value) {\n    return value;\n  };\n}\n\nShape.normalizedTypes = {\n  character: 'string',\n  double: 'float',\n  long: 'integer',\n  short: 'integer',\n  biginteger: 'integer',\n  bigdecimal: 'float',\n  blob: 'binary'\n};\nShape.types = {\n  structure: StructureShape,\n  list: ListShape,\n  map: MapShape,\n  boolean: BooleanShape,\n  timestamp: TimestampShape,\n  float: FloatShape,\n  integer: IntegerShape,\n  string: StringShape,\n  base64: Base64Shape,\n  binary: BinaryShape\n};\n\nShape.resolve = function resolve(shape, options) {\n  if (shape.shape) {\n    var refShape = options.api.shapes[shape.shape];\n\n    if (!refShape) {\n      throw new Error('Cannot find shape reference: ' + shape.shape);\n    }\n\n    return refShape;\n  } else {\n    return null;\n  }\n};\n\nShape.create = function create(shape, options, memberName) {\n  if (shape.isShape) return shape;\n  var refShape = Shape.resolve(shape, options);\n\n  if (refShape) {\n    var filteredKeys = Object.keys(shape);\n\n    if (!options.documentation) {\n      filteredKeys = filteredKeys.filter(function (name) {\n        return !name.match(/documentation/);\n      });\n    }\n\n    if (filteredKeys === ['shape']) {\n      // no inline customizations\n      return refShape;\n    } // create an inline shape with extra members\n\n\n    var InlineShape = function () {\n      refShape.constructor.call(this, shape, options, memberName);\n    };\n\n    InlineShape.prototype = refShape;\n    return new InlineShape();\n  } else {\n    // set type if not set\n    if (!shape.type) {\n      if (shape.members) shape.type = 'structure';else if (shape.member) shape.type = 'list';else if (shape.key) shape.type = 'map';else shape.type = 'string';\n    } // normalize types\n\n\n    var origType = shape.type;\n\n    if (Shape.normalizedTypes[shape.type]) {\n      shape.type = Shape.normalizedTypes[shape.type];\n    }\n\n    if (Shape.types[shape.type]) {\n      return new Shape.types[shape.type](shape, options, memberName);\n    } else {\n      throw new Error('Unrecognized shape type: ' + origType);\n    }\n  }\n};\n\nfunction CompositeShape(shape) {\n  Shape.apply(this, arguments);\n  property(this, 'isComposite', true);\n\n  if (shape.flattened) {\n    property(this, 'flattened', shape.flattened || false);\n  }\n}\n\nfunction StructureShape(shape, options) {\n  var requiredMap = null,\n      firstInit = !this.isShape;\n  CompositeShape.apply(this, arguments);\n\n  if (firstInit) {\n    property(this, 'defaultValue', function () {\n      return {};\n    });\n    property(this, 'members', {});\n    property(this, 'memberNames', []);\n    property(this, 'required', []);\n    property(this, 'isRequired', function (name) {\n      return false;\n    });\n  }\n\n  if (shape.members) {\n    property(this, 'members', new Collection(shape.members, options, function (name, member) {\n      return Shape.create(member, options, name);\n    }));\n    memoizedProperty(this, 'memberNames', function () {\n      return shape.xmlOrder || Object.keys(shape.members);\n    });\n  }\n\n  if (shape.required) {\n    property(this, 'required', shape.required);\n    property(this, 'isRequired', function (name) {\n      if (!requiredMap) {\n        requiredMap = {};\n\n        for (var i = 0; i < shape.required.length; i++) {\n          requiredMap[shape.required[i]] = true;\n        }\n      }\n\n      return requiredMap[name];\n    }, false, true);\n  }\n\n  property(this, 'resultWrapper', shape.resultWrapper || null);\n\n  if (shape.payload) {\n    property(this, 'payload', shape.payload);\n  }\n\n  if (typeof shape.xmlNamespace === 'string') {\n    property(this, 'xmlNamespaceUri', shape.xmlNamespace);\n  } else if (typeof shape.xmlNamespace === 'object') {\n    property(this, 'xmlNamespacePrefix', shape.xmlNamespace.prefix);\n    property(this, 'xmlNamespaceUri', shape.xmlNamespace.uri);\n  }\n}\n\nfunction ListShape(shape, options) {\n  var self = this,\n      firstInit = !this.isShape;\n  CompositeShape.apply(this, arguments);\n\n  if (firstInit) {\n    property(this, 'defaultValue', function () {\n      return [];\n    });\n  }\n\n  if (shape.member) {\n    memoizedProperty(this, 'member', function () {\n      return Shape.create(shape.member, options);\n    });\n  }\n\n  if (this.flattened) {\n    var oldName = this.name;\n    memoizedProperty(this, 'name', function () {\n      return self.member.name || oldName;\n    });\n  }\n}\n\nfunction MapShape(shape, options) {\n  var firstInit = !this.isShape;\n  CompositeShape.apply(this, arguments);\n\n  if (firstInit) {\n    property(this, 'defaultValue', function () {\n      return {};\n    });\n    property(this, 'key', Shape.create({\n      type: 'string'\n    }, options));\n    property(this, 'value', Shape.create({\n      type: 'string'\n    }, options));\n  }\n\n  if (shape.key) {\n    memoizedProperty(this, 'key', function () {\n      return Shape.create(shape.key, options);\n    });\n  }\n\n  if (shape.value) {\n    memoizedProperty(this, 'value', function () {\n      return Shape.create(shape.value, options);\n    });\n  }\n}\n\nfunction TimestampShape(shape) {\n  var self = this;\n  Shape.apply(this, arguments);\n\n  if (shape.timestampFormat) {\n    property(this, 'timestampFormat', shape.timestampFormat);\n  } else if (this.api) {\n    property(this, 'timestampFormat', this.api.timestampFormat);\n  }\n\n  this.toType = function (value) {\n    if (value === null || value === undefined) return null;\n    if (typeof value.toUTCString === 'function') return value;\n    return typeof value === 'string' || typeof value === 'number' ? util.date.parseTimestamp(value) : null;\n  };\n\n  this.toWireFormat = function (value) {\n    return util.date.format(value, self.timestampFormat);\n  };\n}\n\nfunction StringShape() {\n  Shape.apply(this, arguments);\n}\n\nfunction FloatShape() {\n  Shape.apply(this, arguments);\n\n  this.toType = function (value) {\n    if (value === null || value === undefined) return null;\n    return parseFloat(value);\n  };\n\n  this.toWireFormat = this.toType;\n}\n\nfunction IntegerShape() {\n  Shape.apply(this, arguments);\n\n  this.toType = function (value) {\n    if (value === null || value === undefined) return null;\n    return parseInt(value, 10);\n  };\n\n  this.toWireFormat = this.toType;\n}\n\nfunction BinaryShape() {\n  Shape.apply(this, arguments);\n  this.toType = util.base64.decode;\n  this.toWireFormat = util.base64.encode;\n}\n\nfunction Base64Shape() {\n  BinaryShape.apply(this, arguments);\n}\n\nfunction BooleanShape() {\n  Shape.apply(this, arguments);\n\n  this.toType = function (value) {\n    if (value === null || value === undefined) return null;\n    return value === 'true';\n  };\n}\n\nShape.shapes = {\n  StructureShape: StructureShape,\n  ListShape: ListShape,\n  MapShape: MapShape,\n  StringShape: StringShape,\n  BooleanShape: BooleanShape,\n  Base64Shape: Base64Shape\n};\nmodule.exports = Shape;","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/model/shape.js"],"names":["Collection","require","util","property","obj","name","value","undefined","apply","arguments","memoizedProperty","constructor","prototype","Shape","shape","options","memberName","api","type","location","queryName","queryFlattened","xmlName","locationName","streaming","isComposite","documentation","documentationUrl","xmlAttribute","toWireFormat","toType","normalizedTypes","character","double","long","short","biginteger","bigdecimal","blob","types","structure","StructureShape","list","ListShape","map","MapShape","boolean","BooleanShape","timestamp","TimestampShape","float","FloatShape","integer","IntegerShape","string","StringShape","base64","Base64Shape","binary","BinaryShape","resolve","refShape","shapes","Error","create","isShape","filteredKeys","Object","keys","filter","match","InlineShape","call","members","member","key","origType","CompositeShape","flattened","requiredMap","firstInit","xmlOrder","required","i","length","resultWrapper","payload","xmlNamespace","prefix","uri","self","oldName","timestampFormat","toUTCString","date","parseTimestamp","format","parseFloat","parseInt","decode","encode","module","exports"],"mappings":"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","sourcesContent":["var Collection = require('./collection');\n\nvar util = require('../util');\n\nfunction property(obj, name, value) {\n  if (value !== null && value !== undefined) {\n    util.property.apply(this, arguments);\n  }\n}\n\nfunction memoizedProperty(obj, name) {\n  if (!obj.constructor.prototype[name]) {\n    util.memoizedProperty.apply(this, arguments);\n  }\n}\n\nfunction Shape(shape, options, memberName) {\n  options = options || {};\n\n  property(this, 'shape', shape.shape);\n  property(this, 'api', options.api, false);\n  property(this, 'type', shape.type);\n  property(this, 'location', shape.location || 'body');\n  property(this, 'queryName', shape.queryName);\n  property(this, 'queryFlattened', shape.queryFlattened);\n  property(this, 'name', this.name || shape.xmlName || shape.locationName ||\n                         memberName);\n  property(this, 'isStreaming', shape.streaming || false);\n  property(this, 'isComposite', shape.isComposite || false);\n  property(this, 'isShape', true, false);\n\n  if (options.documentation) {\n    property(this, 'documentation', shape.documentation);\n    property(this, 'documentationUrl', shape.documentationUrl);\n  }\n\n  if (shape.xmlAttribute) {\n    property(this, 'isXmlAttribute', shape.xmlAttribute || false);\n  }\n\n  // type conversion and parsing\n  property(this, 'defaultValue', null);\n  this.toWireFormat = function(value) {\n    if (value === null || value === undefined) return '';\n    return value;\n  };\n  this.toType = function(value) { return value; };\n}\n\nShape.normalizedTypes = {\n  character: 'string',\n  double: 'float',\n  long: 'integer',\n  short: 'integer',\n  biginteger: 'integer',\n  bigdecimal: 'float',\n  blob: 'binary'\n};\n\nShape.types = {\n  structure: StructureShape,\n  list: ListShape,\n  map: MapShape,\n  boolean: BooleanShape,\n  timestamp: TimestampShape,\n  float: FloatShape,\n  integer: IntegerShape,\n  string: StringShape,\n  base64: Base64Shape,\n  binary: BinaryShape\n};\n\nShape.resolve = function resolve(shape, options) {\n  if (shape.shape) {\n    var refShape = options.api.shapes[shape.shape];\n    if (!refShape) {\n      throw new Error('Cannot find shape reference: ' + shape.shape);\n    }\n\n    return refShape;\n  } else {\n    return null;\n  }\n};\n\nShape.create = function create(shape, options, memberName) {\n  if (shape.isShape) return shape;\n\n  var refShape = Shape.resolve(shape, options);\n  if (refShape) {\n    var filteredKeys = Object.keys(shape);\n    if (!options.documentation) {\n      filteredKeys = filteredKeys.filter(function(name) {\n        return !name.match(/documentation/);\n      });\n    }\n    if (filteredKeys === ['shape']) { // no inline customizations\n      return refShape;\n    }\n\n    // create an inline shape with extra members\n    var InlineShape = function() {\n      refShape.constructor.call(this, shape, options, memberName);\n    };\n    InlineShape.prototype = refShape;\n    return new InlineShape();\n  } else {\n    // set type if not set\n    if (!shape.type) {\n      if (shape.members) shape.type = 'structure';\n      else if (shape.member) shape.type = 'list';\n      else if (shape.key) shape.type = 'map';\n      else shape.type = 'string';\n    }\n\n    // normalize types\n    var origType = shape.type;\n    if (Shape.normalizedTypes[shape.type]) {\n      shape.type = Shape.normalizedTypes[shape.type];\n    }\n\n    if (Shape.types[shape.type]) {\n      return new Shape.types[shape.type](shape, options, memberName);\n    } else {\n      throw new Error('Unrecognized shape type: ' + origType);\n    }\n  }\n};\n\nfunction CompositeShape(shape) {\n  Shape.apply(this, arguments);\n  property(this, 'isComposite', true);\n\n  if (shape.flattened) {\n    property(this, 'flattened', shape.flattened || false);    \n  }\n}\n\nfunction StructureShape(shape, options) {\n  var requiredMap = null, firstInit = !this.isShape;\n\n  CompositeShape.apply(this, arguments);\n\n  if (firstInit) {\n    property(this, 'defaultValue', function() { return {}; });\n    property(this, 'members', {});\n    property(this, 'memberNames', []);\n    property(this, 'required', []);\n    property(this, 'isRequired', function(name) { return false; });\n  }\n\n  if (shape.members) {\n    property(this, 'members', new Collection(shape.members, options, function(name, member) {\n      return Shape.create(member, options, name);\n    }));\n    memoizedProperty(this, 'memberNames', function() {\n      return shape.xmlOrder || Object.keys(shape.members);\n    });\n  }\n\n  if (shape.required) {\n    property(this, 'required', shape.required);\n    property(this, 'isRequired', function(name) {\n      if (!requiredMap) {\n        requiredMap = {};\n        for (var i = 0; i < shape.required.length; i++) {\n          requiredMap[shape.required[i]] = true;\n        }\n      }\n\n      return requiredMap[name];\n    }, false, true);\n  }\n\n  property(this, 'resultWrapper', shape.resultWrapper || null);\n\n  if (shape.payload) {\n    property(this, 'payload', shape.payload);\n  }\n\n  if (typeof shape.xmlNamespace === 'string') {\n    property(this, 'xmlNamespaceUri', shape.xmlNamespace);\n  } else if (typeof shape.xmlNamespace === 'object') {\n    property(this, 'xmlNamespacePrefix', shape.xmlNamespace.prefix);\n    property(this, 'xmlNamespaceUri', shape.xmlNamespace.uri);\n  }\n}\n\nfunction ListShape(shape, options) {\n  var self = this, firstInit = !this.isShape;\n  CompositeShape.apply(this, arguments);\n\n  if (firstInit) {\n    property(this, 'defaultValue', function() { return []; });\n  }\n\n  if (shape.member) {\n    memoizedProperty(this, 'member', function() {\n      return Shape.create(shape.member, options);\n    });\n  }\n\n  if (this.flattened) {\n    var oldName = this.name;\n    memoizedProperty(this, 'name', function() {\n      return self.member.name || oldName;\n    });\n  }\n}\n\nfunction MapShape(shape, options) {\n  var firstInit = !this.isShape;\n  CompositeShape.apply(this, arguments);\n\n  if (firstInit) {\n    property(this, 'defaultValue', function() { return {}; });\n    property(this, 'key', Shape.create({type: 'string'}, options));\n    property(this, 'value', Shape.create({type: 'string'}, options));\n  }\n\n  if (shape.key) {\n    memoizedProperty(this, 'key', function() {\n      return Shape.create(shape.key, options);\n    });\n  }\n  if (shape.value) {\n    memoizedProperty(this, 'value', function() {\n      return Shape.create(shape.value, options);\n    });    \n  }\n}\n\nfunction TimestampShape(shape) {\n  var self = this;\n  Shape.apply(this, arguments);\n\n  if (shape.timestampFormat) {\n    property(this, 'timestampFormat', shape.timestampFormat);\n  } else if (this.api) {\n    property(this, 'timestampFormat', this.api.timestampFormat);\n  }\n\n  this.toType = function(value) {\n    if (value === null || value === undefined) return null;\n    if (typeof value.toUTCString === 'function') return value;\n    return typeof value === 'string' || typeof value === 'number' ?\n           util.date.parseTimestamp(value) : null;\n  };\n\n  this.toWireFormat = function(value) {\n    return util.date.format(value, self.timestampFormat);\n  };\n}\n\nfunction StringShape() {\n  Shape.apply(this, arguments);\n}\n\nfunction FloatShape() {\n  Shape.apply(this, arguments);\n\n  this.toType = function(value) {\n    if (value === null || value === undefined) return null;\n    return parseFloat(value);\n  };\n  this.toWireFormat = this.toType;\n}\n\nfunction IntegerShape() {\n  Shape.apply(this, arguments);\n\n  this.toType = function(value) {\n    if (value === null || value === undefined) return null;\n    return parseInt(value, 10);\n  };\n  this.toWireFormat = this.toType;\n}\n\nfunction BinaryShape() {\n  Shape.apply(this, arguments);\n  this.toType = util.base64.decode;\n  this.toWireFormat = util.base64.encode;\n}\n\nfunction Base64Shape() {\n  BinaryShape.apply(this, arguments);\n}\n\nfunction BooleanShape() {\n  Shape.apply(this, arguments);\n\n  this.toType = function(value) {\n    if (value === null || value === undefined) return null;\n    return value === 'true';\n  };\n}\n\nShape.shapes = {\n  StructureShape: StructureShape,\n  ListShape: ListShape,\n  MapShape: MapShape,\n  StringShape: StringShape,\n  BooleanShape: BooleanShape,\n  Base64Shape: Base64Shape\n};\n\nmodule.exports = Shape;\n"]},"metadata":{},"sourceType":"script"}
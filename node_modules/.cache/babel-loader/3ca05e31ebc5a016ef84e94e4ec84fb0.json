{"ast":null,"code":"var path = require('path'),\n    utils = require('../utils');\n/**\n * Loads templates from a provided object mapping.\n * @alias swig.loaders.memory\n * @example\n * var templates = {\n *   \"layout\": \"{% block content %}{% endblock %}\",\n *   \"home.html\": \"{% extends 'layout.html' %}{% block content %}...{% endblock %}\"\n * };\n * swig.setDefaults({ loader: swig.loaders.memory(templates) });\n *\n * @param {object} mapping Hash object with template paths as keys and template sources as values.\n * @param {string} [basepath] Path to the templates as string. Assigning this value allows you to use semi-absolute paths to templates instead of relative paths.\n */\n\n\nmodule.exports = function (mapping, basepath) {\n  var ret = {};\n  basepath = basepath ? path.normalize(basepath) : null;\n  /**\n   * Resolves <var>to</var> to an absolute path or unique identifier. This is used for building correct, normalized, and absolute paths to a given template.\n   * @alias resolve\n   * @param  {string} to        Non-absolute identifier or pathname to a file.\n   * @param  {string} [from]    If given, should attempt to find the <var>to</var> path in relation to this given, known path.\n   * @return {string}\n   */\n\n  ret.resolve = function (to, from) {\n    if (basepath) {\n      from = basepath;\n    } else {\n      from = from ? path.dirname(from) : '/';\n    }\n\n    return path.resolve(from, to);\n  };\n  /**\n   * Loads a single template. Given a unique <var>identifier</var> found by the <var>resolve</var> method this should return the given template.\n   * @alias load\n   * @param  {string}   identifier  Unique identifier of a template (possibly an absolute path).\n   * @param  {function} [cb]        Asynchronous callback function. If not provided, this method should run synchronously.\n   * @return {string}               Template source string.\n   */\n\n\n  ret.load = function (pathname, cb) {\n    var src, paths;\n    paths = [pathname, pathname.replace(/^(\\/|\\\\)/, '')];\n    src = mapping[paths[0]] || mapping[paths[1]];\n\n    if (!src) {\n      utils.throwError('Unable to find template \"' + pathname + '\".');\n    }\n\n    if (cb) {\n      cb(null, src);\n      return;\n    }\n\n    return src;\n  };\n\n  return ret;\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/swig/lib/loaders/memory.js"],"names":["path","require","utils","module","exports","mapping","basepath","ret","normalize","resolve","to","from","dirname","load","pathname","cb","src","paths","replace","throwError"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;AAAA,IACEC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADjB;AAGA;;;;;;;;;;;;;;;AAaAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,QAAnB,EAA6B;AAC5C,MAAIC,GAAG,GAAG,EAAV;AAEAD,EAAAA,QAAQ,GAAIA,QAAD,GAAaN,IAAI,CAACQ,SAAL,CAAeF,QAAf,CAAb,GAAwC,IAAnD;AAEA;;;;;;;;AAOAC,EAAAA,GAAG,CAACE,OAAJ,GAAc,UAAUC,EAAV,EAAcC,IAAd,EAAoB;AAChC,QAAIL,QAAJ,EAAc;AACZK,MAAAA,IAAI,GAAGL,QAAP;AACD,KAFD,MAEO;AACLK,MAAAA,IAAI,GAAIA,IAAD,GAASX,IAAI,CAACY,OAAL,CAAaD,IAAb,CAAT,GAA8B,GAArC;AACD;;AACD,WAAOX,IAAI,CAACS,OAAL,CAAaE,IAAb,EAAmBD,EAAnB,CAAP;AACD,GAPD;AASA;;;;;;;;;AAOAH,EAAAA,GAAG,CAACM,IAAJ,GAAW,UAAUC,QAAV,EAAoBC,EAApB,EAAwB;AACjC,QAAIC,GAAJ,EAASC,KAAT;AAEAA,IAAAA,KAAK,GAAG,CAACH,QAAD,EAAWA,QAAQ,CAACI,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAAX,CAAR;AAEAF,IAAAA,GAAG,GAAGX,OAAO,CAACY,KAAK,CAAC,CAAD,CAAN,CAAP,IAAqBZ,OAAO,CAACY,KAAK,CAAC,CAAD,CAAN,CAAlC;;AACA,QAAI,CAACD,GAAL,EAAU;AACRd,MAAAA,KAAK,CAACiB,UAAN,CAAiB,8BAA8BL,QAA9B,GAAyC,IAA1D;AACD;;AAED,QAAIC,EAAJ,EAAQ;AACNA,MAAAA,EAAE,CAAC,IAAD,EAAOC,GAAP,CAAF;AACA;AACD;;AACD,WAAOA,GAAP;AACD,GAfD;;AAiBA,SAAOT,GAAP;AACD,CA9CD","sourcesContent":["var path = require('path'),\n  utils = require('../utils');\n\n/**\n * Loads templates from a provided object mapping.\n * @alias swig.loaders.memory\n * @example\n * var templates = {\n *   \"layout\": \"{% block content %}{% endblock %}\",\n *   \"home.html\": \"{% extends 'layout.html' %}{% block content %}...{% endblock %}\"\n * };\n * swig.setDefaults({ loader: swig.loaders.memory(templates) });\n *\n * @param {object} mapping Hash object with template paths as keys and template sources as values.\n * @param {string} [basepath] Path to the templates as string. Assigning this value allows you to use semi-absolute paths to templates instead of relative paths.\n */\nmodule.exports = function (mapping, basepath) {\n  var ret = {};\n\n  basepath = (basepath) ? path.normalize(basepath) : null;\n\n  /**\n   * Resolves <var>to</var> to an absolute path or unique identifier. This is used for building correct, normalized, and absolute paths to a given template.\n   * @alias resolve\n   * @param  {string} to        Non-absolute identifier or pathname to a file.\n   * @param  {string} [from]    If given, should attempt to find the <var>to</var> path in relation to this given, known path.\n   * @return {string}\n   */\n  ret.resolve = function (to, from) {\n    if (basepath) {\n      from = basepath;\n    } else {\n      from = (from) ? path.dirname(from) : '/';\n    }\n    return path.resolve(from, to);\n  };\n\n  /**\n   * Loads a single template. Given a unique <var>identifier</var> found by the <var>resolve</var> method this should return the given template.\n   * @alias load\n   * @param  {string}   identifier  Unique identifier of a template (possibly an absolute path).\n   * @param  {function} [cb]        Asynchronous callback function. If not provided, this method should run synchronously.\n   * @return {string}               Template source string.\n   */\n  ret.load = function (pathname, cb) {\n    var src, paths;\n\n    paths = [pathname, pathname.replace(/^(\\/|\\\\)/, '')];\n\n    src = mapping[paths[0]] || mapping[paths[1]];\n    if (!src) {\n      utils.throwError('Unable to find template \"' + pathname + '\".');\n    }\n\n    if (cb) {\n      cb(null, src);\n      return;\n    }\n    return src;\n  };\n\n  return ret;\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var AWS = require('../core');\n\nAWS.util.update(AWS.DynamoDB.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    if (request.service.config.dynamoDbCrc32) {\n      request.addListener('extractData', this.checkCrc32);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  checkCrc32: function checkCrc32(resp) {\n    if (!resp.request.service.crc32IsValid(resp)) {\n      resp.error = AWS.util.error(new Error(), {\n        code: 'CRC32CheckFailed',\n        message: 'CRC32 integrity check failed',\n        retryable: true\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  crc32IsValid: function crc32IsValid(resp) {\n    var crc = resp.httpResponse.headers['x-amz-crc32'];\n    if (!crc) return true; // no (valid) CRC32 header\n\n    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);\n  },\n\n  /**\n   * @api private\n   */\n  defaultRetryCount: 10,\n\n  /**\n   * @api private\n   */\n  retryDelays: function retryDelays() {\n    var retryCount = this.numRetries();\n    var delays = [];\n\n    for (var i = 0; i < retryCount; ++i) {\n      if (i === 0) {\n        delays.push(0);\n      } else {\n        delays.push(50 * Math.pow(2, i - 1));\n      }\n    }\n\n    return delays;\n  }\n});","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/aws-sdk/lib/services/dynamodb.js"],"names":["AWS","require","util","update","DynamoDB","prototype","setupRequestListeners","request","service","config","dynamoDbCrc32","addListener","checkCrc32","resp","crc32IsValid","error","Error","code","message","retryable","crc","httpResponse","headers","parseInt","crypto","crc32","body","defaultRetryCount","retryDelays","retryCount","numRetries","delays","i","push","Math","pow"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AAEAD,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgBH,GAAG,CAACI,QAAJ,CAAaC,SAA7B,EAAwC;AACtC;;;AAGAC,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BC,OAA/B,EAAwC;AAC7D,QAAIA,OAAO,CAACC,OAAR,CAAgBC,MAAhB,CAAuBC,aAA3B,EAA0C;AACxCH,MAAAA,OAAO,CAACI,WAAR,CAAoB,aAApB,EAAmC,KAAKC,UAAxC;AACD;AACF,GARqC;;AAUtC;;;AAGAA,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACpC,QAAI,CAACA,IAAI,CAACN,OAAL,CAAaC,OAAb,CAAqBM,YAArB,CAAkCD,IAAlC,CAAL,EAA8C;AAC5CA,MAAAA,IAAI,CAACE,KAAL,GAAaf,GAAG,CAACE,IAAJ,CAASa,KAAT,CAAe,IAAIC,KAAJ,EAAf,EAA4B;AACvCC,QAAAA,IAAI,EAAE,kBADiC;AAEvCC,QAAAA,OAAO,EAAE,8BAF8B;AAGvCC,QAAAA,SAAS,EAAE;AAH4B,OAA5B,CAAb;AAKD;AACF,GArBqC;;AAuBtC;;;AAGAL,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBD,IAAtB,EAA4B;AACxC,QAAIO,GAAG,GAAGP,IAAI,CAACQ,YAAL,CAAkBC,OAAlB,CAA0B,aAA1B,CAAV;AACA,QAAI,CAACF,GAAL,EAAU,OAAO,IAAP,CAF8B,CAEjB;;AACvB,WAAOG,QAAQ,CAACH,GAAD,EAAM,EAAN,CAAR,KAAsBpB,GAAG,CAACE,IAAJ,CAASsB,MAAT,CAAgBC,KAAhB,CAAsBZ,IAAI,CAACQ,YAAL,CAAkBK,IAAxC,CAA7B;AACD,GA9BqC;;AAgCtC;;;AAGAC,EAAAA,iBAAiB,EAAE,EAnCmB;;AAqCtC;;;AAGAC,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,QAAIC,UAAU,GAAG,KAAKC,UAAL,EAAjB;AACA,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAApB,EAAgC,EAAEG,CAAlC,EAAqC;AACnC,UAAIA,CAAC,KAAK,CAAV,EAAa;AACXD,QAAAA,MAAM,CAACE,IAAP,CAAY,CAAZ;AACD,OAFD,MAEO;AACLF,QAAAA,MAAM,CAACE,IAAP,CAAY,KAAKC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,CAAC,GAAG,CAAhB,CAAjB;AACD;AACF;;AACD,WAAOD,MAAP;AACD;AAnDqC,CAAxC","sourcesContent":["var AWS = require('../core');\n\nAWS.util.update(AWS.DynamoDB.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    if (request.service.config.dynamoDbCrc32) {\n      request.addListener('extractData', this.checkCrc32);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  checkCrc32: function checkCrc32(resp) {\n    if (!resp.request.service.crc32IsValid(resp)) {\n      resp.error = AWS.util.error(new Error(), {\n        code: 'CRC32CheckFailed',\n        message: 'CRC32 integrity check failed',\n        retryable: true\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  crc32IsValid: function crc32IsValid(resp) {\n    var crc = resp.httpResponse.headers['x-amz-crc32'];\n    if (!crc) return true; // no (valid) CRC32 header\n    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);\n  },\n\n  /**\n   * @api private\n   */\n  defaultRetryCount: 10,\n\n  /**\n   * @api private\n   */\n  retryDelays: function retryDelays() {\n    var retryCount = this.numRetries();\n    var delays = [];\n    for (var i = 0; i < retryCount; ++i) {\n      if (i === 0) {\n        delays.push(0);\n      } else {\n        delays.push(50 * Math.pow(2, i - 1));\n      }\n    }\n    return delays;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}
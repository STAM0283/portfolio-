{"ast":null,"code":"'use strict';\n\nvar createSMTPServer = require('./server'),\n    Stream = require('stream').Stream,\n    utillib = require('util'),\n    oslib = require('os');\n\nmodule.exports = function (options, connectionCallback) {\n  return new SimpleServer(options, connectionCallback);\n};\n\nfunction SimpleServer(options, connectionCallback) {\n  if (!connectionCallback && typeof options == 'function') {\n    connectionCallback = options;\n    options = undefined;\n  }\n\n  this.connectionCallback = connectionCallback;\n  this.options = options || {};\n  this.initialChunk = true;\n\n  if (!('ignoreTLS' in this.options)) {\n    this.options.ignoreTLS = true;\n  }\n\n  if (!('disableDNSValidation' in this.options)) {\n    this.options.disableDNSValidation = true;\n  }\n\n  this.server = createSMTPServer(options);\n  this.listen = this.server.listen.bind(this.server);\n  this.server.on('startData', this._onStartData.bind(this));\n  this.server.on('data', this._onData.bind(this));\n  this.server.on('dataReady', this._onDataReady.bind(this));\n}\n\nSimpleServer.prototype._onStartData = function (connection) {\n  connection._session = new SimpleServerConnection(connection);\n  this.connectionCallback(connection._session);\n};\n\nSimpleServer.prototype._onData = function (connection, chunk) {\n  if (this.initialChunk) {\n    chunk = Buffer.concat([new Buffer(this._generateReceivedHeader(connection) + '\\r\\n', 'utf-8'), chunk]);\n    this.initialChunk = false;\n  }\n\n  connection._session.emit('data', chunk);\n};\n\nSimpleServer.prototype._onDataReady = function (connection, callback) {\n  connection._session._setCallback(callback);\n\n  connection._session.emit('end');\n};\n\nSimpleServer.prototype._generateReceivedHeader = function (connection) {\n  var parts = [];\n\n  if (connection.host && !connection.host.match(/^\\[?\\d+\\.\\d+\\.\\d+\\.\\d+\\]?$/)) {\n    parts.push('from ' + connection.host);\n    parts.push('(' + connection.remoteAddress + ')');\n  } else {\n    parts.push('from ' + connection.remoteAddress);\n  }\n\n  parts.push('by ' + getHostName());\n  parts.push('with SMTP;');\n  parts.push(Date());\n  return 'Received: ' + parts.join(' ');\n};\n\nfunction SimpleServerConnection(connection) {\n  Stream.call(this);\n  this.accepted = false;\n  this.rejected = false;\n\n  this._callback = function (err, code) {\n    if (err) {\n      this.rejected = err;\n    } else {\n      this.accepted = code || true;\n    }\n  };\n\n  ['from', 'to', 'host', 'remoteAddress'].forEach(function (key) {\n    if (connection[key]) {\n      this[key] = connection[key];\n    }\n  }.bind(this));\n}\n\nutillib.inherits(SimpleServerConnection, Stream);\n\nSimpleServerConnection.prototype._setCallback = function (callback) {\n  if (this.rejected) {\n    return callback(this.rejected);\n  } else if (this.accepted) {\n    return callback(null, this.accepted !== true ? this.accepted : undefined);\n  } else {\n    this._callback = callback;\n  }\n};\n\nSimpleServerConnection.prototype.pause = function () {};\n\nSimpleServerConnection.prototype.resume = function () {};\n\nSimpleServerConnection.prototype.accept = function (code) {\n  this._callback(null, code);\n};\n\nSimpleServerConnection.prototype.reject = function (reason) {\n  this._callback(new Error(reason || 'Rejected'));\n};\n\nfunction getHostName() {\n  return oslib.hostname && oslib.hostname() || oslib.getHostname && oslib.getHostname() || '127.0.0.1';\n}","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/simplesmtp/lib/simpleserver.js"],"names":["createSMTPServer","require","Stream","utillib","oslib","module","exports","options","connectionCallback","SimpleServer","undefined","initialChunk","ignoreTLS","disableDNSValidation","server","listen","bind","on","_onStartData","_onData","_onDataReady","prototype","connection","_session","SimpleServerConnection","chunk","Buffer","concat","_generateReceivedHeader","emit","callback","_setCallback","parts","host","match","push","remoteAddress","getHostName","Date","join","call","accepted","rejected","_callback","err","code","forEach","key","inherits","pause","resume","accept","reject","reason","Error","hostname","getHostname"],"mappings":"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","sourcesContent":["'use strict';\n\nvar createSMTPServer = require('./server'),\n    Stream = require('stream').Stream,\n    utillib = require('util'),\n    oslib = require('os');\n\nmodule.exports = function(options, connectionCallback) {\n    return new SimpleServer(options, connectionCallback);\n};\n\nfunction SimpleServer(options, connectionCallback) {\n    if (!connectionCallback && typeof options == 'function') {\n        connectionCallback = options;\n        options = undefined;\n    }\n\n    this.connectionCallback = connectionCallback;\n\n    this.options = options || {};\n    this.initialChunk = true;\n\n    if (!('ignoreTLS' in this.options)) {\n        this.options.ignoreTLS = true;\n    }\n\n    if (!('disableDNSValidation' in this.options)) {\n        this.options.disableDNSValidation = true;\n    }\n\n    this.server = createSMTPServer(options);\n    this.listen = this.server.listen.bind(this.server);\n\n    this.server.on('startData', this._onStartData.bind(this));\n    this.server.on('data', this._onData.bind(this));\n    this.server.on('dataReady', this._onDataReady.bind(this));\n}\n\nSimpleServer.prototype._onStartData = function(connection) {\n    connection._session = new SimpleServerConnection(connection);\n    this.connectionCallback(connection._session);\n};\n\nSimpleServer.prototype._onData = function(connection, chunk) {\n    if (this.initialChunk) {\n        chunk = Buffer.concat([new Buffer(this._generateReceivedHeader(connection) + '\\r\\n', 'utf-8'), chunk]);\n        this.initialChunk = false;\n    }\n    connection._session.emit('data', chunk);\n};\n\nSimpleServer.prototype._onDataReady = function(connection, callback) {\n    connection._session._setCallback(callback);\n    connection._session.emit('end');\n};\n\nSimpleServer.prototype._generateReceivedHeader = function(connection) {\n    var parts = [];\n\n    if (connection.host && !connection.host.match(/^\\[?\\d+\\.\\d+\\.\\d+\\.\\d+\\]?$/)) {\n        parts.push('from ' + connection.host);\n        parts.push('(' + connection.remoteAddress + ')');\n    } else {\n        parts.push('from ' + connection.remoteAddress);\n    }\n\n    parts.push('by ' + getHostName());\n\n    parts.push('with SMTP;');\n\n    parts.push(Date());\n\n    return 'Received: ' + parts.join(' ');\n};\n\nfunction SimpleServerConnection(connection) {\n    Stream.call(this);\n\n    this.accepted = false;\n    this.rejected = false;\n\n    this._callback = (function(err, code) {\n        if (err) {\n            this.rejected = err;\n        } else {\n            this.accepted = code || true;\n        }\n    });\n\n    ['from', 'to', 'host', 'remoteAddress'].forEach((function(key) {\n        if (connection[key]) {\n            this[key] = connection[key];\n        }\n    }).bind(this));\n}\nutillib.inherits(SimpleServerConnection, Stream);\n\nSimpleServerConnection.prototype._setCallback = function(callback) {\n\n    if (this.rejected) {\n        return callback(this.rejected);\n    } else if (this.accepted) {\n        return callback(null, this.accepted !== true ? this.accepted : undefined);\n    } else {\n        this._callback = callback;\n    }\n\n};\n\nSimpleServerConnection.prototype.pause = function() {};\n\nSimpleServerConnection.prototype.resume = function() {};\n\nSimpleServerConnection.prototype.accept = function(code) {\n    this._callback(null, code);\n};\n\nSimpleServerConnection.prototype.reject = function(reason) {\n    this._callback(new Error(reason || 'Rejected'));\n};\n\nfunction getHostName() {\n    return (oslib.hostname && oslib.hostname()) ||\n        (oslib.getHostname && oslib.getHostname()) ||\n        '127.0.0.1';\n}"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict'; // expose to the world\n\nmodule.exports = function () {\n  return new Queue();\n};\n/**\n * Creates a queue object\n *\n * @constructor\n */\n\n\nfunction Queue() {\n  this._instantQueue = [];\n  this._sortedQueue = [];\n  this._shiftTimer = null;\n  this._callbackQueue = [];\n}\n/**\n * Sets a callback to be run when something comes available from the queue\n *\n * @param {Function} callback Callback function to run with queue element as an argument\n */\n\n\nQueue.prototype.get = function (callback) {\n  if (this._instantQueue.length) {\n    callback(this._instantQueue.pop());\n  } else {\n    this._callbackQueue.unshift(callback);\n  }\n};\n/**\n * Adds an element to the queue. If delay (ms) is set, the data will not be available before\n * specified delay has passed. Otherwise the data will be available for processing immediatelly.\n *\n * @param {Mixed} data Value to be queued\n * @param {Number} [delay] If set, delay the availability of the data by {delay} milliseconds\n */\n\n\nQueue.prototype.insert = function (data, delay) {\n  var container,\n      added = -1;\n\n  if (typeof delay != 'number') {\n    this._instantQueue.unshift(data);\n\n    this._processInsert();\n\n    return true;\n  } else {\n    container = {\n      data: data,\n      available: Date.now() + delay\n    };\n\n    for (var i = 0, len = this._sortedQueue.length; i < len; i++) {\n      if (this._sortedQueue[i].available >= container.available) {\n        this._sortedQueue.splice(i, 0, container);\n\n        added = i;\n        break;\n      }\n    }\n\n    if (added < 0) {\n      this._sortedQueue.push(container);\n\n      added = 0;\n    }\n\n    if (added === 0) {\n      this._updateShiftTimer();\n    }\n  }\n};\n/**\n * Clears previous timer and creates a new one (if needed) to process the element\n * in the queue that needs to be processed first.\n */\n\n\nQueue.prototype._updateShiftTimer = function () {\n  var nextShift,\n      now = Date.now();\n  clearTimeout(this._shiftTimer);\n\n  if (!this._sortedQueue.length) {\n    return;\n  }\n\n  nextShift = this._sortedQueue[0].available;\n\n  if (nextShift <= now) {\n    this._shiftSorted();\n  } else {\n    setTimeout(this._shiftSorted.bind(this), // add +15ms to ensure that data is already available when the timer is fired\n    this._sortedQueue[0].available - Date.now() + 15);\n  }\n};\n/**\n * Moves an element from the delayed queue to the immediate queue if an elmenet\n * becomes avilable\n */\n\n\nQueue.prototype._shiftSorted = function () {\n  var container;\n\n  if (!this._sortedQueue.length) {\n    return;\n  }\n\n  if (this._sortedQueue[0].available <= Date.now()) {\n    container = this._sortedQueue.shift();\n    this.insert(container.data);\n  }\n\n  this._updateShiftTimer();\n};\n/**\n * If data from a queue is available and a callback is set, run the callback\n * with available data\n */\n\n\nQueue.prototype._processInsert = function () {\n  if (this._instantQueue.length && this._callbackQueue.length) {\n    this._callbackQueue.pop()(this._instantQueue.pop());\n  }\n};","map":{"version":3,"sources":["/home/wilder/Documents/portfolio/node_modules/directmail/lib/queue.js"],"names":["module","exports","Queue","_instantQueue","_sortedQueue","_shiftTimer","_callbackQueue","prototype","get","callback","length","pop","unshift","insert","data","delay","container","added","_processInsert","available","Date","now","i","len","splice","push","_updateShiftTimer","nextShift","clearTimeout","_shiftSorted","setTimeout","bind","shift"],"mappings":"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","sourcesContent":["'use strict';\n\n// expose to the world\nmodule.exports = function() {\n    return new Queue();\n};\n\n/**\n * Creates a queue object\n *\n * @constructor\n */\nfunction Queue() {\n    this._instantQueue = [];\n    this._sortedQueue = [];\n    this._shiftTimer = null;\n    this._callbackQueue = [];\n}\n\n/**\n * Sets a callback to be run when something comes available from the queue\n *\n * @param {Function} callback Callback function to run with queue element as an argument\n */\nQueue.prototype.get = function(callback) {\n    if (this._instantQueue.length) {\n        callback(this._instantQueue.pop());\n    } else {\n        this._callbackQueue.unshift(callback);\n    }\n};\n\n/**\n * Adds an element to the queue. If delay (ms) is set, the data will not be available before\n * specified delay has passed. Otherwise the data will be available for processing immediatelly.\n *\n * @param {Mixed} data Value to be queued\n * @param {Number} [delay] If set, delay the availability of the data by {delay} milliseconds\n */\nQueue.prototype.insert = function(data, delay) {\n    var container, added = -1;\n    if (typeof delay != 'number') {\n        this._instantQueue.unshift(data);\n        this._processInsert();\n        return true;\n    } else {\n        container = {\n            data: data,\n            available: Date.now() + delay\n        };\n        for (var i = 0, len = this._sortedQueue.length; i < len; i++) {\n            if (this._sortedQueue[i].available >= container.available) {\n                this._sortedQueue.splice(i, 0, container);\n                added = i;\n                break;\n            }\n        }\n        if (added < 0) {\n            this._sortedQueue.push(container);\n            added = 0;\n        }\n\n        if (added === 0) {\n            this._updateShiftTimer();\n        }\n    }\n};\n\n/**\n * Clears previous timer and creates a new one (if needed) to process the element\n * in the queue that needs to be processed first.\n */\nQueue.prototype._updateShiftTimer = function() {\n    var nextShift, now = Date.now();\n    clearTimeout(this._shiftTimer);\n\n    if (!this._sortedQueue.length) {\n        return;\n    }\n\n    nextShift = this._sortedQueue[0].available;\n\n    if (nextShift <= now) {\n        this._shiftSorted();\n    } else {\n        setTimeout(this._shiftSorted.bind(this),\n            // add +15ms to ensure that data is already available when the timer is fired\n            this._sortedQueue[0].available - Date.now() + 15);\n    }\n};\n\n/**\n * Moves an element from the delayed queue to the immediate queue if an elmenet\n * becomes avilable\n */\nQueue.prototype._shiftSorted = function() {\n    var container;\n    if (!this._sortedQueue.length) {\n        return;\n    }\n\n    if (this._sortedQueue[0].available <= Date.now()) {\n        container = this._sortedQueue.shift();\n        this.insert(container.data);\n    }\n\n    this._updateShiftTimer();\n};\n\n/**\n * If data from a queue is available and a callback is set, run the callback\n * with available data\n */\nQueue.prototype._processInsert = function() {\n    if (this._instantQueue.length && this._callbackQueue.length) {\n        this._callbackQueue.pop()(this._instantQueue.pop());\n    }\n};"]},"metadata":{},"sourceType":"script"}